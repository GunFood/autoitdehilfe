And?4
ByRef?4
Case?4
Const?4
ContinueCase?4
ContinueLoop?4
Default?4
Dim?4
Do?4
Else?4
ElseIf?4
EndFunc?4
EndIf?4
EndSelect?4
EndSwitch?4
EndWith?4
Enum?4
Exit?4
ExitLoop?4
False?4
For?4
Func?4
Global?4
If?4
In?4
Local?4
Next?4
Not?4
Null?4
Or?4
ReDim?4
Return?4
Select?4
Static?4
Step?4
Switch?4
Then?4
To?4
True?4
Until?4
Volatile?4
WEnd?4
While?4
With?4
#ce?2
#comments-end?2
#comments-start?2
#cs?2
#include?2
#include-once?2
#NoTrayIcon?2
#OnAutoItStartRegister?2
#RequireAdmin?2
#EndRegion?1
#forcedef?1
#forceref?1
#ignorefunc?1
#pragma?1
#Region?1
@AppDataCommonDir?3
@AppDataDir?3
@AutoItExe?3
@AutoItPID?3
@AutoItVersion?3
@AutoItX64?3
@COM_EventObj?3
@CommonFilesDir?3
@Compiled?3
@ComputerName?3
@ComSpec?3
@CPUArch?3
@CR?3
@CRLF?3
@DesktopCommonDir?3
@DesktopDepth?3
@DesktopDir?3
@DesktopHeight?3
@DesktopRefresh?3
@DesktopWidth?3
@DocumentsCommonDir?3
@error?3
@exitCode?3
@exitMethod?3
@extended?3
@FavoritesCommonDir?3
@FavoritesDir?3
@GUI_CtrlHandle?3
@GUI_CtrlId?3
@GUI_DragFile?3
@GUI_DragId?3
@GUI_DropId?3
@GUI_WinHandle?3
@HomeDrive?3
@HomePath?3
@HomeShare?3
@HotKeyPressed?3
@HOUR?3
@IPAddress1?3
@IPAddress2?3
@IPAddress3?3
@IPAddress4?3
@KBLayout?3
@LF?3
@LocalAppDataDir?3
@LogonDNSDomain?3
@LogonDomain?3
@LogonServer?3
@MDAY?3
@MIN?3
@MON?3
@MSEC?3
@MUILang?3
@MyDocumentsDir?3
@NumParams?3
@OSArch?3
@OSBuild?3
@OSLang?3
@OSServicePack?3
@OSType?3
@OSVersion?3
@ProgramFilesDir?3
@ProgramsCommonDir?3
@ProgramsDir?3
@ScriptDir?3
@ScriptFullPath?3
@ScriptLineNumber?3
@ScriptName?3
@SEC?3
@StartMenuCommonDir?3
@StartMenuDir?3
@StartupCommonDir?3
@StartupDir?3
@SW_DISABLE?3
@SW_ENABLE?3
@SW_HIDE?3
@SW_LOCK?3
@SW_MAXIMIZE?3
@SW_MINIMIZE?3
@SW_RESTORE?3
@SW_SHOW?3
@SW_SHOWDEFAULT?3
@SW_SHOWMAXIMIZED?3
@SW_SHOWMINIMIZED?3
@SW_SHOWMINNOACTIVE?3
@SW_SHOWNA?3
@SW_SHOWNOACTIVATE?3
@SW_SHOWNORMAL?3
@SW_UNLOCK?3
@SystemDir?3
@TAB?3
@TempDir?3
@TRAY_ID?3
@TrayIconFlashing?3
@TrayIconVisible?3
@UserName?3
@UserProfileDir?3
@WDAY?3
@WindowsDir?3
@WorkingDir?3
@YDAY?3
@YEAR?3
Abs ( expression ) Gibt den absoluten Wert (Betrag) einer Zahl zurueck.
ACos ( expression ) Errechnet den Arcus-Cosinus einer Zahl.
AdlibRegister ( "function" [, time = 250] ) Registriert eine Adlib-Funktionalitaet.
AdlibUnRegister ( ["function"] ) Deregistriert eine Adlib-Funktion.
Asc ( "char" ) Gibt den ASCII-Code eines Zeichens zurueck.
AscW ( "char" ) Gibt den Unicode-Code eines Zeichens zurueck.
ASin ( expression ) Errechnet den Arcus-Sinus einer Zahl.
Assign ( "varname", "data" [, flag = 0] ) Weist einer Variable namentlich Daten zu.
ATan ( expression ) Errechnet den Arcus-Tangens einer Zahl.
AutoItSetOption ( "CaretCoordMode" [, param] ) Legt fest, auf welche Weise Koordinaten verwendet werden, entweder absolut oder relativ zum momentan aktiven Fenster:0 = relative Koordinaten zum aktiven Fenster.1 = absolute Bildschirm Koordinaten (Standard).2 = relative Koordinaten zur Client Flaeche des aktiven Fensters.
AutoItSetOption ( "ExpandEnvStrings" [, param] ) Aendert die Interpretation von Strings und %-Symbolen. Als Standard werden Strings buchstabengetreu behandelt, diese Option erlaubt die Benutzung von %environment% Variablen innerhalb von Strings, z.B.: "Das temp Verzeichnis ist: %temp%".0 = Umgebungsvariablen werden nicht erweitert (Standard).1 = erweitert Umgebungsvariablen.Ohne diese Option waere der uebliche Weg:"Das temp Verzeichnis ist:" & <a href="EnvGet.htm">EnvGet</a>("temp")
AutoItSetOption ( "ExpandVarStrings" [, param] ) Aendert die Interpretation von String, Variablen- und Makrosymbolen ($ und @). Als Standard werden Strings buchstabengetreu behandelt, diese Option erlaubt die Benutzung von Variablen und Makros innerhalb von String, z.B.: "Der Wert von var1 ist $var1$".0 = erweitert Variablen nicht (Standard).1 = erweitert Variablen (sollen innerhalb dieses Modus die Zeichen $ oder @ benutzt werden, so muessen sie doppelt angegeben werden:"Das ist ein einzelnes Dollar $$ Zeichen.".
AutoItSetOption ( "GUICloseOnESC" [, param] ) Mit Druecken der ESC-Taste in einer GUI, wird die $GUI_EVENT_CLOSE Nachricht gesendet. Diese Option schaltet das Verhalten an und aus.0 = Sendet nicht die $GUI_EVENT_CLOSE Nachricht wenn ESC gedrueckt wird.1 = Sendet die $GUI_EVENT_CLOSE Nachricht wenn ESC gedrueckt wird (Standard).
AutoItSetOption ( "GUICoordMode" [, param] ) Bestimmt, wie die Position eines Controls durch GUICtrlSetPos definiert wird.0 = relative Position zum Anfang des letzten Controls (obere linke Ecke).1 = absolute Koordinaten (Standard)  relativ zur Dialog Box.2 = Positionierung relativ zur unteren rechten Ecke des letzten Controls.Ausnahme: mit "-1" uebernimmt man den top/left-Wert des letzten Controls.Um ein Control genau 1px hoeher/links als das letzte zu positionieren (-1 ist ja reserviert fuer "gleicher Abstand von oben/links"), muss man es mit negativen Werten um ("Hoehe/Breite des letzten Controls" + 1) nach oben/links verschieben/positionieren.
AutoItSetOption ( "GUIDataSeparatorChar" [, param] ) Legt das Trennzeichen fuer Teildaten fest, die mit GUICtrlSetData gesetzt werden.Das Standardzeichen ist '|'.
AutoItSetOption ( "GUIOnEventMode" [, param] ) Aktiviert/Deaktiviert die OnEvent Funktionsanmeldung.0 = (Standard) deaktiviert.1 = aktiviert.
AutoItSetOption ( "GUIResizeMode" [, param] ) Aendert das Standardverhalten bei Groessenveraenderung fuer ein Control.0 = (Standard) behaelt das Standardverhalten bei.<1024 = jede Art der Groessenveraenderung, siehe <a href="GUICtrlSetResizing.htm">GUICtrlSetResizing</a>.
AutoItSetOption ( "GUIEventOptions" [, param] ) Aendert das Verhalten bei Sonderereignissen oder Rueckgabewerten der GUI Funktionen.0 = (Standard) Windows Verhalten bei Klick auf Minimize, Restore, Maximize, Resize.1 = unterdrueckt das Windows Verhalten bei Klick auf Minimize, Restore, Maximize, Resize oder Fenster Groessenveraenderung. Sendet nur die Mitteilung.
AutoItSetOption ( "MouseClickDelay" [, param] ) Bestimmt die Laenge der Anweisungspause zwischen Mausklicks.Zeit in Millisekunden fuer die Pause (Standard=10).
AutoItSetOption ( "MouseClickDownDelay" [, param] ) Bestimmt, wie lange die Maustaste gedrueckt sein muss, damit der Klick registriert wird.Zeit in Millisekunden fuer die Pause (Standard=10).
AutoItSetOption ( "MouseClickDragDelay" [, param] ) Bestimmt die Laenge der Anweisungspause zwischen Beginn und Ende einer Maus-Ziehen Operation.Zeit in Millisekunden fuer die Pause (Standard=250).
AutoItSetOption ( "MouseCoordMode" [, param] ) Legt fest, auf welche Art die Mausfunktionen Koordinaten nutzen, entweder absolut oder relativ zum momentan aktiven Fenster:0 = relative Koordinaten zum aktiven Fenster.1 = absolute Bildschirm Koordinaten (Standard).2 = relative Koordinaten zum Anwendungsbereich des aktiven Fensters.
AutoItSetOption ( "MustDeclareVars" [, param] ) Wenn diese Option genutzt wird muessen alle Variablen deklariert werden mit Dim, Local oder Global bevor sie verwendet werden koennen - beseitigt die Moeglichkeit von Bugs durch Schreibfehler in Variablen.0 = Variable muss nicht deklariert werden (Standard).1 = Variable muss deklariert werden. Siehe <a href="../Keywords/Dim.htm">Dim / Global / Local / Const</a> fuer weitere Details.
AutoItSetOption ( "PixelCoordMode" [, param] ) Legt fest, auf welche Art die Pixelfunktionen Koordinaten nutzen, entweder absolut oder relativ zum Fenster welches durch hwnd definiert wurde (Standard = aktives Fenster):0 = relative Koordinaten zum definierten Fenster.1 = absolute Bildschirm Koordinaten (Standard).2 = relative Koordinaten zum Anwendungsbereich des definierten Fensters.
AutoItSetOption ( "SendAttachMode" [, param] ) Legt fest, wie AutoIt eingehende Signale verknuepft wenn die Send() Funktion verwendet wird. Bei Nichtverknuepfung (Standard Mode=0) kann die Ermittlung des Status von Capslock/Scrolllock und Numlock unzuverlaessig sein unter NT4. Jedoch wird der attach Mode=1 gesetzt und der Send("{... down/up}") Syntax wird nicht funktionieren und es kann Probleme geben mit dem Senden von Tasten an "haengende" Fenster. <a href="ControlSend">ControlSend() ist IMMER verknuepft und wird nicht beeintraechtigt durch diesen Modus.0 = nicht verknuepfen (Standard).1 = verknuepfen.
AutoItSetOption ( "SendCapslockMode" [, param] ) Legt fest ob AutoIt den Status von Capslock speichern soll bevor eine Send Funktion ausgefuehrt wird und danach wiederherstellt.0 = nicht speichern/wiederherstellen.1 = speichern/wiederherstellen (Standard).
AutoItSetOption ( "SendKeyDelay" [, param] ) Bestimmt die Laenge der Anweisungspause zwischen dem Senden von Tastaturanschlaegen. Ein Wert von 0 entfernt die Verzoegerung komplett.Zeit in Millisekunden fuer die Pause (Standard=5).
AutoItSetOption ( "SendKeyDownDelay" [, param] ) Bestimmt die Zeitdauer, die eine Taste gedrueckt sein muss, bis ein Tastaturanschlag registriert wird. Fuer Anwendungen die einige Zeit benoetigen bis Tastaturanschlaege erkannt werden kann es notwendig sein den Standardwert zu erhoehen. Ein Wert von 0 entfernt die Verzoegerung komplett.Zeit in Millisekunden zur Pause (Standard=5).
AutoItSetOption ( "TCPTimeout" [, param] ) Bestimmt die Zeit bevor TCP Funktionen wegen fehlender Kommunikation beendet werden.Zeit in Millisekunden bevor ein Timeout eintritt (Standard=100).
AutoItSetOption ( "TrayAutoPause" [, param] ) Das Skript pausiert bei einem Klick auf das Tray Icon.0 = keine Pause.1 = Pause (Standard). Wenn kein Standardmenue vorhanden ist, tritt keine Pause auf.
AutoItSetOption ( "TrayIconDebug" [, param] ) Wenn es aktiviert ist, wird die aktuelle Skriptzeile im Trayicon Tipp angezeigt um das Debugging zu unterstuetzen.0 = keine Debug Information (Standard).1 = zeige Debug.
AutoItSetOption ( "TrayIconHide" [, param] ) Versteckt das AutoIt Tray Icon. Anmerkung:  Das Icon wird jedoch, auch bei Option = 1, fuer ~750 Millisekunden angezeigt.0 = zeige Icon (Standard).1 = verstecke Icon.
AutoItSetOption ( "TrayMenuMode" [, param] ) Erweitert das Verhalten des TrayMenues eines Skripts. Dies kann durch Kombination (Addition) folgender Werte geschehen.0 = Standard Menueeintraege (Skript Pausieren/Exit) werden angehaengt an das benutzererzeugte Menue; bei einem Klick wird die Markierung automatisch gesetzt bzw. entfernt; bei einem Doppelklick auf das Trayicon wird die Control-ID zurueckgegeben welche $TRAY_DEFAULT besitzt.1 = kein Standard Menue.2 = Die Markierung wird beim Anklicken nicht automatisch entfernt.4 = gibt nicht das $TRAY_DEFAULT Item zurueck wenn ein Doppelklick auf das Trayicon erfolgt.8 = schaltet die automatische Ueberpruefung von Radioelementgruppen ab.
AutoItSetOption ( "TrayOnEventMode" [, param] ) Aktiviert/deaktiviert die OnEvent Funktionsanmeldung fuer das Tray.0 = (Standard) deaktiviert.1 = aktiviert.
AutoItSetOption ( "WinDetectHiddenText" [, param] ) Legt fest ob versteckter Fenstertext fuer die Funktionen zur Fensterueberpruefung "sichtbar" ist.0 = Versteckter Text wird nicht erkannt (Standard).1 = Erkennt versteckten Text.
AutoItSetOption ( "WinSearchChildren" [, param] ) Erlaubt den Fenster Suchroutinen Child Fenster genauso zu durchsuchen, wie top-level Fenster.0 = Suche nur in top-level Fenstern (Standard).1 = Suche in top-level und Child Fenstern.
AutoItSetOption ( "WinTextMatchMode" [, param] ) Bestimmt die Methode der Textueberpruefung fuer Fenster waehrend Suchoperationen.1 = Komplett / Langsamer Modus (Standard).2 = Schneller Modus.Im Schnellmodus kann AutoIt ueblicherweise nur Dialog Text, Button Text und die Bezeichnung einiger Controls "sehen". Im Standardmodus ist viel mehr Text sichtbar (beispielsweise der Inhalt eines Notepad-Fensters).Sollten Performanceprobleme bei der Suche nach vielen Fenstern auftreten kann der "quick"-Modus hilfreich sein.
AutoItSetOption ( "WinTitleMatchMode" [, param] ) Bestimmt welche Methode zur Fenstertitelerkennung in Suchaktionen verwendet wird.1 = Erkennt den Titel vom Anfang (Standard).2 = Erkennt Teile des Titels.3 = Erkennt nur den exakten Titel.4 = Erweiterter Modus (wurde nur fuer die Rueckwaertskompatibilitaet beibehalten, siehe <a href="../intro/windowsadvanced.htm">Erweiterte Fenstertiteldefinition</a>)-1 bis -4 = erzwingt Kleinbuchstabenerkennung in Uebereinstimmung mit anderen Erkennungstypen.
AutoItSetOption ( "WinWaitDelay" [, param] ) Bestimmt die Laenge der Anweisungspause fuer ein Skript nach einer erfolgreichen Fenster-bezogenen Operation.Zeit in Millisekunden fuer die Pause (Standard=250).
AutoItWinGetTitle (  ) Gibt den Titel des AutoIt-Fensters zurueck.
AutoItWinSetTitle ( "newtitle" ) Aendert den Titel des AutoIt-Fensters.
Beep ( [Frequency = 500 [, Duration = 1000]] ) Spielt einen Beep-Ton ueber den Systemlautsprecher ab.
Binary ( expression ) Gibt die binaere Darstellung eines Ausdruckes zurueck.
BinaryLen ( binary ) Gibt die Anzahl von Bytes einer Binaervariablen zurueck.
BinaryMid ( binary, start [, count] ) Extrahiert eine Anzahl von Bytes aus einer Binaervariablen.
BinaryToString ( expression [, flag = 1] ) Wandelt eine binaere Variante in einen String.
BitAND ( value1, value2 [, value n] ) Fuehrt eine Bitweise AND Operation durch.
BitNOT ( value ) Fuehrt eine Bitweise NOT Operation durch.
BitOR ( value1, value2 [, value n] ) Fuehrt eine Bitweise OR Operation durch.
BitRotate ( value [, shift = 1 [, size = "W"]] ) Fuehrt eine Bit-Shift Operation mit Wechsel durch.
BitShift ( value, shift ) Fuehrt eine Bit Shift Operation durch.
BitXOR ( value1, value2 [, value n] ) Fuehrt eine Bitweise exklusive OR (XOR) Operation durch.
BlockInput ( flag ) Sperrt/Entsperrt Maus und Tastatur.
Break ( mode ) Ermoeglicht oder blockiert das Abbrechen eines Skripts durch den Benutzer ueber das Tray-Icon-Menue.
Call ( "function" [, param_1 [, param_2 [, param_N]]] ) Ruft eine benutzerdefinierte oder integrierte Funktion auf, deren Name in einem String uebergeben wird.
CDTray ( "drive", "status" ) Oeffnet oder schliesst die gewuenschte Laufwerkschublade.
Ceiling ( expression ) Gibt die naechste Ganzzahl groesser oder gleich dem angegebenen Wert zurueck.
Chr ( ASCIIcode ) Gibt ein Zeichen entsprechend eines ASCII-Codes wieder.
ChrW ( UNICODEcode ) Gibt ein Zeichen entsprechend eines Unicode-Codes wieder.
ClipGet (  ) Holt Text aus der Zwischenablage.
ClipPut ( "value" ) Schreibt einen Text in die Zwischenablage.
ConsoleRead ( [peek = False [, binary = False]] ) Liest vom STDIN-Strom des AutoIt-Skriptprozesses.
ConsoleWrite ( "data" ) Schreibt Daten in den STDOUT-Stream. Viele Texteditoren koennen diesen Stream lesen und viele andere Programme koennen diesen String verarbeiten.
ConsoleWriteError ( "data" ) Schreibt Daten in den STDERR-Stream. Einige Texteditoren koennen diesen Stream lesen. Es gibt auch Programme, die diesen Stream lesen koennen, oder sogar Daten hierueber erwarten.
ControlClick ( "title", "text", controlID [, button = "left" [, clicks = 1 [, x [, y]]]] ) Sendet einen Mausklick-Befehl an das angegebene Control.
ControlCommand ( "title", "text", controlID, "IsVisible", "" ) Gibt 1 zurueck, wenn das Control sichtbar (visible) ist, ansonsten 0.
ControlCommand ( "title", "text", controlID, "IsEnabled", "" ) Gibt 1 zurueck, wenn das Control freigegeben (enabled) ist, ansonsten 0.
ControlCommand ( "title", "text", controlID, "ShowDropDown", "" ) Zeigt die Einzelitems einer ComboBox.
ControlCommand ( "title", "text", controlID, "HideDropDown", "" ) Versteckt die Einzelitems einer ComboBox.
ControlCommand ( "title", "text", controlID, "AddString", 'string' ) Fuegt einen String an das Ende einer ListBox oder einer ComboBox hinzu.
ControlCommand ( "title", "text", controlID, "DelString", occurrence ) Entfernt einen String entsprechend des Auftretens (occurrence) in einer ListBox oder einer ComboBox.
ControlCommand ( "title", "text", controlID, "FindString", 'string' ) Gibt die Referenz des Auftretens in einer ListBox oder einer ComboBox gefundenen Strings zurueck.
ControlCommand ( "title", "text", controlID, "SetCurrentSelection", <em>occurrence</em> ) Waehlt in einer ListBox oder einer ComboBox ein Element, entsprechend der occurence-Referenz aus.
ControlCommand ( "title", "text", controlID, "SelectString", 'string' ) Waehlt in einer ListBox oder einer ComboBox ein Element aus, das dem String 'string' entspricht.
ControlCommand ( "title", "text", controlID, "IsChecked", "" ) Gibt 1 zurueck, wenn die Befehlsflaeche ausgewaehlt ist, ansonsten 0.
ControlCommand ( "title", "text", controlID, "Check", "" ) Aktiviert einen Radiobutton oder eine Checkbox
ControlCommand ( "title", "text", controlID, "UnCheck", "" ) Deaktiviert einen Radiobutton oder eine Checkbox.
ControlCommand ( "title", "text", controlID, "GetCurrentLine", "" ) Gibt die Zeilennummer zurueck, in der der Cursor in einem Edit-Control steht.
ControlCommand ( "title", "text", controlID, "GetCurrentCol", "" ) Gibt die Spaltennummer zurueck, in der der Cursor in einem Edit-Control steht.
ControlCommand ( "title", "text", controlID, "GetCurrentSelection", "" ) Gibt den Namen des augenblicklich gewaehlten Elements in einer ListBox oder einer ComboBox zurueck.
ControlCommand ( "title", "text", controlID, "GetLineCount", "" ) Gibt die Anzahl der Zeilen eines Edit-Controls zurueck.
ControlCommand ( "title", "text", controlID, "GetLine", <em>Zeile</em># ) Gibt den Text der angegebenen Zeile eines Edit-Controls zurueck.
ControlCommand ( "title", "text", controlID, "GetSelected", "" ) Gibt den ausgewaehlten Text eines Edit-Controls zurueck.
ControlCommand ( "title", "text", controlID, "EditPaste", 'string' ) Fuegt den String 'string' an der Cursorposition in ein Edit-Control ein.
ControlCommand ( "title", "text", controlID, "CurrentTab", "" ) Rueckgabe des aktuellen Tabs eines SysTabControl32-Control
ControlCommand ( "title", "text", controlID, "TabRight", "" ) Geht zum naechsten rechten Tab eines SysTabControl32-Controls
ControlCommand ( "title", "text", controlID, "TabLeft", "" ) Geht zum naechsten linken Tab eines SysTabControl32-Controls
ControlCommand ( "title", "text", controlID, "SendCommandID", <em>Command ID</em> ) Simuliert die WM_COMMAND Nachricht. Ueblicherweise fuer ToolbarWindow32-Controls genutzt - um die Command-ID zu erhalten, waehlt man die Registerkarte "Toolbar" im Au3Info-Tool.
ControlDisable ( "title", "text", controlID ) Sperrt/deaktivert ein Control.
ControlEnable ( "title", "text", controlID ) Gibt ein gesperrtes (disabled) Control frei.
ControlFocus ( "title", "text", controlID ) Setzt den Eingabefokus auf ein bestimmtes Control in einem Fenster.
ControlGetFocus ( "title" [, "text"] ) Gibt den Klassennamen des Controls zurueck, das den (Eingabe-) Fokus in einem bestimmten Fenster hat.
ControlGetHandle ( "title", "text", controlID ) Erfragt den internen "handle" (Prozessidentifizierungscode) eines Controls.
ControlGetPos ( "title", "text", controlID ) Erfragt die Position und die Groesse eines Controls relativ zu seinem Fenster.
ControlGetText ( "title", "text", controlID ) Erfragt Text vom Control.
ControlHide ( "title", "text", controlID ) Versteckt ein Control.
ControlListView ( "title", "text", controlID, "DeSelect", From [, To] ) Abwaehlen eines oder mehrerer Items, von [,bis].
ControlListView ( "title", "text", controlID, "FindItem", "string to find" [, SubItem] ) Gibt den Element-Index des zu findenden Strings zurueck. Gibt -1 zurueck, falls der String nicht gefunden wurde.
ControlListView ( "title", "text", controlID, "GetItemCount" ) Gibt die Anzahl der Items in der Liste zurueck.
ControlListView ( "title", "text", controlID, "GetSelected" [, option] ) Gibt einen String zurueck, die die Indizes aller gewaehlten Items enthaelt. Ist die Option=0 (Standard), wird nur der Index des ersten gewaehlten Items zurueckgegeben. Ist die Option=1, werden die Indizes aller gewaehlten Items zurueckgegeben, getrennt durch |, z.B: "0|3|4|10". Ist kein Element der Liste ausgewaehlt, wird ein leerer String "" zurueckgegeben.
ControlListView ( "title", "text", controlID, "GetSelectedCount" ) Gibt die Anzahl der gewaehlten Items zurueck.
ControlListView ( "title", "text", controlID, "GetSubItemCount" ) Gibt die Anzahl der Child-Items zurueck.
ControlListView ( "title", "text", controlID, "GetText", Item, SubItem ) Gibt den Text eines items/Child-Items zurueck.
ControlListView ( "title", "text", controlID, "IsSelected", Item ) Gibt 1 zurueck, wenn das Element ausgewaehlt ist, ansonsten 0.
ControlListView ( "title", "text", controlID, "Select", From [, To] ) Auswaehlen eines oder mehrerer Items, von [,bis].
ControlListView ( "title", "text", controlID, "SelectAll" ) Auswaehlen aller Items.
ControlListView ( "title", "text", controlID, "SelectClear" ) Loescht die Auswahl aller Items.
ControlListView ( "title", "text", controlID, "SelectInvert" ) Invertiert die aktuelle Auswahl.
ControlListView ( "title", "text", controlID, "ViewChange", "view" ) Wechselt die aktuelle Ansicht. Gueltige "views"(=Ansichtsoptionen) sind "list", "details", "smallicons", "largeicons".
ControlMove ( "title", "text", controlID, x, y [, width [, height]] ) Verschiebt ein Control in einem Fenster.
ControlSend ( "title", "text", controlID, "string" [, flag = 0] ) Sendet eine Folge von Zeichen (Tastendruecken) an ein Control.
ControlSetText ( "title", "text", controlID, "new text" [, flag = 0] ) Schreibt einen neuen Text in ein Control.
ControlShow ( "title", "text", controlID ) Zeigt ein verstecktes Control an.
ControlTreeView ( "title", "text", controlID, "command" [, option1] ) Prueft ein Item (falls das Item dies unterstuetzt).
ControlTreeView ( "title", "text", controlID, "command" [, option1] ) klappt ein Item zu, um dessen Childs zu verstecken.
ControlTreeView ( "title", "text", controlID, "command" [, option1] ) Gibt 1 zurueck, falls ein Item existiert, andererseits 0.
ControlTreeView ( "title", "text", controlID, "command" [, option1] ) klappt ein Item auf, um dessen Childs zu sehen.
ControlTreeView ( "title", "text", controlID, "command" [, option1] ) Gibt die Anzahl von Childs des markierten Items zurueck.
ControlTreeView ( "title", "text", controlID, "command" [, option1] ) Gibt die Itemreferenz der aktuellen Markierung zurueck. Es wird die Textreferenz des Items verwendet (oder Indexreferenz, falls UseIndex auf 1 gesetzt ist).
ControlTreeView ( "title", "text", controlID, "command" [, option1] ) Gibt den Text eines Items zurueck.
ControlTreeView ( "title", "text", controlID, "command" [, option1] ) Gibt den Status eines Items zurueck. 1:markiert, 0:nicht markiert, -1:keine Checkbox.
ControlTreeView ( "title", "text", controlID, "command" [, option1] ) Waehlt ein Item aus.
ControlTreeView ( "title", "text", controlID, "command" [, option1] ) Hebt die Markierung eines Items auf (falls das Item dies unterstuetzt).
Cos ( expression ) Berechnet den Cosinus einer Zahl.
Dec ( "hex" [, flag = 0] ) Gibt eine numerische Entsprechung eines hexadezimalen Strings wieder.
DirCopy ( "source dir", "dest dir" [, flag = 0] ) Kopiert einen Ordner samt Unterordner und Dateien (funktioniert wie xcopy).
DirCreate ( "path" ) Erstellt ein Verzeichnis/Ordner.
DirGetSize ( "path" [, flag = 0] ) Gibt die Groesse eines Verzeichnisses in Bytes zurueck.
DirMove ( "source dir", "dest dir" [, flag = 0] ) Verschiebt ein Verzeichnis samt Unterordner und Dateien.
DirRemove ( "path" [, recurse = 0] ) Loescht ein Verzeichnis oder einen Ordner.
DllCall ( "dll", "return type", "function" [, type1, param1 [, type n, param n]] ) Ruft eine Funktion in einer DLL dynamisch auf.
DllCallAddress ( "return type", address [, type1, param1 [, type n, param n]] ) Ruft eine Funktion an einer bestimmten Speicheradresse dynamisch auf.
DllCallbackFree ( handle ) Gibt ein zuvor mit DllCallbackRegister erzeugtes Handle wieder frei.
DllCallbackGetPtr ( handle ) Gibt einen Zeiger auf eine Callback Funktion zurueck die an Win32 API uebergeben werden kann.
DllCallbackRegister ( "function", "return type", "params" ) Erzeugt eine benutzerdefinierte Callback- (Rueckruf-)funktion.
DllClose ( dllhandle ) Schliesst eine zuvor geoeffnete DLL.
DllOpen ( "filename" ) Laedt eine DLL fuer den Gebrauch in DllCall.
DllStructCreate ( Struct [, Pointer] ) Erzeugt eine Struktur im C/C++-Stil die mit DllCall genutzt werden kann.
DllStructGetData ( Struct, Element [, index = Default] ) Gibt die Daten eines Elements der Struktur zurueck.
DllStructGetPtr ( Struct [, Element] ) Gibt den Zeiger auf die Struktur oder ein Element in der Struktur zurueck.
DllStructGetSize ( Struct ) Gibt die Groesse der Struktur in Bytes zurueck.
DllStructSetData ( Struct, Element, value [, index] ) Setzt Daten in einem Element der Struktur.
DriveGetDrive ( "type" ) Gibt ein Array mit den gesuchten Laufwerken zurueck.
DriveGetFileSystem ( "path" ) Gibt den Typ des Dateisystems eines Laufwerks (bzw. Partition) zurueck.
DriveGetLabel ( "path" ) Gibt die Bezeichnung eines Laufwerkes zurueck, wenn es eine besitzt.
DriveGetSerial ( "path" ) Gibt die Seriennummer eines Laufwerkes zurueck.
DriveGetType ( "path" [, operation = 1] ) Gibt den Laufwerkstyp zurueck.
DriveMapAdd ( "device", "remote share" [, flags = 0 [, "user" [, "password"]]] ) Weist ein Netzlaufwerk zu.
DriveMapDel ( "drive" ) Trennt die Verbindung zu einem Netzlaufwerk..
DriveMapGet ( "device" ) Ruft Details eines gemappten Laufwerks ab.
DriveSetLabel ( "path", "label" ) Setzt die Bezeichnung eines Laufwerkes.
DriveSpaceFree ( "path" ) Gibt den freien Speicher auf einem Laufwerk in Megabyte zurueck.
DriveSpaceTotal ( "path" ) Gibt den gesamten Speicher auf einem Laufwerk in Megabyte zurueck.
DriveStatus ( "path" ) Gibt den Status eines Laufwerkes als String zurueck.
EnvGet ( "envvariable" ) Ermittelt den Wert einer Umgebungsvariablen.
EnvSet ( "envvariable" [, "value"] ) Setzt den Wert einer Umgebungsvariablen.
EnvUpdate (  ) Aktualisiert die Betriebssystem-Umgebung.
Eval ( string ) Gibt den Inhalt einer Variable, welche durch einen String benannt wird, zurueck.
Execute ( string ) Fuehrt einen Ausdruck aus.
Exp ( expression ) Berechnet die Potenz zur Basis e.
FileChangeDir ( "path" ) Wechselt das gegenwaertige Arbeitsverzeichnis.
FileClose ( "filehandle" ) Schliesst eine zuvor geoeffnete Datei.
FileCopy ( "source", "dest" [, flag = 0] ) Kopiert eine oder mehrere Dateien.
FileCreateNTFSLink ( "source", "hardlink" [, flag = 0] ) Erstellt ein NTFS-Hardlink zu einer Datei oder einem Ordner.
FileCreateShortcut ( "file", "lnk" [, "workdir" [, "args" [, "desc" [, "icon" [, "hotkey" [, icon number [, state]]]]]]] ) Erstellt eine Verknuepfung (*.lnk).
FileDelete ( "filename" ) Loescht eine oder mehrere Dateien.
FileExists ( "path" ) Prueft, ob eine Datei oder ein Verzeichnis besteht.
FileFindFirstFile ( "filename" ) Erzeugt ein Suchhandle, welches durch einen Pfad und eine Dateimaske definiert ist.
FileFindNextFile ( search [, flag = 0]) Gibt den naechsten Dateinamen aus, welcher durch das Suchhandle definiert wurde.
FileFlush ( "filehandle" ) Leert den Puffer einer Datei im Speicher.
FileGetAttrib ( "filename" ) Gibt einen String zurueck, der die Attribute einer Datei repraesentiert.
FileGetEncoding ( "filehandle/filename" [, mode = 1] ) Ermittelt die Text-Kodierung einer Datei.
FileGetLongName ( "filename" [, flag = 0] ) Gibt den angegebenen Dateinamen und -pfad im Langformat zurueck.
FileGetPos ( "filehandle" ) Ermittelt die aktuelle Datei-Position.
FileGetShortcut ( "lnk" ) Ermittelt die Details zu einer Verknuepfung.
FileGetShortName ( "filename" [, flag = 0] ) Gibt den angegebenen Dateinamen und -pfad im Format 8.3 zurueck.
FileGetSize ( "filename" ) Gibt die Groesse einer Datei in Bytes zurueck.
FileGetTime ( "filename" [, option = 0 [, format = 0]] ) Gibt die Zeit- und Datumsinformationen einer Datei zurueck.
FileGetVersion ( "filename" [, "stringname"] ) Gibt die Versionsinformationen einer Datei zurueck.
FileInstall ( "source", "dest" [, flag = 0] ) Bindet eine Datei in das kompilierte Skript ein und kopiert sie in das angegebene Verzeichnis.
FileMove ( "source", "dest" [, flag = 0] ) Verschiebt eine oder mehrere Dateien.
FileOpen ( "filename" [, mode = 0] ) Oeffnet eine Datei zum Lesen oder Schreiben.
FileOpenDialog ( "title", "init dir", "filter" [, options = 0 [, "default name" [, hwnd]]] ) Zeigt den "Datei oeffnen"-Dialog an.
FileRead ( "filehandle/filename" [, count] ) Liest eine bestimmte Anzahl von Zeichen aus einer zuvor geoeffneten Datei.
FileReadLine ( "filehandle/filename" [, line = 1] ) Liest eine Textzeile aus einer zuvor geoeffneten Textdatei.
FileReadToArray ( "filehandle/filename" ) Liest die festgelegte Datei in ein Array.
FileRecycle ( "source" ) Verschiebt eine Datei oder einen Ordner in den Papierkorb.
FileRecycleEmpty ( ["source"] ) Leert den Papierkorb.
FileSaveDialog ( "title", "init dir", "filter" [, options = 0 [, "default name" [, hwnd]]] ) Zeigt den "Datei speichern"-Dialog an.
FileSelectFolder ( "dialog text", "root dir" [, flag = 0 [, "initial dir" [, hwnd]]] ) Bietet eine graphische Ordnerauswahl an.
FileSetAttrib ( "file pattern", "+-RASHNOT" [, recurse = 0] ) Setzt die Attribute einer oder mehrerer Dateien/Verzeichnisse.
FileSetEnd ( "filehandle" ) Setzt das Ende der Datei auf die aktuelle Position.
FileSetPos ( "filehandle", offset, origin ) Setzt die aktuelle Datei-Position.
FileSetTime ( "file pattern", "time" [, type = 0 [, recurse = 0]] ) Setzt die Zeit- und Datumsinformationen einer oder mehrerer Dateien (oder Verzeichnisse).
FileWrite ( "filehandle/filename", "text/data" ) Schreibt Text/Daten an das Ende einer zuvor geoeffneten Textdatei.
FileWriteLine ( "filehandle/filename", "line" ) Fuegt eine Zeile Text an das Ende einer zuvor geoeffneten Textdatei.
Floor ( expression ) Rundet auf die naechste Ganzzahl, die kleiner oder gleich dem angegebenen Wert ist.
FtpSetProxy ( mode = 0 [, "proxy:port" [, "username" [, "password"]]] ) Setzt den Internet-Proxyserver fuer den FTP-Zugang.
FuncName ( $Functionvariable ) Gibt den Namen einer Funktion zurueck der in einer Variable gespeichert ist.
GUICreate ( "title" [, width [, height [, left = -1 [, top = -1 [, style = -1 [, exStyle = -1 [, parent = 0]]]]]]] ) Erstellt ein GUI-Fenster.
GUICtrlCreateAvi ( filename, subfileid, left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt ein AVI Video-Control fuer die GUI.
GUICtrlCreateButton ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt einen Button fuer die GUI.
GUICtrlCreateCheckbox ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt eine Checkbox fuer die GUI.
GUICtrlCreateCombo ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt eine Liste mit ausklappbarer Auswahl (ComboBox) fuer die GUI.
GUICtrlCreateContextMenu ( [controlID] ) Erstellt ein Kontextmenue fuer ein Control oder das ganze GUI-Fenster.
GUICtrlCreateDate ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt ein Datumsauswahl-Item fuer die GUI.
GUICtrlCreateDummy (  ) Erstellt ein Dummy-Control fuer die GUI.
GUICtrlCreateEdit ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt ein (mehrzeiliges) Edit-Control fuer die GUI.
GUICtrlCreateGraphic ( left, top [, width [, height [, style]]] ) Erstellt ein graphisches Control fuer die GUI.
GUICtrlCreateGroup ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt ein Gruppen-Control fuer die GUI.
GUICtrlCreateIcon ( filename, iconName, left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erzeugt ein Icon-Control fuer die GUI.
GUICtrlCreateInput ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt ein Eingabe-Control fuer die GUI.
GUICtrlCreateLabel ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt ein Label fuer die GUI.
GUICtrlCreateList ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt ein List-Control fuer die GUI.
GUICtrlCreateListView ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt eine Liste (mit ein oder mehreren Spalten) fuer die GUI (ListView-Control).
GUICtrlCreateListViewItem ( "text", listviewID ) Erstellt einen Eintrag in einer mehrspaltigen Liste (ListView).
GUICtrlCreateMenu ( "submenutext" [, menuID = -1 [, menuentry = -1]] ) Erstellt eine Menueleiste fuer die GUI.
GUICtrlCreateMenuItem ( "text", menuID [, menuentry = -1 [, menuradioitem = 0]] ) Erstellt einen Menueeintrag fuer die GUI.
GUICtrlCreateMonthCal ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erzeugt die Anzeige eines Monatskalenders fuer die GUI.
GUICtrlCreateObj ( ObjectVar, left, top [, width [, height]] ) Erzeugt ein ActiveX Control in der GUI.
GUICtrlCreatePic ( filename, left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erzeugt ein Bild-Control fuer die GUI.
GUICtrlCreateProgress ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt eine Progressbar fuer die GUI.
GUICtrlCreateRadio ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt ein Radiobutton fuer die GUI.
GUICtrlCreateSlider ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt ein Slider-Control fuer die GUI.
GUICtrlCreateTab ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erzeugt eine Karteireiterauswahl(Tab) fuer die GUI.
GUICtrlCreateTabItem ( "text" ) Erstellt einen TabItem Control innerhalb eines existierenden Tab Control einer GUI.
GUICtrlCreateTreeView ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] ) Erstellt ein Treeview-Control fuer die GUI.
GUICtrlCreateTreeViewItem ( "text", treeviewID ) Erstellt einen Eintrag in einem Treeview.
GUICtrlCreateUpdown ( inputcontrolID [, style = -1] ) Erstellt ein Pfeiltasten-Control fuer die GUI.
GUICtrlDelete ( controlID ) Loescht ein Control.
GUICtrlGetHandle ( controlID ) Gibt den Handle fuer ein Control und einige (Item-)Sonder-Handles (Menu, ContextMenu, TreeViewItem) zurueck.
GUICtrlGetState ( controlID ) Liefert den aktuellen Status eines Controls.
GUICtrlRead ( controlID [, advanced = 0] ) Liest den Status oder die Daten eines Controls.
GUICtrlRecvMsg ( controlID , msg [, wParam [, lParamType]] ) Schickt eine Nachricht an ein Control und bringt Informationen in lParam zurueck.
GUICtrlRegisterListViewSort ( controlID, "function" ) Registriert eine benutzerdefinierte Funktion fuer eine interne ListView Sortierungs-Rueckruffunktion.
GUICtrlSendMsg ( controlID, msg , wParam, lParam ) Schickt eine Nachricht an ein Control.
GUICtrlSendToDummy ( controlID [, state] ) Sendet eine Nachricht an ein Dummy-Control.
GUICtrlSetBkColor ( controlID, backgroundcolor ) Setzt die Hintergrundfarbe eines Controls.
GUICtrlSetColor ( controlID, textcolor ) Setzt die Textfarbe eines Controls.
GUICtrlSetCursor ( controlID, cursorID ) Setzt das Mauszeiger-Icon fuer ein bestimmtes Control.
GUICtrlSetData ( controlID, data [, default] ) Veraendert die Daten eines Controls.
GUICtrlSetDefBkColor ( defbkcolor [, winhandle] ) Setzt die Standardhintergrundfarbe fuer alle Controls in einem GUI Fenster.
GUICtrlSetDefColor ( deftextcolor [, winhandle] ) Setzt die Standardtextfarbe fuer alle Controls in einem GUI Fenster.
GUICtrlSetFont ( controlID, size [, weight [, attribute [, fontname [, quality]]]] ) Setzt die Schriftart und Schriftgroesse fuer ein Control.
GUICtrlSetGraphic ( controlID, type [, par1 [, ... par6]] ) Aendert die Daten fuer ein Steuerungsitem.
GUICtrlSetImage ( controlID, filename [, iconname [, icontype]] ) Bestimmt das Bitmap- oder Iconbild, das fuer ein Control verwendet wird.
GUICtrlSetLimit ( controlID, max [, min = 0] ) Beschraenkt die Zahl der Zeichen/Pixel fuer ein Control.
GUICtrlSetOnEvent ( controlID, "function" ) Definiert eine nutzerdefinierte Funktion, die aufgerufen wird, wenn ein Control angeklickt wird.
GUICtrlSetPos ( controlID, left [, top [, width [, height]]] ) Veraendert die Position eines Controls innerhalb des GUI-Fensters.
GUICtrlSetResizing ( controlID, resizing ) Definiert die Methode zur Groessenaenderung, die von einem Control verwendet wird.
GUICtrlSetState ( controlID, state ) Veraendert den Status eines Controls.
GUICtrlSetStyle ( controlID, style [, exStyle] ) Veraendert den Stil eines Controls.
GUICtrlSetTip ( controlID, tiptext [, "title" [, icon [, options]]] ) Legt den "Tip-Text" eines Controls fest.
GUIDelete ( [winhandle] ) Loescht ein GUI Fenster und alle enthaltenen Controls.
GUIGetCursorInfo ( [winhandle] ) Erfragt die Position des Mauszeigers relativ zum GUI-Fenster.
GUIGetMsg ( [advanced = 0] ) Fragt die GUI nach aufgetretenen Ereignissen (events) ab.
GUIGetStyle ( [winhandle] ) Erfragt den Stil GUI-Fensters.
GUIRegisterMsg ( msgID, "function" ) Registriert eine benutzerdefinierte Funktion fuer eine Windows-Message-ID (WM_MSG).
GUISetAccelerators ( accelerators [, winhandle] ) Setzt eine Tabelle mit Zugriffstasten in einem GUI Fenster.
GUISetBkColor ( background [, winhandle] ) Setzt die Hintergrundfarbe des GUI-Fensters.
GUISetCoord ( left, top [, width [, height [, winhandle]]] ) Legt die absoluten Koordinaten fuer das naechste Control fest.
GUISetCursor ( [cursorID [, override = 0 [, winhandle]]] ) Legt das Mauszeiger-Icon fuer ein GUI-Fenster fest.
GUISetFont ( size [, weight [, attribute [, fontname [, winhandle [, quality]]]]] ) Legt die Standardschriftart eines GUI-Fensters fest.
GUISetHelp ( helpfile [, winhandle] ) Bestimmt eine ausfuehrbare Datei, die gestartet wird sobald die F1-Taste gedrueckt wird.
GUISetIcon ( iconfile [, iconID [, winhandle]] ) Setzt das Icon, das in einem GUI-Fenster angezeigt wird.
GUISetOnEvent ( specialID, "function" [, winhandle] ) Definiert eine vom Benutzer geschriebene Funktion, die aufgerufen wird, wenn ein Control angeklickt wird.
GUISetState ( [flag [, winhandle]] ) Veraendert den Status eines GUI-Fensters.
GUISetStyle ( Style [, ExStyle [, winhandle]] ) Aendert den Stil eines GUI-Fensters.
GUIStartGroup ( [winhandle] ) Legt fest, dass alle Controls, die anschliessend erzeugt werden, zu einer Gruppe zusammengefasst werden.
GUISwitch ( winhandle [, tabitemID] ) Aendert die Wahl des aktuellen Fensters, auf welches GUI-Funktionen angewendet werden koennen.
Hex ( expression [, length] ) Gibt einen hexadezimal konvertierten String eines Integers oder eines Binaers zurueck.
HotKeySet ( "key" [, "function"] ) Setzt einen HotKey, um eine selbsterstellte Funktion aufzurufen.
HttpSetProxy ( mode = 0 [, "proxy:port" [, "username" [, "password"]]] ) Setzt den Internet Proxy fuer den Gebrauch des http-Zugriffs.
HttpSetUserAgent ( "user agent" ) Setzt den Http User-Agent String, der bei allen Internetanfragen mitgesendet wird.
HWnd ( expression ) Wandelt einen Ausdruck in ein HWND Handle.
InetClose ( handle ) Schliesst ein Handle, welches von InetGet() zurueckgegeben wird.
InetGet ( "URL", "filename" [, options = 0 [, background = 0]] ) Laedt eine Datei aus dem Internet unter Verwendung des HTTP-, HTTPS- oder FTP-Protokolls.
InetGetInfo ( [handle [, index = -1]] ) Gibt detaillierte Informationen ueber ein InetGet-Handle zurueck.
InetGetSize ( "URL" [, options = 0] ) Gibt die Groesse einer im Internet gespeicherten Datei (in Bytes) zurueck.
InetRead ( "URL" [, options = 0] ) Laedt eine Datei aus dem Internet herunter mit dem HTTP, HTTPS oder FTP Protokoll.
IniDelete ( "filename", "section" [, "key"] ) Loescht einen Wert aus einer standardkonformen .ini-Datei.
IniRead ( "filename", "section", "key", "default" ) Liest einen Wert aus einer standardkonformen .ini-Datei.
IniReadSection ( "filename", "section" ) Liest alle Schluessel-/Wert-Paare aus einer Sektion einer standardkonformen .ini-Datei.
IniReadSectionNames ( "filename" ) Liest alle Sektionen aus einer standardkonformen .ini-Datei.
IniRenameSection ( "filename", "section", "new section" [, flag = 0] ) Benennt eine Sektion in einer standardkonformen .ini-Datei um.
IniWrite ( "filename", "section", "key", "value" ) Schreibt einen Wert in eine standardkonforme .ini-Datei.
IniWriteSection ( "filename", "section", "data" [, index = 1] ) Schreibt eine Sektion in eine standardkonforme .ini-Datei.
InputBox ( "title", "prompt" [, "default" [, "password char" [, width = -1 [, height = -1 [, left = Default [, top = Default [, timeout = 0 [, hwnd]]]]]]]] ) Zeigt eine Eingabe-Box und fordert den Benutzer auf, ein String einzugeben.
Int ( expression [, flag = 0] ) Gibt einen Integer (ganze Zahl) eines Ausdrucks zurueck.
IsAdmin (  ) Ueberprueft, ob der derzeitige Benutzer volle Administratorrechte besitzt.
IsArray ( variable ) Ueberprueft, ob eine Variable ein Array ist.
IsBinary ( expression ) Ueberprueft, ob eine Variable oder ein Ausdruck binaer vorliegt.
IsBool ( variable ) Ueberprueft, ob der Variablentyp boolean ist.
IsDeclared ( expression ) Ueberprueft, ob eine Variable deklariert wurde.
IsDllStruct ( variable ) Prueft, ob eine Variable vom Typ DllStruct ist.
IsFloat ( variable ) Ueberprueft, ob der Wert einer Variablen oder eines Ausdrucks eine Bruchkomponente hat.
IsFunc ( expression ) Prueft, ob eine Variable oder ein Ausdruck ein Funktionstyp ist.
IsHWnd ( variable ) Ueberprueft, ob die Variable vom Typ Zeiger und Fenster-Handle ist.
IsInt ( variable ) Ueberprueft, ob der Wert einer Variablen oder eines Ausdrucks keine Bruchkomponente hat.
IsKeyword ( variable ) Kontrolliert, ob die Variable ein keyword ist (z. B. Default).
IsNumber ( variable ) Ueberprueft, ob der Variablentyp numerisch ist.
IsObj ( variable ) Ueberprueft, ob eine Variable oder ein Ausdruck vom Typ Objekt ist.
IsPtr ( variable ) Testet, ob eine Variable ein Zeigertyp ist.
IsString ( variable ) Ueberprueft, ob eine Variable oder ein Ausdruck vom Datentyp "String" ist.
Log ( expression ) Errechnet den natuerlichen Logarithmus einer Zahl.
MemGetStats (  ) Ermittelt Hauptspeicher-bezogene Informationen.
Mod ( value1, value2 ) Fuehrt eine Modulo-Rechnung durch.
MouseClick ( "button" [, x, y [, clicks = 1 [, speed = 10]]] ) Fuehrt einen Mausklick aus.
MouseClickDrag ( "button", x1, y1, x2, y2 [, speed = 10] ) Fuehrt eine Verschiebe-Aktion mit der Maus aus.
MouseDown ( "button" ) Fuehrt ein "MouseDown"-Ereignis an der aktuellen Mausposition aus.
MouseGetCursor (  ) Gibt die ID des aktuellen Mauscursors zurueck.
MouseGetPos ( [dimension] ) Ermittelt die aktuelle Position des Mauscursors.
MouseMove ( x, y [, speed = 10] ) Bewegt den Mauszeiger.
MouseUp ( "button" ) Fuehrt ein "MouseUp"-Ereignis an der aktuellen Mausposition aus.
MouseWheel ( "direction" [, clicks = 1] ) Bewegt das Mausrad rauf oder runter.
MsgBox ( flag, "title", "text" [, timeout = 0 [, hwnd]] ) Zeigt eine einfache MessageBox mit optionaler Zeitbegrenzung an.
Number ( expression [, flag = 0] ) Gibt die numerische Entsprechung eines Ausdruckes zurueck.
ObjCreate ( "classname" [, "servername" [, "username" [, "password"]]] ) Erzeugt eine Referenz auf ein COM-Object von dem angegebenen Klassennamen.
ObjCreateInterface ( "CLSID" , "IID" [, "interface_description",[flag = True]] ) Erzeugt eine Referenz zu einem Objekt aus dem angegebenen Klassennamen/Object-Pointer, Interface-Identifier und Bezeichnungsstring.
ObjEvent ( $ObjectVar, "functionprefix" [, "interface name"] ) Verarbeitet eingehende Ereignisse von dem angegebenen Objekt.
ObjEvent ( "AutoIt.Error" [, "function"] ) Verarbeitet eingehende Ereignisse von dem angegebenen Objekt.
ObjGet ( "filename" [, "classname" [, instance]] ) Ruft eine Referenz zu einem COM-Objekt ab, von einem vorhandenem Prozess oder Dateinamen.
ObjName ( $Objectvariable [, Flag = 1] ) Gibt den Namen oder die Schnittstelleninformation eines Objekts zurueck.
OnAutoItExitRegister ( "function" ) Registriert eine Funktion, die aufgerufen werden soll, wenn AutoIt verlassen wird.
OnAutoItExitUnRegister ( "function" ) Deregistriert eine Funktion, die aufgerufen wuerde, wenn AutoIt beendet wird.
Opt ( "CaretCoordMode" [, param] ) Legt fest, auf welche Weise Koordinaten verwendet werden, entweder absolut oder relativ zum momentan aktiven Fenster:0 = relative Koordinaten zum aktiven Fenster.1 = absolute Bildschirm Koordinaten (Standard).2 = relative Koordinaten zur Client Flaeche des aktiven Fensters.
Opt ( "ExpandEnvStrings" [, param] ) Aendert die Interpretation von Strings und %-Symbolen. Als Standard werden Strings buchstabengetreu behandelt, diese Option erlaubt die Benutzung von %environment% Variablen innerhalb von Strings, z.B.: "Das temp Verzeichnis ist: %temp%".0 = Umgebungsvariablen werden nicht erweitert (Standard).1 = erweitert Umgebungsvariablen.Ohne diese Option waere der uebliche Weg:"Das temp Verzeichnis ist:" & <a href="EnvGet.htm">EnvGet</a>("temp")
Opt ( "ExpandVarStrings" [, param] ) Aendert die Interpretation von String, Variablen- und Makrosymbolen ($ und @). Als Standard werden Strings buchstabengetreu behandelt, diese Option erlaubt die Benutzung von Variablen und Makros innerhalb von String, z.B.: "Der Wert von var1 ist $var1$".0 = erweitert Variablen nicht (Standard).1 = erweitert Variablen (sollen innerhalb dieses Modus die Zeichen $ oder @ benutzt werden, so muessen sie doppelt angegeben werden:"Das ist ein einzelnes Dollar $$ Zeichen.".
Opt ( "GUICloseOnESC" [, param] ) Mit Druecken der ESC-Taste in einer GUI, wird die $GUI_EVENT_CLOSE Nachricht gesendet. Diese Option schaltet das Verhalten an und aus.0 = Sendet nicht die $GUI_EVENT_CLOSE Nachricht wenn ESC gedrueckt wird.1 = Sendet die $GUI_EVENT_CLOSE Nachricht wenn ESC gedrueckt wird (Standard).
Opt ( "GUICoordMode" [, param] ) Bestimmt, wie die Position eines Controls durch GUICtrlSetPos definiert wird.0 = relative Position zum Anfang des letzten Controls (obere linke Ecke).1 = absolute Koordinaten (Standard)  relativ zur Dialog Box.2 = Positionierung relativ zur unteren rechten Ecke des letzten Controls.Ausnahme: mit "-1" uebernimmt man den top/left-Wert des letzten Controls.Um ein Control genau 1px hoeher/links als das letzte zu positionieren (-1 ist ja reserviert fuer "gleicher Abstand von oben/links"), muss man es mit negativen Werten um ("Hoehe/Breite des letzten Controls" + 1) nach oben/links verschieben/positionieren.
Opt ( "GUIDataSeparatorChar" [, param] ) Legt das Trennzeichen fuer Teildaten fest, die mit GUICtrlSetData gesetzt werden.Das Standardzeichen ist '|'.
Opt ( "GUIOnEventMode" [, param] ) Aktiviert/Deaktiviert die OnEvent Funktionsanmeldung.0 = (Standard) deaktiviert.1 = aktiviert.
Opt ( "GUIResizeMode" [, param] ) Aendert das Standardverhalten bei Groessenveraenderung fuer ein Control.0 = (Standard) behaelt das Standardverhalten bei.<1024 = jede Art der Groessenveraenderung, siehe <a href="GUICtrlSetResizing.htm">GUICtrlSetResizing</a>.
Opt ( "GUIEventOptions" [, param] ) Aendert das Verhalten bei Sonderereignissen oder Rueckgabewerten der GUI Funktionen.0 = (Standard) Windows Verhalten bei Klick auf Minimize, Restore, Maximize, Resize.1 = unterdrueckt das Windows Verhalten bei Klick auf Minimize, Restore, Maximize, Resize oder Fenster Groessenveraenderung. Sendet nur die Mitteilung.
Opt ( "MouseClickDelay" [, param] ) Bestimmt die Laenge der Anweisungspause zwischen Mausklicks.Zeit in Millisekunden fuer die Pause (Standard=10).
Opt ( "MouseClickDownDelay" [, param] ) Bestimmt, wie lange die Maustaste gedrueckt sein muss, damit der Klick registriert wird.Zeit in Millisekunden fuer die Pause (Standard=10).
Opt ( "MouseClickDragDelay" [, param] ) Bestimmt die Laenge der Anweisungspause zwischen Beginn und Ende einer Maus-Ziehen Operation.Zeit in Millisekunden fuer die Pause (Standard=250).
Opt ( "MouseCoordMode" [, param] ) Legt fest, auf welche Art die Mausfunktionen Koordinaten nutzen, entweder absolut oder relativ zum momentan aktiven Fenster:0 = relative Koordinaten zum aktiven Fenster.1 = absolute Bildschirm Koordinaten (Standard).2 = relative Koordinaten zum Anwendungsbereich des aktiven Fensters.
Opt ( "MustDeclareVars" [, param] ) Wenn diese Option genutzt wird muessen alle Variablen deklariert werden mit Dim, Local oder Global bevor sie verwendet werden koennen - beseitigt die Moeglichkeit von Bugs durch Schreibfehler in Variablen.0 = Variable muss nicht deklariert werden (Standard).1 = Variable muss deklariert werden. Siehe <a href="../Keywords/Dim.htm">Dim / Global / Local / Const</a> fuer weitere Details.
Opt ( "PixelCoordMode" [, param] ) Legt fest, auf welche Art die Pixelfunktionen Koordinaten nutzen, entweder absolut oder relativ zum Fenster welches durch hwnd definiert wurde (Standard = aktives Fenster):0 = relative Koordinaten zum definierten Fenster.1 = absolute Bildschirm Koordinaten (Standard).2 = relative Koordinaten zum Anwendungsbereich des definierten Fensters.
Opt ( "SendAttachMode" [, param] ) Legt fest, wie AutoIt eingehende Signale verknuepft wenn die Send() Funktion verwendet wird. Bei Nichtverknuepfung (Standard Mode=0) kann die Ermittlung des Status von Capslock/Scrolllock und Numlock unzuverlaessig sein unter NT4. Jedoch wird der attach Mode=1 gesetzt und der Send("{... down/up}") Syntax wird nicht funktionieren und es kann Probleme geben mit dem Senden von Tasten an "haengende" Fenster. <a href="ControlSend">ControlSend() ist IMMER verknuepft und wird nicht beeintraechtigt durch diesen Modus.0 = nicht verknuepfen (Standard).1 = verknuepfen.
Opt ( "SendCapslockMode" [, param] ) Legt fest ob AutoIt den Status von Capslock speichern soll bevor eine Send Funktion ausgefuehrt wird und danach wiederherstellt.0 = nicht speichern/wiederherstellen.1 = speichern/wiederherstellen (Standard).
Opt ( "SendKeyDelay" [, param] ) Bestimmt die Laenge der Anweisungspause zwischen dem Senden von Tastaturanschlaegen. Ein Wert von 0 entfernt die Verzoegerung komplett.Zeit in Millisekunden fuer die Pause (Standard=5).
Opt ( "SendKeyDownDelay" [, param] ) Bestimmt die Zeitdauer, die eine Taste gedrueckt sein muss, bis ein Tastaturanschlag registriert wird. Fuer Anwendungen die einige Zeit benoetigen bis Tastaturanschlaege erkannt werden kann es notwendig sein den Standardwert zu erhoehen. Ein Wert von 0 entfernt die Verzoegerung komplett.Zeit in Millisekunden zur Pause (Standard=5).
Opt ( "TCPTimeout" [, param] ) Bestimmt die Zeit bevor TCP Funktionen wegen fehlender Kommunikation beendet werden.Zeit in Millisekunden bevor ein Timeout eintritt (Standard=100).
Opt ( "TrayAutoPause" [, param] ) Das Skript pausiert bei einem Klick auf das Tray Icon.0 = keine Pause.1 = Pause (Standard). Wenn kein Standardmenue vorhanden ist, tritt keine Pause auf.
Opt ( "TrayIconDebug" [, param] ) Wenn es aktiviert ist, wird die aktuelle Skriptzeile im Trayicon Tipp angezeigt um das Debugging zu unterstuetzen.0 = keine Debug Information (Standard).1 = zeige Debug.
Opt ( "TrayIconHide" [, param] ) Versteckt das AutoIt Tray Icon. Anmerkung:  Das Icon wird jedoch, auch bei Option = 1, fuer ~750 Millisekunden angezeigt.0 = zeige Icon (Standard).1 = verstecke Icon.
Opt ( "TrayMenuMode" [, param] ) Erweitert das Verhalten des TrayMenues eines Skripts. Dies kann durch Kombination (Addition) folgender Werte geschehen.0 = Standard Menueeintraege (Skript Pausieren/Exit) werden angehaengt an das benutzererzeugte Menue; bei einem Klick wird die Markierung automatisch gesetzt bzw. entfernt; bei einem Doppelklick auf das Trayicon wird die Control-ID zurueckgegeben welche $TRAY_DEFAULT besitzt.1 = kein Standard Menue.2 = Die Markierung wird beim Anklicken nicht automatisch entfernt.4 = gibt nicht das $TRAY_DEFAULT Item zurueck wenn ein Doppelklick auf das Trayicon erfolgt.8 = schaltet die automatische Ueberpruefung von Radioelementgruppen ab.
Opt ( "TrayOnEventMode" [, param] ) Aktiviert/deaktiviert die OnEvent Funktionsanmeldung fuer das Tray.0 = (Standard) deaktiviert.1 = aktiviert.
Opt ( "WinDetectHiddenText" [, param] ) Legt fest ob versteckter Fenstertext fuer die Funktionen zur Fensterueberpruefung "sichtbar" ist.0 = Versteckter Text wird nicht erkannt (Standard).1 = Erkennt versteckten Text.
Opt ( "WinSearchChildren" [, param] ) Erlaubt den Fenster Suchroutinen Child Fenster genauso zu durchsuchen, wie top-level Fenster.0 = Suche nur in top-level Fenstern (Standard).1 = Suche in top-level und Child Fenstern.
Opt ( "WinTextMatchMode" [, param] ) Bestimmt die Methode der Textueberpruefung fuer Fenster waehrend Suchoperationen.1 = Komplett / Langsamer Modus (Standard).2 = Schneller Modus.Im Schnellmodus kann AutoIt ueblicherweise nur Dialog Text, Button Text und die Bezeichnung einiger Controls "sehen". Im Standardmodus ist viel mehr Text sichtbar (beispielsweise der Inhalt eines Notepad-Fensters).Sollten Performanceprobleme bei der Suche nach vielen Fenstern auftreten kann der "quick"-Modus hilfreich sein.
Opt ( "WinTitleMatchMode" [, param] ) Bestimmt welche Methode zur Fenstertitelerkennung in Suchaktionen verwendet wird.1 = Erkennt den Titel vom Anfang (Standard).2 = Erkennt Teile des Titels.3 = Erkennt nur den exakten Titel.4 = Erweiterter Modus (wurde nur fuer die Rueckwaertskompatibilitaet beibehalten, siehe <a href="../intro/windowsadvanced.htm">Erweiterte Fenstertiteldefinition</a>)-1 bis -4 = erzwingt Kleinbuchstabenerkennung in Uebereinstimmung mit anderen Erkennungstypen.
Opt ( "WinWaitDelay" [, param] ) Bestimmt die Laenge der Anweisungspause fuer ein Skript nach einer erfolgreichen Fenster-bezogenen Operation.Zeit in Millisekunden fuer die Pause (Standard=250).
Ping ( "address/hostname" [, timeout = 4000] ) Pingt einen anderen Computer an und gibt die Laufzeit zurueck.
PixelChecksum ( left, top, right, bottom [, step = 1 [, hwnd [, mode = 0]]] ) Erstellt eine Pruefsumme fuer einen Bereich von Pixeln.
PixelGetColor ( x , y [, hwnd] ) Gibt die Farbe des Pixels x,y zurueck.
PixelSearch ( left, top, right, bottom, color [, shade-variation = 0 [, step = 1 [, hwnd]]] ) Durchsucht ein Rechteck von Pixeln nach einer vorgegebenen Farbe.
ProcessClose ( "process" ) Beendet den genannten Prozess.
ProcessExists ( "process" ) Ueberprueft, ob ein bestimmter Prozess existiert.
ProcessGetStats ( ["process" [, type = 0]] ) Gibt ein Array mit Speicher- oder IO-Infos eines laufenden Prozesses zurueck.
ProcessList ( ["name"] ) Gibt ein Array zurueck, das die aktuell laufenden Prozesse auflistet (Namen und PIDs).
ProcessSetPriority ( "process", priority ) Aendert die Prioritaet eines Prozesses.
ProcessWait ( "process" [, timeout = 0] ) Pausiert das Skript, bis der genannte Prozess existiert.
ProcessWaitClose ( "process" [, timeout = 0] ) Pausiert das Skript, bis der genannte Prozess nicht mehr existiert.
ProgressOff (  ) Schaltet das Fortschrittsfenster ab.
ProgressOn ( "title", "maintext" [, "subtext" [, x pos [, y pos [, opt]]]] ) Zeigt ein konfigurierbares Progressbarfenster an.
ProgressSet ( percent [, "subtext" [, "maintext"]] ) Veraendert die Prozentanzeige und/oder den Text eines vorhandenen Progressbarfensters.
Ptr ( expression ) Wandelt einen Ausdruck in in eine Zeigervariante um.
Random ( [Min = 0 [, Max = 1 [, Flag = 0]]] ) Erzeugt eine pseudozufaellige Fliesskommazahl.
RegDelete ( "keyname" [, "valuename"] ) Loescht einen Schluessel oder einen Wert aus der Registry.
RegEnumKey ( "keyname", instance ) Liest den Namen eines Unterschluessels aus der Registry aus.
RegEnumVal ( "keyname", instance ) Liest den Namen eines Wertes aus der Registry.
RegRead ( "keyname", "valuename" ) Liest einen Wert aus der Registry.
RegWrite ( "keyname" [, "valuename", "type", value] ) Erzeugt einen Schluessel oder Wert in der Registrierung.
Round ( expression [, decimalplaces] ) Gibt eine Zahl gerundet auf eine angegebene Anzahl von Nachkommastellen zurueck.
Run ( "program" [, "workingdir" [, show_flag [, opt_flag]]] ) Startet ein externes Programm.
RunAs ( "username", "domain", "password", logon_flag, "program" [, "workingdir" [, show_flag [, opt_flag]]] ) Startet ein externes Programm im Kontext eines anderen Benutzers.
RunAsWait ( "username", "domain", "password", logon_flag, "program" [, "workingdir" [, show_flag [, opt_flag]]] ) Startet ein externes Programm im Kontext eines anderen Benutzers und pausiert das Skript, bis das Programm beendet wurde.
RunWait ( "program" [, "workingdir" [, show_flag [, opt_flag]]] ) Startet ein externes Programm und pausiert die Ausfuehrung des Autoit-Skripts, bis das externe Programm beendet ist.
Send ( "keys" [, flag = 0] ) Sendet einen oder mehrere simulierte Tastendruecke an das aktive Fenster.
SendKeepActive ( "title" [, "text"] ) Versucht ein festgelegtes Fenster waehrend dem Send() aktiv zu halten.
SetError ( code [, extended = 0 [, return value]] ) Manuelles Setzen des Wertes des @error-Makros (optional @extended und Rueckgabewert).
SetExtended ( code [, return value] ) Manuelles Setzen des Wertes des @extended Makros.
ShellExecute ( "filename" [, "parameters" [, "workingdir" [, "verb" [, showflag]]]] ) Fuehrt ein externes Programm unter Verwendung der ShellExecute-API aus.
ShellExecuteWait ( "filename" [, "parameters" [, "workingdir" [, "verb" [, showflag]]]] ) Fuehrt ein externes Programm unter Verwendung der ShellExecute API aus und pausiert die Skriptausfuehrung, bis das Programm beendet wird.
Shutdown ( code ) Faehrt das System herunter.
Sin ( expression ) Berechnet den Sinus einer Zahl.
Sleep ( delay ) Pausiert die Ausfuehrung des Skriptes.
SoundPlay ( "filename" [, wait = 0] ) Spielt eine Sound Datei.
SoundSetWaveVolume ( percent ) Regelt die Lautstaerke der System Sound Dateien (wave) in Prozent.
SplashImageOn ( "title", "file" [, width [, height [, x pos [, y pos [, opt]]]]] ) Erzeugt ein einstellbares Bild-Anzeigefenster.
SplashOff (  ) Schliesst ein "Splash"-Fenster (SplashText oder SplashImage).
SplashTextOn ( "title", "text" [, w = 500 [, h = 400 [, x pos [, y pos [, opt = 0 [, "fontname" [, fontsz = 12 [, fontwt]]]]]]]] ) Erzeugt ein einstellbares Text-Anzeigefenster (PopUp).
Sqrt ( expression ) Berechnet die Quadratwurzel einer Zahl.
SRandom ( Seed ) Setzt den Startwert (Seed) fuer den Zufallszahlengenerator.
StatusbarGetText ( "title" [, "text" [, part = 1]] ) Liest den Text der Statusbar, soweit es sich um ein Standard Control handelt.
StderrRead ( process_id [, peek = False [, binary = False]] ) Liest eine Anzahl von Zeichen aus einem STDERR-Stream eines zuvor gestarteten Child-Prozesses ein.
StdinWrite ( process_id [, data] ) Schreibt eine Anzahl von Zeichen in den STDIN-Stream eines zuvor gestarteten Child-Prozesses.
StdioClose ( process_id ) Gibt alle von einem Prozess, der zuvor mit STDIO-Umleitung gestartet wurde, belegten Ressourcen frei.
StdoutRead ( process_id [, peek = False [, binary = False]] ) Liest vom STDOUT-Stream eines zuvor gestarteten Child-Prozesses ein.
String ( expression ) Gibt einen beliebigen Ausdruck als String zurueck.
StringAddCR ( "string" ) Nimmt einen String und setzt allen Zeilenwechsel-Zeichen ( Chr(10) ) ein Eingabe-Zeichen ( Chr(13) ) voran.
StringCompare ( "string1", "string2" [, casesense = 0] ) Vergleicht zwei Strings mit Optionen.
StringFormat ( "format control" [, var1 [, ... var32]] ) Gibt einen formatierten String zurueck (aehnlich zu der C sprintf() Funktion).
StringFromASCIIArray ( array,[start = 0 [, end = -1 [, encoding = 0]]] ) Konvertiert ein Array mit ASCII-Code in einen String.
StringInStr ( "string", "substring" [, casesense = 0 [, occurrence = 1 [, start = 1 [, count]]]] ) Prueft, ob ein String einen angegebenen Unterstring enthaelt.
StringIsAlNum ( "string" ) Prueft, ob der String nur alphanumerische Zeichen enthaelt.
StringIsAlpha ( "string" ) Prueft, ob ein String nur alphabetische Zeichen enhaelt.
StringIsASCII ( "string" ) Prueft, ob ein String nur ASCII Zeichen im Bereich 0x00 - 0x7f (0 - 127) enthaelt.
StringIsDigit ( "string" ) Prueft, ob ein String nur Ziffern (0-9) enthaelt.
StringIsFloat ( "string" ) Prueft, ob der String eine Gleitkommazahl ist.
StringIsInt ( "string" ) Prueft, ob der String eine ganze Zahl (Integer) ist.
StringIsLower ( "string" ) Prueft, ob ein String nur Kleinbuchstaben enthaelt.
StringIsSpace ( "string" ) Prueft, ob der String nur Leerstellen enthaelt.
StringIsUpper ( "string" ) Prueft, ob ein String nur Grossbuchstaben enthaelt.
StringIsXDigit ( "string" ) Prueft, ob ein String nur hexadezimale Zeichen (0-9, A-F) enhaelt.
StringLeft ( "string", count ) Gibt eine Anzahl von Zeichen, links ausgehend von dem String zurueck.
StringLen ( "string" ) Gibt die Anzahl der Zeichen in einem String (die Laenge) zurueck. .
StringLower ( "string" ) Wandelt einen String in Kleinschrift um.
StringMid ( "string", start [, count = -1] ) Extrahiert eine Anzahl von Zeichen aus einem String.
StringRegExp ( "test", "pattern" [, flag = 0 [, offset = 1]] ) Prueft, ob ein String dem Suchmuster eines regulaeren Ausdrucks entspricht.
StringRegExpReplace ( "test", "pattern", "replace" [, count = 0] ) Ersetzt Text in einem String basierend auf einem regulaeren Ausdruck (regular expression).
StringReplace ( "string", "searchstring/start", "replacestring" [, occurrence = 0 [, casesense = 0]] ) Ersetzt ein oder mehrere Zeichen in einem String.
StringReverse ( "string" [, flag = 0] ) Kehrt den Inhalt des festgelegten Strings um.
StringRight ( "string", count ) Gibt von dem String eine Anzahl von Zeichen von rechts ausgehend zurueck.
StringSplit ( "string", "delimiters" [, flag = 0] ) Teilt einen String, abhaengig von den/dem gewaehlten Trennzeichen (delimiters), in Stringfolgen auf und gibt diese in einem Array zurueck.
StringStripCR ( "string" ) Entfernt alle Eingabezeichen ( Chr(13) ) von einem String.
StringStripWS ( "string", flag ) Entfernt Leerstellen aus einem String.
StringToASCIIArray ( "string",[start = 0 [, end [, encoding = 0]]] ) Konvertiert einen String in ein Array, welches fuer jedes Zeichen den ASCII-Code enthaelt.
StringToBinary ( expression [, flag = 1] ) Konvertiert einen String zu Binaerdaten.
StringTrimLeft ( "string", count ) Kuerzt eine Zeichenkette um eine vorgegebene Anzahl Zeichen am Anfang (von links).
StringTrimRight ( "string", count ) Kuerzt eine Zeichenkette um eine vorgegebene Anzahl Zeichen am Ende (von rechts).
StringUpper ( "string" ) Wandelt einen String in Grossbuchstaben um.
Tan ( expression ) Berechnet den Tangens einer Zahl.
TCPAccept ( mainsocket ) Ermoeglicht/Laesst einen eingehenden Verbindungsversuch auf einem "Socket" zu.
TCPCloseSocket ( socket ) Schliesst einen TCP "Socket".
TCPConnect ( IPAddr, port ) Erstellt einen Verbindungsanschluss zu einem vorhandenen Server.
TCPListen ( IPAddr, port [, MaxPendingConnection] ) Erzeugt einen Abhoer-Anschluss ("Socket") fuer eine eingehende Verbindung.
TCPNameToIP ( Name ) Konvertiert einen Internetnamen in eine IP Adresse.
TCPRecv ( mainsocket, maxlen [, flag = 0] ) Erhaelt Daten von einem verbundenen "Socket".
TCPSend ( mainsocket, data ) Sendet Daten auf einem verbundenen "Socket".
TCPShutdown (  ) Stoppt TCP/UDP Services.
TCPStartup (  ) Stellt die TCP und UDP Dienste zur Verfuegung.
TimerDiff ( handle ) Gibt den Zeitunterschied zu einem vorherigen Aufruf der Funktion TimerInit() zurueck.
TimerInit (  ) Liefert ein Handle welches an TimerDiff() uebergeben werden kann, um die Zeitdifferenz in Millisekunden zu berechnen.
ToolTip ( "text" [, x [, y [, "title" [, icon = 0 [, options]]]]] ) Erstellt einen "Tooltip" irgendwo auf dem Bildschirm.
TrayCreateItem ( "text" [, menuID = -1 [, menuentry = -1 [, menuradioitem = 0]]] ) Erstellt ein Menueintrags-Element fuer den Tray.
TrayCreateMenu ( "sub/menutext" [, menuID = -1 [, menuentry = -1]] ) Erstellt ein Menue-Control fuer das Traymenue.
TrayGetMsg (  ) Fragt ab, ob ein Tray-Ereignis (Event) aufgetreten ist.
TrayItemDelete ( controlID ) Loescht einen Eintrag von einem Traymenue.
TrayItemGetHandle ( controlID ) Gibt den Handle fuer ein Traymenue bzw. einen Eintrag davon zurueck.
TrayItemGetState ( [controlID] ) Ermittelt den aktuellen Status eines Controls im traymenue.
TrayItemGetText ( controlID ) Ermittelt den Text eines Traymenueeintrages.
TrayItemSetOnEvent ( itemID, "function" ) Legt die Funktion (UDF) fest, die aufgerufen wird, wenn ein TrayItem angeklickt wird.
TrayItemSetState ( controlID, state ) Aendert den Status eines Traymenues/-eintrages.
TrayItemSetText ( controlID, text ) Setzt den Text eines Eintrags von einem Tray Menue Control.
TraySetClick ( flag ) Setzt den Klickmodus des Trayicons. Sprich durch welche Mausklicks das Traymenue angezeigt werden soll.
TraySetIcon ( [filename [, iconID]] ) Aendert das Trayicon.
TraySetOnEvent ( specialID, "function" ) Definiert eine Benutzerfunktion, welche aufgerufen werden soll, wenn eine besondere Trayaktion passiert.
TraySetPauseIcon ( [filename [, iconID]] ) Setzt ein bestimmtes Pause-Trayicon.
TraySetState ( [flag = 1] ) Setzt den Status des Trayicons.
TraySetToolTip ( [text] ) Setzt den Tooltip-Text fuer das Trayicon.
TrayTip ( "title", "text", timeout [, option = 0] ) Anzeige eines Ballon-Tipps am AutoIt-Icon.
UBound ( Variable [, Dimension = 1] ) Gibt die Groesse der Dimension eines Arrays oder die Schluessel einer Map zurueck.
UDPBind ( IPAddr, port ) Erzeugt einen "Socket", gebunden an eine eingehende Verbindung.
UDPCloseSocket ( socketarray ) Schliesst einen UDP Anschluss (Socket).
UDPOpen ( IPAddr, port [, flag = 0] ) Oeffnet einen Anschluss (Socket), der mit einem existierenden Server verbunden ist.
UDPRecv ( socketarray, maxlen [, flag = 0] ) Erhaelt Daten von einem geoeffneten "Socket".
UDPSend ( socketarray, data ) Sendet Daten an einen geoeffneten "Socket".
UDPShutdown ( ) Stoppt TCP/UDP Services.
UDPStartup ( ) Stellt die TCP und UDP Dienste zur Verfuegung.
VarGetType ( expression ) Gibt den internen Datentyp eines Variants zurueck.
WinActivate ( "title" [, "text"] ) Holt ein bestimmtes Fenster in den Vordergrund und setzt den Fokus auf dasselbe.
WinActive ( "title" [, "text"] ) Prueft, ob das angegebene Fenster existiert und gerade aktiv ist.
WinClose ( "title" [, "text"] ) Schliesst ein Fenster.
WinExists ( "title" [, "text"] ) Prueft, ob ein bestimmtes Fenster existiert.
WinFlash ( "title" [, "text" [, flashes = 4 [, delay = 500]]] ) Laesst ein Fenster in der Taskleiste blinken.
WinGetCaretPos (  ) Gibt die Koordinaten der aktuellen Cursorposition des Fensters im Vordergrund zurueck.
WinGetClassList ( "title" [, "text"] ) Liest die Klassennamen eines Fensters aus.
WinGetClientSize ( "title" [, "text"] ) Ermittelt die Groesse des Clientbereichs eines Fensters (Fenster ohne Titel, Status, Rahmen).
WinGetHandle ( "title" [, "text"] ) Ermittelt das Handle eines Fensters.
WinGetPos ( "title" [, "text"] ) Ermittelt die Position und die Groesse eines Fensters.
WinGetProcess ( "title" [, "text"] ) Ermittelt die Prozess ID (PID), die ein bestimmtes Fenster besitzt.
WinGetState ( "title" [, "text"] ) Ermittelt den Status eines Fensters.
WinGetText ( "title" [, "text"] ) Ermittelt den Text eines Fensters.
WinGetTitle ( "title" [, "text"] ) Ermittelt den vollen Titel eines Fensters.
WinKill ( "title" [, "text"] ) Erzwingt die Schliessung eines Fensters.
WinList ( ["title" [, "text"]] ) Ruft eine Liste von Fenstern ab.
WinMenuSelectItem ( "title", "text", "item" [, "item" [, "item" [, "item" [, "item" [, "item" [, "item"]]]]]] ) Aufruf eines Menuepunktes aus einem Fenster.
WinMinimizeAll (  ) Minimiert alle Fenster.
WinMinimizeAllUndo (  ) Macht eine vorangegangene "WinMinimizeAll"-Funktion rueckgaengig.
WinMove ( "title", "text", x, y [, width [, height [, speed]]] ) Verschiebt oder und aendert die Groesse eines Fensters.
WinSetOnTop ( "title", "text", flag ) Veraendert das "Always On Top"-Attribut ("immer im Vordergrund"-Attribut) eines Fensters.
WinSetState ( "title", "text", flag ) Zeigt, versteckt, minimiert, maximiert oder stellt ein Fenster wieder her.
WinSetTitle ( "title", "text", "newtitle" ) Aendert den Titel eines Fensters.
WinSetTrans ( "title", "text", transparency ) Setzt die Transparenz eines Fensters.
WinWait ( "title" [, "text" [, timeout = 0]] ) Pausiert das Skript bis das angegebene Fenster existiert.
WinWaitActive ( "title" [, "text" [, timeout = 0]] ) Unterbricht die Ausfuehrung eines Skripts bis das angegebene Fenster aktiv ist.
WinWaitClose ( "title" [, "text" [, timeout = 0]] ) Unterbricht die Ausfuehrung des Skripts bis das angegebene Fenster nicht mehr existiert.
WinWaitNotActive ( "title" [, "text" [, timeout = 0]] ) Unterbricht die Ausfuehrung des Skripts bis das angegebene Fenster nicht mehr aktiv ist.
_Array1DToHistogram ( $aArray [, $iSizing = 100] ) Wandelt ein 1D Array in ein Histogramm um (benoetigt: #include <Array.au3>)
_ArrayAdd ( ByRef $aArray, $vValue [, $iStart = 0 [, $sDelim_Item = "|" [, $sDelim_Row = @CRLF [, $iForce = $ARRAYFILL_FORCE_DEFAULT]]]] ) Fuegt den angegeben Wert an dem Ende des angegebenen Arrays hinzu (benoetigt: #include <Array.au3>)
_ArrayBinarySearch ( Const ByRef $aArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iColumn = 0]]] ) Nutzt einen binaeren Such-Algorithmus, um ein 1D oder 2D Array zu durchsuchen (benoetigt: #include <Array.au3>)
_ArrayColDelete ( ByRef $aArray, $iColumn [, $bConvert = False] ) Loescht eine festgelegte Spalte in einem 2D Array (benoetigt: #include <Array.au3>)
_ArrayColInsert ( ByRef $aArray, $iColumn ) Fuegt eine festgelegte Spalte in ein 1D oder 2D Array ein (benoetigt: #include <Array.au3>)
_ArrayCombinations ( Const ByRef $aArray, $iSet [, $sDelimiter = ""] ) Gibt ein Array mit den Kombinationen eines Elementsatzes von einem ausgewaehlten 1D Array zurueck (benoetigt: #include <Array.au3>)
_ArrayConcatenate ( ByRef $aArrayTarget, Const ByRef $aArraySource [, $iStart = 0] ) Verbindet zwei Arrays, entweder 1D Arrays oder 2D Arrays mit der gleichen Anzahl an Spalten (benoetigt: #include <Array.au3>)
_ArrayDelete ( ByRef $aArray, $vRange ) Entfernt das festgelegte Element bzw. die festgelegten Elemente aus dem festgelegten 1D oder 2D Array (benoetigt: #include <Array.au3>)
_ArrayDisplay ( Const ByRef $aArray [, $sTitle = "ArrayDisplay" [, $sArrayRange = "" [, $iFlags = 0 [, $vUser_Separator = Default [, $sHeader = Default [, $iMax_ColWidth = Default]]]]]] ) Zeigt ein 1D oder 2D Array in einem ListView (benoetigt: #include <Array.au3>)
_ArrayExtract ( Const ByRef $aArray [, $iStart_Row = -1 [, $iEnd_Row = -1 [, $iStart_Col = -1 [, $iEnd_Col = -1]]]] ) Extrahiert ein Array von den angegebenen Elementen des 1D oder 2D Arrays (benoetigt: #include <Array.au3>)
_ArrayFindAll ( Const ByRef $aArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iCase = 0 [, $iCompare = 0 [, $iSubItem = 0 [, $bRow = False]]]]]] ) Findet die Indizes mit allen Vorkommen einer Suchabfrage zwischen zwei Punkten in einem 1D oder 2D Array durch das Benutzen von _ArraySearch() (benoetigt: #include <Array.au3>)
_ArrayInsert ( ByRef $aArray, $vRange [, $vValue = "" [, $iStart = 0 [, $sDelim_Item = "|" [, $sDelim_Row = @CRLF [, $iForce = $ARRAYFILL_FORCE_DEFAULT]]]]] ) Fuegt einen neuen String an der festgelegten Position in das 1D oder 2D Array ein (benoetigt: #include <Array.au3>)
_ArrayMax ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] ) Gibt den hoechsten Wert aus einem 1D oder 2D Array zurueck (benoetigt: #include <Array.au3>)
_ArrayMaxIndex ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] ) Gibt den Index des groessten Wertes in einem 1D oder 2D Array zurueck (benoetigt: #include <Array.au3>)
_ArrayMin ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] ) Gibt den niedrigsten Wert aus einem 1D oder 1D Array zurueck (benoetigt: #include <Array.au3>)
_ArrayMinIndex ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] ) Gibt den Index des kleinsten Wertes in einem 1D oder 2D Array zurueck (benoetigt: #include <Array.au3>)
_ArrayPermute ( ByRef $aArray [, $sDelimiter = ""] ) Gibt ein Array mit allen moeglichen Kombinationen von Elementen in einem 1D Array zurueck (benoetigt: #include <Array.au3>)
_ArrayPop ( ByRef $aArray ) Gibt das letzte Element eines Arrays zurueck und loescht dieses gleichzeitig (benoetigt: #include <Array.au3>)
_ArrayPush ( ByRef $aArray, $vValue [, $iDirection = 0] ) Fuegt dem Array einen neuen Wert hinzu, ohne dessen Groesse zu aendern. Beim Einfuegen an das Ende wird das erste Array-Element geloescht bzw. entgegengesetzt (benoetigt: #include <Array.au3>)
_ArrayReverse ( ByRef $aArray [, $iStart = 0 [, $iEnd = 0]] ) Kehrt die Reihenfolge der Elemente in einem 1D Array um (benoetigt: #include <Array.au3>)
_ArraySearch ( Const ByRef $aArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iCase = 0 [, $iCompare = 0 [, $iForward = 1 [, $iSubItem = -1 [, $bRow = False]]]]]]] ) Findet einen Eintrag in einem 1D oder 2D Array. Aehnlich wie _ArrayBinarySearch(), mit der Ausnahme, dass kein sortiertes Array erforderlich ist (benoetigt: #include <Array.au3>)
_ArrayShuffle ( ByRef $aArray [, $iStart_Row = 0 [, $iEnd_Row = 0 [, $iCol = -1]]] ) Mischt ausgewaehlte Zeilen des 1D oder 2D Arrays - kann auf eine spezifische Spalte in 2D Arrays begrenzt werden (benoetigt: #include <Array.au3>)
_ArraySort ( ByRef $aArray [, $iDescending = 0 [, $iStart = 0 [, $iEnd = 0 [, $iSubItem = 0 [, $iPivot = 0]]]]] ) Sortiert ein 1D oder 2D Array durch einen festgelegten Index. Dabei werden Dualpivotsort-, Quicksort- und Insertionsort-Algorithmen verwendet (benoetigt: #include <Array.au3>)
_ArraySwap ( ByRef $aArray, $iIndex_1, $iIndex_2 [, $bCol = False [, $iStart = -1 [, $iEnd = -1]]] ) Vertauscht die Elemente eines 1D Arrays und manche bzw die kompletten Zeilen bzw. Spalten eines 2D Arrays (benoetigt: #include <Array.au3>)
_ArrayToClip ( Const ByRef $aArray [, $sDelim_Col = "|" [, $iStart_Row = -1 [, $iEnd_Row = -1 [, $sDelim_Row = @CRLF [, $iStart_Col = -1 [, $iEnd_Col = -1]]]]]] ) Sendet den Inhalt eines 1D oder 2D Arrays an die Zwischenablage. Jedes Element wird durch ein festgelegtes Trennzeichen getrennt (benoetigt: #include <Array.au3>)
_ArrayToString ( Const ByRef $aArray [, $sDelim_Col = "|" [, $iStart_Row = -1 [, $iEnd_Row = -1 [, $sDelim_Row = @CRLF [, $iStart_Col = -1 [, $iEnd_Col = -1]]]]]] ) Schreibt die Elemente eines 1D oder 2D Arrays, durch das angegebene Trennzeichen getrennt, in einen String (benoetigt: #include <Array.au3>)
_ArrayTranspose ( ByRef $aArray ) Dreht ein 1D oder 2D Array (tauscht Zeilen und Spalten) (benoetigt: #include <Array.au3>)
_ArrayTrim ( ByRef $aArray, $iTrimNum [, $iDirection = 0 [, $iStart = 0 [, $iEnd = 0 [, $iSubItem = 0]]]] ) Kuerzt alle Elemente in einem 1D oder 2D Array um eine bestimmte Anzahl von Zeichen (benoetigt: #include <Array.au3>)
_ArrayUnique ( Const ByRef $aArray [, $iColumn = 0 [, $iBase = 0 [, $iCase = 0 [, $iCount = $ARRAYUNIQUE_COUNT [, $iIntType = $ARRAYUNIQUE_AUTO]]]]] ) Gibt die Elemente einer Spalte aus einem 1D oder 2D Array ohne deren Duplikate zurueck (benoetigt: #include <Array.au3>)
_Assert ( $sCondition [, $bExit = True [, $iCode = 0x7FFFFFFF [, $sLine = @ScriptLineNumber]]] ) Zeigt eine Nachricht an, falls die Aussage nicht zutrifft (benoetigt: #include <Debug.au3>)
_ChooseColor ( [$iReturnType = 0 [, $iColorRef = 0 [, $iRefType = 0 [, $hWndOwnder = 0]]]] ) Erzeugt eine Dialogbox, die es dem Benutzer ermoeglicht, eine Farbe auszuwaehlen (benoetigt: #include <Misc.au3>)
_ChooseFont ( [$sFontName = "Courier New" [, $iPointSize = 10 [, $iFontColorRef = 0 [, $iFontWeight = 0 [, $bItalic = False [, $bUnderline = False [, $bStrikethru = False [, $hWndOwner = 0]]]]]]]] ) Zeigt einen Schriftauswahldialog an, mit dem der Benutzer eine Schrift und deren Attribute waehlen kann (benoetigt: #include <Misc.au3>)
_ClipBoard_ChangeChain ( $hRemove, $hNewNext ) Entfernt ein bestimmtes Fenster aus der Reihe der Zwischenablagen-Betrachter (benoetigt: #include <Clipboard.au3>)
_ClipBoard_Close (  ) Schliesst die Zwischenablage (benoetigt: #include <Clipboard.au3>)
_ClipBoard_CountFormats (  ) Liest die Anzahl der verschiedenen Datenformate aus, die in der Zwischenablage gespeichert sind (benoetigt: #include <Clipboard.au3>)
_ClipBoard_Empty (  ) Leert die Zwischenablage und gibt die Verweise (Handles) auf die Daten in der Zwischenablage frei (benoetigt: #include <Clipboard.au3>)
_ClipBoard_EnumFormats ( $iFormat ) Zaehlt die Datenformate auf, die aktuell in der Zwischenablage vorhanden sind (benoetigt: #include <Clipboard.au3>)
_ClipBoard_FormatStr ( $iFormat ) Gibt eine String-Darstellung eines Standard-Zwischenablage-Formats zurueck (benoetigt: #include <Clipboard.au3>)
_ClipBoard_GetData ( [$iFormat = 1] ) Ruft die Daten aus der Zwischenablage in einem angegebenen Format ab (benoetigt: #include <Clipboard.au3>)
_ClipBoard_GetDataEx ( [$iFormat = 1] ) Ruft Daten eines bestimmten Format's aus der Zwischenablage ab (benoetigt: #include <Clipboard.au3>)
_ClipBoard_GetFormatName ( $iFormat ) Gibt den Namen des angegebenen registrierten Formats zurueck (benoetigt: #include <Clipboard.au3>)
_ClipBoard_GetOpenWindow (  ) Gibt das Handle des Fensters zurueck, das gerade die Zwischenablage geoeffnet hat (benoetigt: #include <Clipboard.au3>)
_ClipBoard_GetOwner (  ) Gibt den Verweis (Handle) auf das Fenster zurueck, das aktuell die Zwischenablage besitzt (benoetigt: #include <Clipboard.au3>)
_ClipBoard_GetPriorityFormat ( $aFormats ) Gibt das erste verfuegbare Zwischenablagenformat in der angegebenen Liste zurueck.  (benoetigt: #include <Clipboard.au3>)
_ClipBoard_GetSequenceNumber (  ) Ermittelt die Reihenfolgenummer des aktuellen Fensters aus der Zwischenablage (benoetigt: #include <Clipboard.au3>)
_ClipBoard_GetViewer (  ) Holt sich das Handle vom ersten Fenster der Zwischenablagen-Betrachterkette (benoetigt: #include <Clipboard.au3>)
_ClipBoard_IsFormatAvailable ( $iFormat ) Ermittelt, ob die Zwischenablage Daten in dem angegebenen Format enthaelt (benoetigt: #include <Clipboard.au3>)
_ClipBoard_Open ( $hOwner ) Oeffnet die Zwischenablage und verhindert deren Veraenderung durch andere Anwendungen (benoetigt: #include <Clipboard.au3>)
_ClipBoard_RegisterFormat ( $sFormat ) Registriert ein neues Zwischenablageformat (benoetigt: #include <Clipboard.au3>)
_ClipBoard_SetData ( $vData [, $iFormat = 1] ) Platziert Daten eines bestimmten Formats in die Zwischenablage (benoetigt: #include <Clipboard.au3>)
_ClipBoard_SetDataEx ( ByRef $hMemory [, $iFormat = 1] ) Speichert Daten in der Zwischenablage im angegebenen Format (benoetigt: #include <Clipboard.au3>)
_ClipBoard_SetViewer ( $hViewer ) Fuegt das angegebene Fenster an die Reihe der Zwischenablagen-Betrachter an (benoetigt: #include <Clipboard.au3>)
_ClipPutFile ( $sFilePath [, $sDelimiter = "|"] ) Kopiert eine Datei in die Zwischenablage, wie auch der Explorer es macht (benoetigt: #include <Misc.au3>)
_ColorConvertHSLtoRGB ( $aArray ) Wandelt Farbwerte vom HSL-System ins RGB-Format um (benoetigt: #include <Color.au3>)
_ColorConvertRGBtoHSL ( $aArray ) Wandelt Farbwerte vom RGB-System ins HSL-Format um (benoetigt: #include <Color.au3>)
_ColorGetBlue ( $iColor ) Gibt den Blauwert der angegebenen Farbe zurueck (benoetigt: #include <Color.au3>)
_ColorGetCOLORREF ( $iColor ) Gibt die COLORREF Farbe zurueck (benoetigt: #include <Color.au3>)
_ColorGetGreen ( $iColor ) Gibt den Gruenwert der angegebenen RGB-Farbe zurueck (benoetigt: #include <Color.au3>)
_ColorGetRed ( $iColor ) Gibt den Rotwert des angegebenen RGB-Farbwertes zurueck (benoetigt: #include <Color.au3>)
_ColorGetRGB ( $iColor ) Gibt ein Array zurueck in welchem die RGB Werte in ihren entsprechenden Positionen enthalten sind (benoetigt: #include <Color.au3>)
_ColorSetCOLORREF ( $aColor ) Gibt die COLORREF Farbe zurueck (benoetigt: #include <Color.au3>)
_ColorSetRGB ( $aColor ) Gibt die RGB Farbe zurueck (benoetigt: #include <Color.au3>)
_Crypt_DecryptData ( $vData, $vCryptKey, $iAlgID [, $bFinal = True] ) Entschluesselt einen String mit einen bestimmten Passwort (benoetigt: #include <Crypt.au3>)
_Crypt_DecryptFile ( $sSourceFile, $sDestinationFile, $vCryptKey, $iAlgID ) Entschluesselt eine Datei mit einem angegebenen Schluessel und Algorithmus (benoetigt: #include <Crypt.au3>)
_Crypt_DeriveKey ( $vPassword, $iAlgID [, $iHashPasswordID = $CALG_MD5] ) Generiert einen Schluessel aus dem Algorithmus und dem Passwort (benoetigt: #include <Crypt.au3>)
_Crypt_DestroyKey ( $hCryptKey ) Gibt die Ressourcen die ein Schluessel benoetigt wieder frei (benoetigt: #include <Crypt.au3>)
_Crypt_EncryptData ( $vData, $vCryptKey, $iAlgID [, $bFinal = True] ) Verschluesselt Daten mit dem gegebenen Schluessel (benoetigt: #include <Crypt.au3>)
_Crypt_EncryptFile ( $sSourceFile, $sDestinationFile, $vCryptKey, $iAlgID ) Verschluesselt eine Datei mit einem angegebenen Schluessel und Algorithmus (benoetigt: #include <Crypt.au3>)
_Crypt_GenRandom ( $pBuffer, $iSize ) Fuellt einen Buffer mit Cryptographischen Zufallsdaten (benoetigt: #include <Crypt.au3>)
_Crypt_HashData ( $vData, $iAlgID [, $bFinal = True [, $hCryptHash = 0]] ) Erstellt einen Datenhash mit einem speziellen Algorithmus (benoetigt: #include <Crypt.au3>)
_Crypt_HashFile ( $sFilePath, $iAlgID ) Erstellt den Hash einer Datei mit dem festgelegten Algorithmus (benoetigt: #include <Crypt.au3>)
_Crypt_Shutdown (  ) Deinizialisiert die Verschluesselungsbibliothek (benoetigt: #include <Crypt.au3>)
_Crypt_Startup (  ) Initialisiert die Crypt Bibliothek (benoetigt: #include <Crypt.au3>)
_Date_Time_CompareFileTime ( $tFileTime1, $tFileTime2 ) Vergleicht zwei Dateien anhand der Zeit (benoetigt: #include <Date.au3>)
_Date_Time_DOSDateTimeToArray ( $iDosDate, $iDosTime ) Dekodiert ein DOS-Datum/Zeit in ein Array (benoetigt: #include <Date.au3>)
_Date_Time_DOSDateTimeToFileTime ( $iFatDate, $iFatTime ) Konvertiert ein MS-DOS Datum/Zeit in ein Datei Datum/Zeit (benoetigt: #include <Date.au3>)
_Date_Time_DOSDateTimeToStr ( $iDosDate, $iDosTime ) Dekodiert ein DOS-Datum in einen String (benoetigt: #include <Date.au3>)
_Date_Time_DOSDateToArray ( $iDosDate ) Dekodiert ein DOS-Datum in ein Array (benoetigt: #include <Date.au3>)
_Date_Time_DOSDateToStr ( $iDosDate ) Dekodiert ein DOS-Datum als String (benoetigt: #include <Date.au3>)
_Date_Time_DOSTimeToArray ( $iDosTime ) Dekodiert eine DOS-Zeit in ein Array (benoetigt: #include <Date.au3>)
_Date_Time_DOSTimeToStr ( $iDosTime ) Wandelt die DOS-Zeit in einen String (benoetigt: #include <Date.au3>)
_Date_Time_EncodeFileTime ( $iMonth, $iDay, $iYear [, $iHour = 0 [, $iMinute = 0 [, $iSecond = 0 [, $iMSeconds = 0]]]] ) Enkodiert und gibt eine $tagFILETIME Struktur zurueck (benoetigt: #include <Date.au3>)
_Date_Time_EncodeSystemTime ( $iMonth, $iDay, $iYear [, $iHour = 0 [, $iMinute = 0 [, $iSecond = 0 [, $iMSeconds = 0]]]] ) Dekodiert und liefert eine $tagSYSTEMTIME Struktur zurueck (benoetigt: #include <Date.au3>)
_Date_Time_FileTimeToArray ( ByRef $tFileTime ) Schreibt ein Dateidatum in ein Array (benoetigt: #include <Date.au3>)
_Date_Time_FileTimeToDOSDateTime ( $tFileTime ) Konvertiert Datei Datum/Zeit in MS-DOS Datum/Zeit (benoetigt: #include <Date.au3>)
_Date_Time_FileTimeToLocalFileTime ( $tFileTime ) Wandelt eine Dateizeit basierend auf der UTC-Zeit in die lokale Dateizeit um (benoetigt: #include <Date.au3>)
_Date_Time_FileTimeToStr ( ByRef $tFileTime [, $iFmt = 0] ) Wandelt die Dateizeit in einen Datum/Zeit String um (benoetigt: #include <Date.au3>)
_Date_Time_FileTimeToSystemTime ( $tFileTime ) Konvertiert die Dateizeit zum Systemzeitformat (benoetigt: #include <Date.au3>)
_Date_Time_GetFileTime ( $hFile ) Gibt das Datum und die Zeit einer Datei zurueck fuer den Status Erstellt, letzter Zugriff und Veraendert (benoetigt: #include <Date.au3>)
_Date_Time_GetLocalTime (  ) Gibt die lokale Systemzeit / das Systemdatum zurueck (benoetigt: #include <Date.au3>)
_Date_Time_GetSystemTime (  ) Gibt die aktuelle System Zeit und Datum im UTC Zeitformat zurueck (benoetigt: #include <Date.au3>)
_Date_Time_GetSystemTimeAdjustment (  ) Gibt an, ob das System periodisch eine Anpassung der Uhrzeit vornimmt (benoetigt: #include <Date.au3>)
_Date_Time_GetSystemTimeAsFileTime (  ) Gibt das aktuelle Systemdatum und die Systemzeit im UTC-Format zurueck (benoetigt: #include <Date.au3>)
_Date_Time_GetSystemTimes (  ) Gibt Systemzeiten zurueck (benoetigt: #include <Date.au3>)
_Date_Time_GetTickCount (  ) Gibt die Zeit in Millisekunden zurueck, die vergangen ist, seit Windows gestartet wurde (benoetigt: #include <Date.au3>)
_Date_Time_GetTimeZoneInformation (  ) Ermittelt die aktuellen Zeitzonen Einstellungen (benoetigt: #include <Date.au3>)
_Date_Time_LocalFileTimeToFileTime ( $tLocalTime ) Wandelt die lokale Dateizeit in die UTC-basierte Dateizeit um (benoetigt: #include <Date.au3>)
_Date_Time_SetFileTime ( $hFile, $tCreateTime, $tLastAccess, $tLastWrite ) Setzt das Datum und die Zeit einer Datei fuer den Status Erstellt, letzter Zugriff und Veraendert (benoetigt: #include <Date.au3>)
_Date_Time_SetLocalTime ( $tSYSTEMTIME ) Setzt die lokale Zeit und Datum (benoetigt: #include <Date.au3>)
_Date_Time_SetSystemTime ( $tSYSTEMTIME ) Setzt die aktuelle System Zeit und Datum im UTC Zeitformat (benoetigt: #include <Date.au3>)
_Date_Time_SetSystemTimeAdjustment ( $iAdjustment, $bDisabled ) Aktiviert oder Deaktiviert die periodische Zeitanpassung der Systemuhrzeit (benoetigt: #include <Date.au3>)
_Date_Time_SetTimeZoneInformation ( $iBias, $sStdName, $tStdDate, $iStdBias, $sDayName, $tDayDate, $iDayBias ) Setzt die aktuellen Zeitzonen Einstellungen (benoetigt: #include <Date.au3>)
_Date_Time_SystemTimeToArray ( ByRef $tSystemTime ) Schreibt die Systemzeit in ein Array (benoetigt: #include <Date.au3>)
_Date_Time_SystemTimeToDateStr ( ByRef $tSYSTEMTIME [, $iFmt = 0] ) Dekodiert die Systemzeit in eine Datumsstring (benoetigt: #include <Date.au3>)
_Date_Time_SystemTimeToDateTimeStr ( ByRef $tSYSTEMTIME [, $iFmt = 0] ) Wandelt die Systemzeit in einen Datum/Zeitstring um (benoetigt: #include <Date.au3>)
_Date_Time_SystemTimeToFileTime ( $tSYSTEMTIME ) Wandelt die Systemzeit in das Dateizeitformat um (benoetigt: #include <Date.au3>)
_Date_Time_SystemTimeToTimeStr ( ByRef $tSystemTime ) Wandelt die Systemzeit in einen Zeitstring um (benoetigt: #include <Date.au3>)
_Date_Time_SystemTimeToTzSpecificLocalTime ( $tUTC [, $tTimeZone = 0] ) Konvertiert eine UTC-Zeit in eine lokale Zeit entsprechend der angegebenen Zeitzone (benoetigt: #include <Date.au3>)
_Date_Time_TzSpecificLocalTimeToSystemTime ( $tLocalTime [, $tTimeZone = 0] ) Konvertiert eine lokale Zeit in eine UTC-Zeit (benoetigt: #include <Date.au3>)
_DateAdd ( $sType, $iNumber, $sDate ) Berechnet ein neues Datum bzw. eine neues Uhrzeit durch das addieren bzw. subvtrahieren von Zeitintervallen basierend auf einem gegebenen Datum bzw. einer gegebenen Uhrzeit (benoetigt: #include <Date.au3>)
_DateDayOfWeek ( $iDayNum [, $iFormat = 0] ) Gibt den Namen des Wochentages zurueck, basierend auf dem angegebenen Tag (benoetigt: #include <Date.au3>)
_DateDaysInMonth ( $iYear, $iMonthNum ) Gibt die Anzahl der Tage eines Monats zurueck, basierend auf den angegeben Werten fuer Monat und Jahr (benoetigt: #include <Date.au3>)
_DateDiff ( $sType, $sStartDate, $sEndDate ) Gibt die Differenz zwischen Anfangs- und Enddatum in der gewaehlten Einheit zurueck (benoetigt: #include <Date.au3>)
_DateIsLeapYear ( $iYear ) Prueft ein Jahr um festzustellen ob es ein Schaltjahr ist (benoetigt: #include <Date.au3>)
_DateIsValid ( $sDate ) Prueft das gegebene Datum auf Gueltigkeit (benoetigt: #include <Date.au3>)
_DateTimeFormat ( $sDate, $sType ) Gibt das Datum abhaengig von der in der Systemeinstellung gewaehlten Laendereinstellung zurueck (benoetigt: #include <Date.au3>)
_DateTimeSplit ( $sDate, ByRef $aDatePart, ByRef $iTimePart ) Spaltet einen String, der Datum und Zeit enthaelt, in 2 separate Arrays (benoetigt: #include <Date.au3>)
_DateToDayOfWeek ( $iYear, $iMonth, $iDay ) Gibt den Wochentag als Zahl eines vorgegebenen Datums zurueck (benoetigt: #include <Date.au3>)
_DateToDayOfWeekISO ( $iYear, $iMonth, $iDay ) Gibt den Wochentag als Zahl im ISO-Format fuer ein vorgegebenes Datum zurueck (benoetigt: #include <Date.au3>)
_DateToDayValue ( $iYear, $iMonth, $iDay ) Gibt den Datumswert ab 1. Januar 4713 v.Chr. 12:00 fuer ein angegebenes Gregorianisches Datum zurueck (benoetigt: #include <Date.au3>)
_DateToMonth ( $iMonNum [, $iFormat = 0] ) Gibt den Namen des Monats zurueck, basierend auf dem festgelegten Monat (benoetigt: #include <Date.au3>)
_DayValueToDate ( $iJulianDate, ByRef $iYear, ByRef $iMonth, ByRef $iDay ) Addiert die angegebene Anzahl Tage zum Startdatum des julianischen Kalenders (Mittag des 1. Januar 4713 vor Christus) und gibt das entsprechende gregorianische Datum zurueck (benoetigt: #include <Date.au3>)
_DebugArrayDisplay ( Const ByRef $aArray [, $sTitle = "DebugArray" [, $sArrayRange = "" [, $iFlags = 0 [, $vUser_Separator = Default [, $sHeader = Default [, $iMax_ColWidth = Default [, $hUser_Function = ""]]]]]]] ) Zeigt ein 1D oder 2D Array in einem ListView um das Debuggen zu unterstuetzen (benoetigt: #include <Debug.au3>)
_DebugBugReportEnv (  ) Gibt einen String aus, der Informationen fuer einen Fehlerbericht enthaelt (benoetigt: #include <Debug.au3>)
_DebugCOMError ( [$iComDebug = 1 [, $bExit = False]] ) Setzt das Debug-Level fuer COM Fehler, setzt es zurueck oder fragt es ab. (benoetigt: #include <Debug.au3>)
_DebugOut ( $sOutput ) Schreibt die Ausgabe einer Debugging-Session, welche durch _DebugSetup() gestartet wurde (benoetigt: #include <Debug.au3>)
_DebugReport ( $sData [, $bLastError = False [, $bExit = False]] ) Schreibt zu einer Debug-Sitzung (benoetigt: #include <Debug.au3>)
_DebugReportEx ( $sData [, $bLastError = False [, $bExit = False]] ) Schreibt zu einer Debugging-Sitzung eine formatierte Nachricht (benoetigt: #include <Debug.au3>)
_DebugReportVar ( $sVarName, $vVar [, $bErrExt = False [, $iDebugLineNumber = @ScriptLineNumber]] ) Schreibt zu einer Debugging-Session den Inhalt einer Variablen (benoetigt: #include <Debug.au3>)
_DebugSetup ( [$sTitle = Default [, $bBugReportInfos = False [, $vReportType = 1 [, $sLogFile = "" [, $bTimeStamp = False]]]]] ) Startet eine Debug-Sitzung durch Verwendung einer festgelegten Reportart (benoetigt: #include <Debug.au3>)
_Degree ( $iRadians ) Konvertiert Radiant (Bogenmass) in Grad (benoetigt: #include <Math.au3>)
_EventLog__Backup ( $hEventLog, $sFileName ) Speichert das Event-Log in eine Backup Datei (benoetigt: #include <EventLog.au3>)
_EventLog__Clear ( $hEventLog, $sFileName ) Loescht das Event Log (benoetigt: #include <EventLog.au3>)
_EventLog__Close ( $hEventLog ) Schliesst ein lesendes Handle zum Event Log (benoetigt: #include <EventLog.au3>)
_EventLog__Count ( $hEventLog ) Ermittelt die Anzahl an Eintraegen im Event Log (benoetigt: #include <EventLog.au3>)
_EventLog__DeregisterSource ( $hEventLog ) Schliesst ein schreibendes Handle zum Event Log (benoetigt: #include <EventLog.au3>)
_EventLog__Full ( $hEventLog ) Ermittelt, ob das Event Log voll ist (benoetigt: #include <EventLog.au3>)
_EventLog__Notify ( $hEventLog, $hEvent ) Ermoeglicht einer Anwendung Ereignisnachrichten zu empfangen (benoetigt: #include <EventLog.au3>)
_EventLog__Oldest ( $hEventLog ) Ermittelt die Nummer des aeltesten Datensatzes im Event Log (benoetigt: #include <EventLog.au3>)
_EventLog__Open ( $sServerName, $sSourceName ) Oeffnet ein Handle zum Event Log (benoetigt: #include <EventLog.au3>)
_EventLog__OpenBackup ( $sServerName, $sFileName ) Oeffnet ein Handle zu einem Backup Event Log (benoetigt: #include <EventLog.au3>)
_EventLog__Read ( $hEventLog [, $bRead = True [, $bForward = True [, $iOffset = 0]]] ) Liest einen Eintrag aus dem Event Log (benoetigt: #include <EventLog.au3>)
_EventLog__RegisterSource ( $sServerName, $sSourceName ) Stellt einen registrierten Handle zum angegebenen Event Log wieder her (benoetigt: #include <EventLog.au3>)
_EventLog__Report ( $hEventLog, $iType, $iCategory, $iEventID, $sUserName, $sDesc, $aData ) Schreibt einen angegebenen Eintrag an das Ende des Logfiles (benoetigt: #include <EventLog.au3>)
_Excel_BookAttach ( $sString [, $sMode = "FilePath" [, $oInstance = Default]] ) Verbindet sich mit der ersten Instanz eines Arbeitsbuches (Workbook) das mit dem gesuchten Text, abhaengig vom gewaehlten Modus, uebereinstimmt. (benoetigt: #include <Excel.au3>)
_Excel_BookClose ( $oWorkbook [, $bSave = True] ) Schliesst das angegebene Arbeitsbuch (Workbook) (benoetigt: #include <Excel.au3>)
_Excel_BookList ( [$oExcel = Default] ) Gibt eine Liste von Arbeitsbuechern (Wrkbooks) von der angegebenen Excel Instanz zurueck (benoetigt: #include <Excel.au3>)
_Excel_BookNew ( $oExcel [, $iSheets = Default] ) Erstellt ein neues Arbeitsbuch (Workbook) (benoetigt: #include <Excel.au3>)
_Excel_BookOpen ( $oExcel, $sFilePath [, $bReadOnly = False [, $bVisible = True [, $sPassword = Default [, $sWritePassword = Default [, $bUpdateLinks = Default]]]]] ) Oeffnet ein existierendes Arbeitsbuch (Workbook) (benoetigt: #include <Excel.au3>)
_Excel_BookOpenText ( $oExcel, $sFilePath [, $iStartRow = 1 [, $iDataType = Default [, $sTextQualifier = $xlTextQualifierDoubleQuote [, $bConsecutiveDelimiter = False [, $sDelimiter = "," [, $aFieldInfo = "" [, $sDecimalSeparator = Default [, $sThousandsSeparator = Default [, $bTrailingMinusNumbers = True [, $iOrigin = Default]]]]]]]]]] ) Oeffnet eine Textdatei und uebersetzt den Inhalt zu einem neuen Arbeitsbuch mit einem einzigen Arbeitsblatt (benoetigt: #include <Excel.au3>)
_Excel_BookSave ( $oWorkbook ) Speichert das angegebene Arbeitsbuch (benoetigt: #include <Excel.au3>)
_Excel_BookSaveAs ( $oWorkbook, $sFilePath [, $iFormat = $xlWorkbookDefault [, $bOverWrite = False [, $sPassword = Default [, $sWritePassword = Default [, $bReadOnlyRecommended = False]]]]] ) Speichert das angegebene Arbeitsbuch mit einem neuen Dateinamen und/oder Typ (benoetigt: #include <Excel.au3>)
_Excel_Close ( $oExcel [, $bSaveChanges = True [, $bForceClose = False]] ) Schliesst alle Arbeitsbuecher und die Instanz des Excel Programms (benoetigt: #include <Excel.au3>)
_Excel_ColumnToLetter ( $iColumn ) Konvertiert eine Spaltennummer in die Buchstabendarstellung (benoetigt: #include <Excel.au3>)
_Excel_ColumnToNumber ( $sColumn ) Konvertiert die Buchstabendarstellung einer Spalte in eine Zahl (benoetigt: #include <Excel.au3>)
_Excel_ConvertFormula ( $oExcel, $sFormula, $iFromStyle [, $iToStyle = Default [, $iToAbsolute = Default [, $vRelativeTo = Default]]] ) Konvertiert Zellreferenzen in einer Formel von/nach den Referenzstilen A1 und R1C1, von/nach relativem und absolutem Referenztyp oder beiden (benoetigt: #include <Excel.au3>)
_Excel_Export ( $oExcel, $vObject, $sFileName [, $iType = $xlTypePDF [, $iQuality = $xlQualityStandard [, $bIncludeProperties = True [, $iFrom = Default [, $iTo = Default [, $bOpenAfterPublish = Default]]]]]] ) Exportiert ein Arbeitsbuch, Arbeitsblatt, Diagramm oder einen Bereich als PDF oder XPS (benoetigt: #include <Excel.au3>)
_Excel_FilterGet ( $oWorkbook [, $vWorksheet = Default] ) Gibt eine Liste von definierten Filtern zurueck (benoetigt: #include <Excel.au3>)
_Excel_FilterSet ( $oWorkbook, $vWorksheet, $vRange, $iField [, $sCriteria1 = Default [, $iOperator = Default [, $sCriteria2 = Default]]] ) Setzt/loescht Filter-Definitionen und filtert den Bereich (benoetigt: #include <Excel.au3>)
_Excel_Open ( [$bVisible = True [, $bDisplayAlerts = False [, $bScreenUpdating = True [, $bInteractive = True [, $bForceNew = False]]]]] ) Verbindet sich mit einer bestehenden Excel Instanz oder erstellt eine neue (benoetigt: #include <Excel.au3>)
_Excel_PictureAdd ( $oWorkbook, $vWorksheet, $sFile, $vRangeOrLeft [, $iTop = Default [, $iWidth = Default [, $iHeight = Default [, $bKeepRatio = True]]]] ) Fuegt ein Bild in das angegebene Arbeitsbuch und die Arbeitsblatt (benoetigt: #include <Excel.au3>)
_Excel_Print ( $oExcel, $vObject [, $iCopies = Default [, $sPrinter = Default [, $bPreview = Default [, $iFrom = Default [, $iTo = Default [, $bPrintToFile = Default [, $bCollate = Default [, $sPrToFileName = ""]]]]]]]] ) Druckt ein Arbeitsbuch, Arbeitsblatt, Diagramm oder einen Bereich (benoetigt: #include <Excel.au3>)
_Excel_RangeCopyPaste ( $oWorksheet, $vSourceRange [, $vTargetRange = Default [, $bCut = False [, $iPaste = Default [, $iOperation = Default [, $bSkipBlanks = False [, $bTranspose = False]]]]]] ) Kopiert eine oder mehrere Zellen, Zeilen oder Spalten oder schneidet sie aus und fuegt sie in einen Bereich ein oder von/in die Zwischenablage (Clipboard) (benoetigt: #include <Excel.au3>)
_Excel_RangeDelete ( $oWorksheet, $vRange [, $iShift = Default [, $iEntireRowCol = Default]] ) Loescht eine oder mehrere Zellen, Zeilen oder Spalten vom angegebenen Arbeitsblatt (benoetigt: #include <Excel.au3>)
_Excel_RangeFind ( $oWorkbook, $sSearch [, $vRange = Default [, $iLookIn = $xlValues [, $iLookAt = $xlPart [, $bMatchcase = False]]]] ) Findet uebereinstimmende Zellen in einem Bereich oder Arbeitsbuch und gibt ein Array mit den Informationen ueber die gefundenen Zellen zurueck (benoetigt: #include <Excel.au3>)
_Excel_RangeInsert ( $oWorksheet, $vRange [, $iShift = Default [, $iCopyOrigin = Default]] ) Fuegt eine oder mehrere leere Zellen, Zeilen oder Spalten in das angegebene Arbeitsblatt ein (benoetigt: #include <Excel.au3>)
_Excel_RangeLinkAddRemove ( $oWorkbook, $vWorksheet, $vRange, $sAddress [, $sSubAddress = Default [, $sScreenTip = Default [, $sTextToDisplay = Default]]] ) Fuegt einen Hyperlink zu einem angegebenen Bereich oder entfernt ihn (benoetigt: #include <Excel.au3>)
_Excel_RangeRead ( $oWorkbook [, $vWorksheet = Default [, $vRange = Default [, $iReturn = 1 [, $bForceFunc = False]]]] ) Liest den Wert, die Formel oder den dargestellten Text einer Zelle oder eines Bereichs von Zellen des angegebenen Arbeitsbuches und Arbeitsblattes (benoetigt: #include <Excel.au3>)
_Excel_RangeReplace ( $oWorkbook, $vWorksheet, $vRange, $sSearch, $sReplace [, $iLookAt = $xlPart [, $bMatchcase = False]] ) Findet und ersetzt uebereinstimmenden Text in einem Bereich oder einm Arbeitsblatt (benoetigt: #include <Excel.au3>)
_Excel_RangeSort ( $oWorkbook, $vWorksheet, $vRange, $vKey1 [, $iOrder1 = $xlAscending [, $iSortText = $xlSortNormal [, $iHeader = $xlNo [, $bMatchcase = False [, $iOrientation = $xlSortRows [, $vKey2 = Default [, $iOrder2 = Default [, $vKey3 = Default [, $iOrder3 = Default]]]]]]]]] ) Sortiert einen Zellbereich (benoetigt: #include <Excel.au3>)
_Excel_RangeValidate ( $oWorkbook, $vWorksheet, $vRange, $iType, $sFormula1 [, $iOperator = Default [, $sFormula2 = Default [, $bIgnoreBlank = True [, $iAlertStyle = $xlValidAlertStop [, $sErrorMessage = Default [, $sInputMessage = Default]]]]]] ) Prueft Datengueltigkeit im angegebenen Bereich (benoetigt: #include <Excel.au3>)
_Excel_RangeWrite ( $oWorkbook, $vWorksheet, $vValue [, $vRange = "A1" [, $bValue = True [, $bForceFunc = False]]] ) Schreibt Wert(e) oder Formel(n) in eine Zelle oder einen Zellbereich im angegebenen Arbeitsbuch oder Arbeitsblatt (benoetigt: #include <Excel.au3>)
_Excel_SheetAdd ( $oWorkbook [, $vSheet = Default [, $bBefore = True [, $iCount = 1 [, $sName = ""]]]] ) Fuegt neue Arbeitsblaetter zu einem Arbeitsbuch hinzu und setzt ihre Namen (benoetigt: #include <Excel.au3>)
_Excel_SheetCopyMove ( $oSourceBook [, $vSourceSheet = Default [, $oTargetBook = $oSourceBook [, $vTargetSheet = 1 [, $bBefore = True [, $bCopy = True]]]]] ) Kopiert oder verschiebt das angegebene Arbeitsblatt vor oder hinter ein Arbeitsblatt im selben oder einem anderen Arbeitsbuch (benoetigt: #include <Excel.au3>)
_Excel_SheetDelete ( $oWorkbook [, $vSheet = Default] ) Loescht das angegebene Arbeitsblatt (benoetigt: #include <Excel.au3>)
_Excel_SheetList ( $oWorkbook ) Gibt eine Liste aller Arbeitsblaetter des angegebenen Arbeitsbuches zurueck (benoetigt: #include <Excel.au3>)
_FileCountLines ( $sFilePath ) Gibt die Anzahl der Zeilen in der angegebenen Datei zurueck (benoetigt: #include <File.au3>)
_FileCreate ( $sFilePath ) Erstellt eine Datei oder setzt die Laenge der angegebenen Datei auf 0 zurueck (benoetigt: #include <File.au3>)
_FileListToArray ( $sFilePath [, $sFilter = "*" [, $iFlag = $FLTA_FILESFOLDERS [, $bReturnPath = False]]] ) Listet Dateien und/oder Ordner eines bestimmten Ordners auf (aehnlich zu "dir" mit der Option "/B" unter DOS) (benoetigt: #include <File.au3>)
_FileListToArrayRec ( $sFilePath [, $sMask = "*" [, $iReturn = $FLTAR_FILESFOLDERS [, $iRecur = $FLTAR_NORECUR [, $iSort = $FLTAR_NOSORT [, $iReturnPath = $FLTAR_RELPATH]]]]] ) Listet Dateien und/oder Ordner im angegebenen Pfad mit optionaler Rekursion um das Level festzulegen und einer Ergebnissortierung (benoetigt: #include <File.au3>)
_FilePrint ( $sFilePath [, $iShow = @SW_HIDE] ) Druckt eine reine Text-Datei (benoetigt: #include <File.au3>)
_FileReadToArray ( $sFilePath, ByRef $vReturn [, $iFlags = $FRTA_COUNT [, $sDelimiter = ""]] ) Liest die angegebene Datei in ein 1D oder 2D Array ein (benoetigt: #include <File.au3>)
_FileWriteFromArray ( $sFilePath, Const ByRef $aArray [, $iBase = Default [, $iUBound = Default [, $sDelimiter = "|"]]] ) Schreibt ein Array in die angegebene Datei (benoetigt: #include <File.au3>)
_FileWriteLog ( $sLogPath, $sLogMsg [, $iFlag = -1] ) Schreibt das aktuelle Datum, die aktuelle Zeit und den angegebenen Text in eine Log Datei (benoetigt: #include <File.au3>)
_FileWriteToLine ( $sFilePath, $iLine, $sText [, $bOverWrite = False [, $bFill = False]] ) Schreibt Text in eine bestimmte Zeile einer Datei (benoetigt: #include <File.au3>)
_FTP_Close ( $hSession ) Beendet die _FTP_Open oder _FTP_Connect() Sitzung (benoetigt: #include <FTPEx.au3>)
_FTP_Command ( $hFTPSession, $sFTPCommand [, $iFlags = $FTP_TRANSFER_TYPE_ASCII [, $iExpectResponse = 0 [, $iContext = 0]]] ) Sendet einen Befehl zum FTP Server (benoetigt: #include <FTPEx.au3>)
_FTP_Connect ( $hInternetSession, $sServerName, $sUsername, $sPassword [, $iPassive = 0 [, $iServerPort = 0 [, $iService = $INTERNET_SERVICE_FTP [, $iFlags = $INTERNET_FLAG_DEFAULT [, $fuContext = 0]]]]] ) Verbindet zu einem FTP Server (benoetigt: #include <FTPEx.au3>)
_FTP_DecodeInternetStatus ( $iInternetStatus ) Decodiert einen empfangenen Internet Status (benoetigt: #include <FTPEx.au3>)
_FTP_DirCreate ( $hFTPSession, $sRemote ) Erstellt ein Verzeichnis auf dem Ftp-Server (benoetigt: #include <FTPEx.au3>)
_FTP_DirDelete ( $hFTPSession, $sRemote ) Loescht ein Verzeichnis auf einem FTP-Server (benoetigt: #include <FTPEx.au3>)
_FTP_DirGetCurrent ( $hFTPSession ) Liefert das zur Zeit aktuelle Verzeichnis des FTP-Servers zurueck (benoetigt: #include <FTPEx.au3>)
_FTP_DirPutContents ( $hFTPSession, $sLocalFolder, $sRemoteFolder, $bRecursivePut [, $iContext = 0] ) Legt den Inhalt eines lokalen Verzeichnisses auf einem FTP-Server ab. Arbeit rekursiv, wenn gewuenscht (benoetigt: #include <FTPEx.au3>)
_FTP_DirSetCurrent ( $hFTPSession, $sRemote ) Wechselt das zur Zeit aktuelle Verzeichnis des FTP-Servers (benoetigt: #include <FTPEx.au3>)
_FTP_FileClose ( $hFTPFile ) Schliesst das Handle, welches von _FTP_FileOpen() zurueckgegeben wurde (benoetigt: #include <FTPEx.au3>)
_FTP_FileDelete ( $hFTPSession, $sRemoteFile ) Loescht eine Datei von einem FTP Server (benoetigt: #include <FTPEx.au3>)
_FTP_FileGet ( $hFTPSession, $sRemoteFile, $sLocalFile [, $bFailIfExists = False [, $iFlagsAndAttributes = 0 [, $iFlags = $FTP_TRANSFER_TYPE_UNKNOWN [, $iContext = 0]]]] ) Laedt eine Datei vom FTP-Server (benoetigt: #include <FTPEx.au3>)
_FTP_FileGetSize ( $hFTPSession, $sFileName ) Ermittelt die Dateigroesse einer Datei auf einem FTP Server (benoetigt: #include <FTPEx.au3>)
_FTP_FileOpen ( $hConnect, $sFileName [, $iAccess = $GENERIC_READ [, $iFlags = $INTERNET_FLAG_TRANSFER_BINARY [, $iContext = 0]]] ) Leitet den Zugang zu einer Datei auf einem FTP Server ein, um zu lesen oder zu schreiben (benoetigt: #include <FTPEx.au3>)
_FTP_FilePut ( $hFTPSession, $sLocalFile, $sRemoteFile [, $iFlags = 0 [, $iContext = 0]] ) Sendet eine Datei an einen FTP Server (benoetigt: #include <FTPEx.au3>)
_FTP_FileRead ( $hFTPFile, $iNumberOfBytesToRead ) Liest Daten des Handles, das mit _FTP_FileOpen() erzeugt wurde (benoetigt: #include <FTPEx.au3>)
_FTP_FileRename ( $hFTPSession, $sExisting, $sNew ) Benennt eine Datei auf einem FTP Server um (benoetigt: #include <FTPEx.au3>)
_FTP_FileTimeLoHiToStr ( $iLoDWORD, $iHiDWORD [, $iFmt = 0] ) Konvertiert Lo-und HiDWORD einer FileTime-Struktur zu einem String (benoetigt: #include <FTPEx.au3>)
_FTP_FindFileClose ( $hFTPFind ) Schliesst das Handle von FindFile (benoetigt: #include <FTPEx.au3>)
_FTP_FindFileFirst ( $hFTPSession, $sRemotePath, ByRef $hFTPFind [, $iFlags = 0 [, $iContext = 0]] ) Sucht die erste Datei auf einem FTP-Server (benoetigt: #include <FTPEx.au3>)
_FTP_FindFileNext ( $hFTPFind ) Sucht die naechste Datei auf einem FTP-Server (benoetigt: #include <FTPEx.au3>)
_FTP_GetLastResponseInfo ( ByRef $iError, ByRef $sMessage ) Ermittelt die letzte Fehlerbeschreibung oder Serverantwort des Threads, der diese Funktion aufruft (benoetigt: #include <FTPEx.au3>)
_FTP_ListToArray ( $hFTPSession [, $iReturnType = 0 [, $iFlags = $INTERNET_FLAG_NO_CACHE_WRITE [, $iContext = 0]]] ) Listet Dateinamen und/oder Verzeichnisse des aktuellen Remoteverzeichnisses (benoetigt: #include <FTPEx.au3>)
_FTP_ListToArray2D ( $hFTPSession [, $iReturnType = 0 [, $iFlags = $INTERNET_FLAG_NO_CACHE_WRITE [, $iContext = 0]]] ) Listet Namen und Groessen der Dateien des aktuellen Remoteverzeichnisses (benoetigt: #include <FTPEx.au3>)
_FTP_ListToArrayEx ( $hFTPSession [, $iReturnType = 0 [, $iFlags = $INTERNET_FLAG_NO_CACHE_WRITE [, $iFmt = 1 [, $iContext = 0]]]] ) Listet Name, Groesse, Attribute und Zeiten der Dateien/Verzeichnisse des aktuellen Remoteverzeichnisses (benoetigt: #include <FTPEx.au3>)
_FTP_Open ( $sAgent [, $iAccessType = $INTERNET_OPEN_TYPE_DIRECT [, $sProxyName = '' [, $sProxyBypass = '' [, $iFlags = 0]]]] ) Oeffnet eine FTP Sitzung (benoetigt: #include <FTPEx.au3>)
_FTP_ProgressDownload ( $hFTPSession, $sLocalFile, $sRemoteFile [, $hFunctionToCall = 0] ) Laedt eine Datei im Binaermodus herunter und zeigt entweder ein Fortschrittsfenster an oder ruft dazu eine Benutzerfunktion auf (benoetigt: #include <FTPEx.au3>)
_FTP_ProgressUpload ( $hFTPSession, $sLocalFile, $sRemoteFile [, $hFunctionToCall = 0] ) Laedt eine Datei im Binaermodus hoch und zeigt einen Fortschrittsbalken, bzw. ruft eine benutzerdefinierte Funktion auf (benoetigt: #include <FTPEx.au3>)
_FTP_SetStatusCallback ( $hInternetSession, $sFunctionName ) Registriert eine Callback-Funktion, die von den WinINet-Funktionen aufgerufen werden kann, wenn ein Fortschritt waehrend der Abarbeitung erfolgt (benoetigt: #include <FTPEx.au3>)
_GDIPlus_ArrowCapCreate ( $fHeight, $fWidth [, $bFilled = True] ) Erstellt einen einstellbaren Pfeil mit einer bestimmten Hoehe und Breite (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapDispose ( $hCap ) Loest ein Pfeil-Objekt auf (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetFillState ( $hArrowCap ) Ermittelt, ob die Pfeilspitze ausgefuellt ist (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetHeight ( $hArrowCap ) Ermittelt die Hoehe der Pfeilspitze (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetMiddleInset ( $hArrowCap ) Ermittelt den Wert des Grundlinienversatzes eines Pfeil-Objekts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetWidth ( $hArrowCap ) Ermittelt die Breite der Pfeilspitze (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetFillState ( $hArrowCap [, $bFilled = True] ) Bestimmt, ob die Pfeilspitze ausgefuellt ist (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetHeight ( $hArrowCap, $fHeight ) Setzt die Hoehe der Pfeilspitze (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetMiddleInset ( $hArrowCap, $fInset ) Setzt den Wert des Grundlinienversatzes eines Pfeil-Objekts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetWidth ( $hArrowCap, $fWidth ) Setzt die Breite der Pfeilspitze (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapApplyEffect ( $hBitmap, $hEffect [, $tRECT = Null] ) Aendert eine Bitmap indem ein Effekt angewendet wird (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapApplyEffectEx ( $hBitmap, $hEffect [, $iX = 0 [, $iY = 0 [, $iW = 0 [, $iH = 0]]]] ) Aendert eine Bitmap durch anwenden eines naeher definierten Effekts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCloneArea ( $hBitmap, $nLeft, $nTop, $nWidth, $nHeight [, $iFormat = 0x00021808] ) Erzeugt eine Kopie eines Bitmap-Objekts von dem angegeben Bereich und Format (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapConvertFormat ( $hBitmap, $iPixelFormat, $iDitherType, $iPaletteType, $tPalette [, $fAlphaThresholdPercent = 0.0] ) Konvertiert eine Bitmap in ein angegebenes Pixelformat (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateApplyEffect ( $hBitmap, $hEffect [, $tRECT = Null [, $tOutRECT = Null]] ) Erstellt eine neue Bitmap durch anwenden eines bestimmten Effekts auf eine existierende Bitmap (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateApplyEffectEx ( $hBitmap, $hEffect [, $iX = 0 [, $iY = 0 [, $iW = 0 [, $iH = 0]]]] ) Erstellt eine neue Bitmap durch anwenden eines angegebenen Effekts auf eine existierende Bitmap (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateDIBFromBitmap ( $hBitmap ) Erstellt eine DIB Section (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromFile ( $sFileName ) Erstellt ein Bitmap-Objekt aus einer Datei (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromGraphics ( $iWidth, $iHeight, $hGraphics ) Erstellt ein Bitmap-Objekt aus einem Grafik-Objekt, einer Breite und einer Hoehe (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromHBITMAP ( $hBitmap [, $hPal = 0] ) Erstellt ein Bitmap-Objekt von einem Bitmap-Handle (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromHICON ( $hIcon ) Erstellt ein Bitmap Objekt basierend auf einem Icon (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromHICON32 ( $hIcon ) Erstellt ein Bitmap Objekt basierend auf einem 32bit Icon (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromMemory ( $dImage [, $bHBITMAP = False] ) Laed ein Bild (JPG, BMP, PNG, etc.) welches als Binaerstring gespeichert ist und konvertiert es in eine Bitmap (GDI+) oder hBitmap (GDI) (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromResource ( $hInst, $vResourceName ) Erstellt ein Bitmap Objekt basierend auf einem Icon (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromScan0 ( $iWidth, $iHeight [, $iPixelFormat = $GDIP_PXF32ARGB [, $iStride = 0 [, $pScan0 = 0]]] ) Erstellt ein Bitmap Objekt basierend auf einem Array von Bytes mit den Groessen- und Formatinformationen (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromStream ( $pStream ) Creates a Bitmap object based on an IStream COM interface (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapCreateHBITMAPFromBitmap ( $hBitmap [, $iARGB = 0xFF000000] ) Erstellt ein Handle zu einer Bitmap von einem Bitmap-Objekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapDispose ( $hBitmap ) Abfrage nach einem Bitmap-Objekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapGetHistogram ( $hBitmap, $iHistogramFormat, $iHistogramSize, $tChannel_0 [, $tChannel_1 = 0 [, $tChannel_2 = 0 [, $tChannel_3 = 0]]] ) Returns one or more histograms for specified color channels of the specified Bitmap (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapGetHistogramEx ( $hBitmap ) Returns histograms for the Bitmap´s color channels: Red, Green, Blue, Alpha and Grey (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapGetHistogramSize ( $iFormat ) Returns the number of elements for allocation by _GDIPlus_BitmapGetHistogramEx() (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapGetPixel ( $hBitmap, $iX, $iY ) Gets the color of a specified pixel in this bitmap (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapLockBits ( $hBitmap, $iLeft, $iTop, $iWidth, $iHeight [, $iFlags = $GDIP_ILMREAD [, $iFormat = $GDIP_PXF32RGB]] ) Sperrt einen Teil einer Bitmap fuer Lese- und Schreiboperationen (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapSetPixel ( $hBitmap, $iX, $iY, $iARGB ) Sets the color of a specified pixel in this bitmap (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapSetResolution ( $hBitmap, $fDpiX, $fDpiY ) Sets the resolution of this Bitmap object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BitmapUnlockBits ( $hBitmap, $tBitmapData ) Gibt einen Teil einer Bitmap frei, die mit _GDIPlus_BitmapLockBits gesperrt wurde (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BrushClone ( $hBrush ) Clont ein Fuellmuster-Objekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BrushCreateSolid ( [$iARGB = 0xFF000000] ) Erstellt ein vollfarbiges Fuellmuster-Objekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BrushDispose ( $hBrush ) Loest ein Fuellmuster-Objekt auf (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BrushGetSolidColor ( $hBrush ) Liefert die Farbe eines vollfarbigen Fuellmuster-Objekts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BrushGetType ( $hBrush ) Ermittelt den Typ des Fuellmuster-Objekts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_BrushSetSolidColor ( $hBrush [, $iARGB = 0xFF000000] ) Setzt die Farbe eines vollfarbigen Fuellmuster-Objekts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreate (  ) Creates and initializes an identity color matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreateGrayScale (  ) Creates and initializes a gray-scaling color matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreateNegative (  ) Creates and initializes a negative color matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreateSaturation ( $fSat ) Creates and initializes a saturation color matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreateScale ( $fRed, $fGreen, $fBlue [, $fAlpha = 1] ) Creates and initializes a scaling color matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ColorMatrixCreateTranslate ( $fRed, $fGreen, $fBlue [, $fAlpha = 0] ) Creates and initializes a translation color matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapClone ( $hCustomLineCap ) Clones a CustomLineCap object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapCreate ( $hPathFill, $hPathStroke [, $iLineCap = 0 [, $nBaseInset = 0]] ) Creates a CustomLineCap object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapDispose ( $hCap ) Loest ein benutzerdefiniertes Pfeillinienobjekt auf (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapGetStrokeCaps ( $hCustomLineCap ) Gets the end cap styles for both the start line cap and the end line cap (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_CustomLineCapSetStrokeCaps ( $hCustomLineCap, $iStartCap, $iEndCap ) Sets the distance between the base cap to the start of the line (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_Decoders (  ) Ein Array von Informationen ueber die verfuegbaren Bild-Decoder holen (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_DecodersGetCount (  ) Ermittelt die Anzahl von verfuegbaren Bilddecodern (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_DecodersGetSize (  ) Ermittelt die gesamt Groesse der Struktur, welche durch _GDIPlus_GetImageDecoders zurueckgegeben wird (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_DrawImageFX ( $hGraphics, $hImage, $hEffect [, $tRECTF = 0 [, $hMatrix = 0 [, $hImgAttributes = 0 [, $iUnit = 2]]]] ) Draws a portion of an image after applying a specified effect (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_DrawImageFXEx ( $hGraphics, $hImage, $hEffect [, $nX = 0 [, $nY = 0 [, $nW = 0 [, $nH = 0 [, $hMatrix = 0 [, $hImgAttributes = 0 [, $iUnit = 2]]]]]]] ) Draws a portion of an image after applying a specified effect (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_DrawImagePoints ( $hGraphic, $hImage, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY [, $iCount = 3] ) Zeichnet ein Bild an einer festgelegten Stelle (Verzerrung moeglich) (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreate ( $sEffectGUID ) Creates an Effect object of the type specified by the guid parameter (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateBlur ( [$fRadius = 10.0 [, $bExpandEdge = False]] ) Creates a Blur class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateBrightnessContrast ( [$iBrightnessLevel = 0 [, $iContrastLevel = 0]] ) Creates a BrightnessContrast class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateColorBalance ( [$iCyanRed = 0 [, $iMagentaGreen = 0 [, $iYellowBlue = 0]]] ) Creates a ColorBalance class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateColorCurve ( $iAdjustment, $iChannel, $iAdjustValue ) Creates a ColorBalance class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateColorLUT ( $aColorLUT ) Creates a ColorLUT class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateColorMatrix ( $tColorMatrix ) Creates a ColorMatrixEffect class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateHueSaturationLightness ( [$iHueLevel = 0 [, $iSaturationLevel = 0 [, $iLightnessLevel = 0]]] ) Creates a HueSaturationLightness class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateLevels ( [$iHighlight = 100 [, $iMidtone = 0 [, $iShadow = 0]]] ) Creates a Levels class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateRedEyeCorrection ( $aAreas ) Creates a RedEyeCorrection class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateSharpen ( [$fRadius = 10.0 [, $fAmount = 50.0]] ) Creates a Sharpen class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectCreateTint ( [$iHue = 0 [, $iAmount = 0]] ) Creates a Tint class effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectDispose ( $hEffect ) Deletes the specified Effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectGetParameters ( $hEffect, $tEffectParameters ) Returns the parameters for the specified Effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EffectSetParameters ( $hEffect, $tEffectParameters [, $iSizeAdjust = 1] ) Sets the parameters for the specified Effect object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_Encoders (  ) Ein Array von Informationen ueber die verfuegbaren Bild-Encoder holen (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetCLSID ( $sFileExtension ) Gibt die Encoder CLSID fuer einen festgelegten Bild-Dateityp zurueck (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetCount (  ) Ermittelt die Anzahl von verfuegbaren Bildencodern (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetParamList ( $hImage, $sEncoder ) Ermittelt die Parameterliste fuer einen festgelegten Bildencoder (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetParamListSize ( $hImage, $sEncoder ) Ermittelt die Groesse der Parameterliste fuer einen festgelegten Bildencoder (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_EncodersGetSize (  ) Ermittelt die Gesamtgroesse der Struktur, die von _GDIPlus_GetImageEncoders zurueckgegeben wird (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontCreate ( $hFamily, $fSize [, $iStyle = 0 [, $iUnit = 3]] ) Erstellt ein Schrift-Objekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontDispose ( $hFont ) Loest ein Schrift-Objekt auf (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyCreate ( $sFamily [, $pCollection = 0] ) Erstellt ein Schriftenfamilien-Objekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyCreateFromCollection ( $sFontName, $hFontCollection ) Creates a FontFamily object based on a specified font family (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyDispose ( $hFamily ) Loest ein Objekt einer Schriftenfamilie auf (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyGetCellAscent ( $hFontFamily [, $iStyle = 0] ) Gets the cell ascent, in design units, of a font family for the specified style or style combination (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyGetCellDescent ( $hFontFamily [, $iStyle = 0] ) Gets the cell descent, in design units, of a font family for the specified style or style combination (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyGetEmHeight ( $hFontFamily [, $iStyle = 0] ) Gets the size (commonly called em size or em height), in design units, of a font family (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontFamilyGetLineSpacing ( $hFontFamily [, $iStyle = 0] ) Gets the line spacing, in design units, of this font family for the specified style or style combination (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontGetHeight ( $hFont, $hGraphics ) Gets the line spacing of a font in the current unit of a specified Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontPrivateAddFont ( $hFontCollection, $sFontFile ) Adds a font file to the private font collection (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontPrivateAddMemoryFont ( $hFontCollection, $tFont ) Adds a font that is contained in system memory to a Microsoft® Windows® GDI+ font collection (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontPrivateCollectionDispose ( $hFontCollection ) Deletes the specified PrivateFontCollection object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_FontPrivateCreateCollection (  ) Creates a PrivateFont Collection object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsClear ( $hGraphics [, $iARGB = 0xFF000000] ) Faerbt ein Grafik-Objekt in einer festgelegten Farbe (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsCreateFromHDC ( $hDC ) Erstellt ein Grafik-Objekt aus einem Geraetekontext (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsCreateFromHWND ( $hWnd ) Erstellt ein Grafik-Objekt von einem Fenster-handle (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDispose ( $hGraphics ) Gibt ein Grafik-Objekt wieder frei (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawArc ( $hGraphics, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle [, $hPen = 0] ) Zeichnet einen Kreis (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawBezier ( $hGraphics, $nX1, $nY1, $nX2, $nY2, $nX3, $nY3, $nX4, $nY4 [, $hPen = 0] ) Zeichnet eine Bezierkurve (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawClosedCurve ( $hGraphics, $aPoints [, $hPen = 0] ) Zeichnet und fuellt eine geschlossene Spline (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawClosedCurve2 ( $hGraphics, $aPoints, $nTension [, $hPen = 0] ) Draws a closed cardinal spline (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawCurve ( $hGraphics, $aPoints [, $hPen = 0] ) Zeichnet eine geschlossene Spline (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawCurve2 ( $hGraphics, $aPoints, $nTension [, $hPen = 0] ) Draws a cardinal spline (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawEllipse ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hPen = 0] ) Zeichnet eine Ellipse (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImage ( $hGraphics, $hImage, $nX, $nY ) Zeichnet ein Bild-Objekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImagePointsRect ( $hGraphics, $hImage, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY, $nSrcX, $nSrcY, $nSrcWidth, $nSrcHeight [, $hImageAttributes = 0 [, $iUnit = 2]] ) Draws an image (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImageRect ( $hGraphics, $hImage, $nX, $nY, $nW, $nH ) Zeichnet ein Bild an einer festgelegten Stelle (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImageRectRect ( $hGraphics, $hImage, $nSrcX, $nSrcY, $nSrcWidth, $nSrcHeight, $nDstX, $nDstY, $nDstWidth, $nDstHeight [, $pAttributes = 0 [, $iUnit = 2]] ) Zeichnet ein Bild-Objekt und vergroessert, bzw. verkleinert dieses, falls gewuenscht (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawLine ( $hGraphics, $nX1, $nY1, $nX2, $nY2 [, $hPen = 0] ) Zeichnet eine Linie (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawPath ( $hGraphics, $hPath [, $hPen = 0] ) Draws a sequence of lines and curves defined by a GraphicsPath object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawPie ( $hGraphics, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle [, $hPen = 0] ) Zeichnet einen Ellipsenausschnitt mit Verbindung zur Halbachse ("Kuchenstueck") (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawPolygon ( $hGraphics, $aPoints [, $hPen = 0] ) Zeichnet ein Polygon (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawRect ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hPen = 0] ) Zeichnet ein Rechteck (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawString ( $hGraphics, $sString, $nX, $nY [, $sFont = "Arial" [, $fSize = 10 [, $iFormat = 0]]] ) Zeichnet einen String (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawStringEx ( $hGraphics, $sString, $hFont, $tLayout, $hFormat, $hBrush ) Zeichnet einen String (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillClosedCurve ( $hGraphics, $aPoints [, $hBrush = 0] ) Zeichnet und fuellt eine geschlossene Spline (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillClosedCurve2 ( $hGraphics, $aPoints, $nTension [, $hBrush = 0 [, $iFillMode = 0]] ) Creates a closed cardinal spline from an array of points and uses a brush to fill the interior of the spline (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillEllipse ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hBrush = 0] ) Fuellt eine Ellipse (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillPath ( $hGraphics, $hPath [, $hBrush = 0] ) Uses a brush to fill the interior of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillPie ( $hGraphics, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle [, $hBrush = 0] ) Fuellt einen Ellipsenausschnitt mit Verbindung zur Halbachse ("Kuchenstueck") (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillPolygon ( $hGraphics, $aPoints [, $hBrush = 0] ) Zeichnet und fuellt ein Polygon (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillRect ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hBrush = 0] ) Fuellt ein Rechteck (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsFillRegion ( $hGraphics, $hRegion [, $hBrush = 0] ) Uses a brush to fill a specified region (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetCompositingMode ( $hGraphics ) Gets the compositing mode currently set for a Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetCompositingQuality ( $hGraphics ) Gets the compositing quality currently set for a Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetDC ( $hGraphics ) Erhaelt ein Handle zu dem Geraetekontext des Grafik-Objekts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetInterpolationMode ( $hGraphics ) Gets the interpolation mode currently set for a Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetSmoothingMode ( $hGraphics ) Ermittelt die Renderqualitaet eines Grafik-Objekts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsGetTransform ( $hGraphics, $hMatrix ) Gets the world transformation matrix of a Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsMeasureCharacterRanges ( $hGraphics, $sString, $hFont, $tLayout, $hStringFormat ) Gets a set of region objects each of which bounds a range of character positions within a string (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsMeasureString ( $hGraphics, $sString, $hFont, $tLayout, $hFormat ) Misst die Groesse eines Strings (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsReleaseDC ( $hGraphics, $hDC ) Gibt den Geraetekontext des Grafik-Objekts frei (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsResetClip ( $hGraphics ) Sets the clipping region of a Graphics object to an infinite region (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsResetTransform ( $hGraphics ) Sets the world transformation matrix of a Graphics object to the identity matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsRestore ( $hGraphics, $iState ) Restores the state of a Graphics object to the state stored by a previous call to the _GDIPlus_GraphicsSave method of the Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsRotateTransform ( $hGraphics, $fAngle [, $iOrder = 0] ) Updates the world transformation matrix of a Graphics object with the product of itself and a rotation matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSave ( $hGraphics ) Saves the current state (transformations, clipping region, and quality settings) of a Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsScaleTransform ( $hGraphics, $fScaleX, $fScaleY [, $iOrder = 0] ) Updates a Graphics object's world transformation matrix with the product of itself and a scaling matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetClipPath ( $hGraphics, $hPath [, $iCombineMode = 0] ) Updates the clipping region of this Graphics object to a region that is the combination of itself and the region specified by a graphics path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetClipRect ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $iCombineMode = 0] ) Updates the clipping region of a Graphics object to a region that is the combination of itself and a rectangle (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetClipRegion ( $hGraphics, $hRegion [, $iCombineMode = 0] ) Updates the clipping region of a Graphics object to a region that is the combination of itself and the region specified by a Region object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetCompositingMode ( $hGraphics, $iCompositionMode ) Sets the compositing mode of a Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetCompositingQuality ( $hGraphics, $iCompositionQuality ) Sets the compositing quality of a Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetInterpolationMode ( $hGraphics, $iInterpolationMode ) Sets the interpolation mode of a Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetPixelOffsetMode ( $hGraphics, $iPixelOffsetMode ) Sets the pixel offset mode of a Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetSmoothingMode ( $hGraphics, $iSmooth ) Legt die Renderqualitaet des Grafik-Objekts fest (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetTextRenderingHint ( $hGraphics, $iTextRenderingHint ) Sets the contrast value of a Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsSetTransform ( $hGraphics, $hMatrix ) Setzt die Transformation fuer ein Grafik-Objekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsTransformPoints ( $hGraphics, ByRef $aPoints [, $iCoordSpaceTo = 0 [, $iCoordSpaceFrom = 1]] ) Converts an array of points from one coordinate space to another (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_GraphicsTranslateTransform ( $hGraphics, $nDX, $nDY [, $iOrder = 0] ) Updates a Graphics object's world transformation matrix with the product of itself and a translation matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_HatchBrushCreate ( [$iHatchStyle = 0 [, $iARGBForeground = 0xFFFFFFFF [, $iARGBBackground = 0xFFFFFFFF]]] ) Creates a HatchBrush object based on a hatch style, a foreground color, and a background color (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_HICONCreateFromBitmap ( $hBitmap ) Creates an icon handle from a bitmap object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageAttributesCreate (  ) Creates an ImageAttributes object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageAttributesDispose ( $hImageAttributes ) Releases an ImageAttributes object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageAttributesSetColorKeys ( $hImageAttributes [, $iColorAdjustType = 0 [, $bEnable = False [, $iARGBLow = 0 [, $iARGBHigh = 0]]]] ) Sets or clears the color key (transparency range) for a specified category (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageAttributesSetColorMatrix ( $hImageAttributes [, $iColorAdjustType = 0 [, $bEnable = False [, $tClrMatrix = 0 [, $tGrayMatrix = 0 [, $iColorMatrixFlags = 0]]]]] ) Sets or clears the color- and grayscale-adjustment matrices for a specified category (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageAttributesSetRemapTable ( $hImageAttributes [, $aColorMap = 0 [, $iColorAdjustType = 0 [, $bEnable = True]]] ) Sets or clears the color-remap table for a specified category (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageAttributesSetThreshold ( $hImageAttributes, $fThreshold [, $iColorAdjustType = $GDIP_COLORADJUSTTYPE_DEFAULT [, $bEnable = True]] ) Sets the threshold (transparency range) for a specified category (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageClone ( $hImage ) Creates a new image object by cloning from source image (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageDispose ( $hImage ) Gibt das Bild-Objekt frei (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetDimension ( $hImage ) Gets the width and height of an image which is supported by GDIPlus (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetFlags ( $hImage ) Gibt eine Aufzaehlung von Pixeldatenattributen zurueck, die in einem Bild enthalten sind (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetFrameCount ( $hImage, $sDimensionID ) Gets the number of frames in a specified dimension of an Image object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetGraphicsContext ( $hImage ) Ermittelt den Grafikkontext des Bildes (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetHeight ( $hImage ) Ermittelt die Bildhoehe (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetHorizontalResolution ( $hImage ) Gibt die horizontale Aufloesung in DPI (Punkte pro Zoll) eines Bildes zurueck (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetPixelFormat ( $hImage ) Gibt das Pixelformat eines Bildes zurueck: Anzahl Bits pro Pixel, Alpha Kanaele, RGB, Graustufen, indizierte Farbtabelle etc (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetPropertyIdList ( $hImage ) Gets a list of the property identifiers used in the meta data of an image object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetPropertyItem ( $hImage, $iPropID ) Gets a specified property item (piece of meta data) from an Image object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetRawFormat ( $hImage ) Gibt zu einem Bild die GUID des Dateiformats und den Namen des Imageformats zurueck (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetThumbnail ( $hImage [, $iWidth = 0 [, $iHeight = 0 [, $bKeepRatio = True [, $hCallback = Null [, $hCallbackData = Null]]]]] ) Gets a thumbnail image from this Image object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetType ( $hImage ) Gibt den Typ (Bitmap oder Metadatei) eines Bildes zurueck (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetVerticalResolution ( $hImage ) Gibt die vertikale Aufloesung in DPI (Punkte pro Zoll) eines Bildes zurueck (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageGetWidth ( $hImage ) Ermittelt die Bildbreite (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageLoadFromFile ( $sFileName ) Erstellt ein Bild-Objekt basierend auf einer Datei (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageLoadFromStream ( $pStream ) Creates an Image object based on a stream (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageResize ( $hImage, $iNewWidth, $iNewHeight [, $iInterpolationMode = $GDIP_INTERPOLATIONMODE_HIGHQUALITYBICUBIC] ) Resize an image to a new given size (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageRotateFlip ( $hImage, $iRotateFlipType ) Rotates and flips an image (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageSaveAdd ( $hImage, $tParams ) Adds a frame to a file or stream specified in a previous call to the _GDIPlus_ImageSaveToFileEx or _GDIPlus_ImageSaveToStream functions (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageSaveAddImage ( $hImage, $hImageNew, $tParams ) Adds a frame to a file or stream specified in a previous call to the _GDIPlus_ImageSaveToFileEx or _GDIPlus_ImageSaveToStream functions (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageSaveToFile ( $hImage, $sFileName ) Speichert ein Bild in einer Datei (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageSaveToFileEx ( $hImage, $sFileName, $sEncoder [, $tParams = 0] ) Speichert ein Bild in eine Datei (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageSaveToStream ( $hImage, $pStream, $tEncoder [, $tParams = 0] ) Saves an Image object to a stream (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageScale ( $hImage, $iScaleW, $iScaleH [, $iInterpolationMode = $GDIP_INTERPOLATIONMODE_HIGHQUALITYBICUBIC] ) Scales an image by a given factor (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ImageSelectActiveFrame ( $hImage, $sDimensionID, $iFrameIndex ) Selects a frame in an image object specified by a dimension and an index (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushCreate ( $nX1, $nY1, $nX2, $nY2, $iARGBClr1, $iARGBClr2 [, $iWrapMode = 0] ) Creates a LinearGradientBrush object from a set of boundary points and boundary colors (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushCreateFromRect ( $tRECTF, $iARGBClr1, $iARGBClr2 [, $iGradientMode = 0 [, $iWrapMode = 0]] ) Creates a LinearGradientBrush object from a rectangle and boundary colors (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushCreateFromRectWithAngle ( $tRECTF, $iARGBClr1, $iARGBClr2, $fAngle [, $bIsAngleScalable = True [, $iWrapMode = 0]] ) Creates a LinearGradientBrush object from a rectangle, boundary colors and angle of direction (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushGetColors ( $hLineGradientBrush ) Gets the starting color and ending color of a linear gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushGetRect ( $hLineGradientBrush ) Gets the rectangle that defines the boundaries of a linear gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushMultiplyTransform ( $hLineGradientBrush, $hMatrix [, $iOrder = 0] ) Updates a brush's transformation matrix with the product of itself and another matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushResetTransform ( $hLineGradientBrush ) Resets the transformation matrix of a linear gradient brush to the identity matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetBlend ( $hLineGradientBrush, $aBlends ) Sets the blend factors and the blend positions of a linear gradient brush to create a custom blend (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetColors ( $hLineGradientBrush, $iARGBStart, $iARGBEnd ) Sets the starting color and ending color of a linear gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetGammaCorrection ( $hLineGradientBrush [, $bUseGammaCorrection = True] ) Specifies whether gamma correction is enabled for a linear gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetLinearBlend ( $hLineGradientBrush, $fFocus [, $fScale = 1] ) Sets the blend shape of a linear gradient brush to create a custom blend based on a triangular shape (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetPresetBlend ( $hLineGradientBrush, $aInterpolations ) Sets the colors to be interpolated for a linear gradient brush and their corresponding blend positions (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetSigmaBlend ( $hLineGradientBrush, $fFocus [, $fScale = 1] ) Sets the blend shape of a linear gradient brush to create a custom blend based on a bell-shaped curve (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_LineBrushSetTransform ( $hLineGradientBrush, $hMatrix ) Sets the transformation matrix of a linear gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixClone ( $hMatrix ) Clones a Matrix object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixCreate (  ) Erstellt und initialisiert ein Matrix Objekt, das die Identitaetsmatrix repraesentiert (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixCreate2 ( [$nM11 = 1 [, $nM12 = 1 [, $nM21 = 1 [, $nM22 = 1 [, $nDX = 0 [, $nDY = 0]]]]]] ) Creates and initializes a Matrix object based on six numbers that define an affine transformation (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixDispose ( $hMatrix ) Gibt ein Matrix Objekt frei (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixGetElements ( $hMatrix ) Gets the elements of a matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixInvert ( $hMatrix ) Replaces the elements of a matrix with the elements of its inverse (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixMultiply ( $hMatrix1, $hMatrix2 [, $iOrder = 0] ) Updates a matrix with the product of itself and another matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixRotate ( $hMatrix, $fAngle [, $bAppend = False] ) Aktualisiert eine Matrix mit dem Produkt aus sich selbst und einer Rotationsmatrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixScale ( $hMatrix, $fScaleX, $fScaleY [, $bOrder = False] ) Berechnet den Inhalt eines Matrix-Objekts als Produkt aus sich selbst und einer Skalierungsmatrix neu (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixSetElements ( $hMatrix [, $nM11 = 1 [, $nM12 = 0 [, $nM21 = 0 [, $nM22 = 1 [, $nDX = 0 [, $nDY = 0]]]]]] ) Sets the elements of a matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixShear ( $hMatrix, $fShearX, $fShearY [, $iOrder = 0] ) Updates a matrix with the product of itself and another matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixTransformPoints ( $hMatrix, ByRef $aPoints ) Multiplies each point in an array by a matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_MatrixTranslate ( $hMatrix, $fOffsetX, $fOffsetY [, $bAppend = False] ) Berechnet den Inhalt eines Matrix-Objekts als Produkt aus sich selbst und einer Translationsmatrix neu (Anmerkung: Verschiebung des Inhalts des Matrix) (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PaletteInitialize ( $iEntries [, $iPaletteType = $GDIP_PaletteTypeOptimal [, $iOptimalColors = 0 [, $bUseTransparentColor = True [, $hBitmap = Null]]]] ) Initializes a standard, optimal, or custom color palette (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ParamAdd ( ByRef $tParams, $sGUID, $iNbOfValues, $iType, $pValues ) Fuegt einen Wert zu einer Encoder-Parameter-Liste hinzu (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ParamInit ( $iCount ) Weist eine leere Encoder Parameter Liste zu (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_ParamSize (  ) Get an encoder parameter size (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddArc ( $hPath, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle ) Adds an elliptical arc to the current figure of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddBezier ( $hPath, $nX1, $nY1, $nX2, $nY2, $nX3, $nY3, $nX4, $nY4 ) Adds a bezier spline to the current figure of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddClosedCurve ( $hPath, $aPoints ) Adds a closed cardinal spline to a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddClosedCurve2 ( $hPath, $aPoints [, $nTension = 0.5] ) Adds a closed cardinal spline to a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddCurve ( $hPath, $aPoints ) Adds a cardinal spline to the current figure of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddCurve2 ( $hPath, $aPoints [, $nTension = 0.5] ) Adds a cardinal spline to the current figure of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddCurve3 ( $hPath, $aPoints, $iOffset, $iNumOfSegments [, $nTension = 0.5] ) Adds a cardinal spline to the current figure of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddEllipse ( $hPath, $nX, $nY, $nWidth, $nHeight ) Adds an ellipse to the current figure a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddLine ( $hPath, $nX1, $nY1, $nX2, $nY2 ) Adds a line to the current figure of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddLine2 ( $hPath, $aPoints ) Adds a sequence of lines to the current figure of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddPath ( $hPath1, $hPath2 [, $bConnect = True] ) Adds a path to another path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddPie ( $hPath, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle ) Adds a pie to a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddPolygon ( $hPath, $aPoints ) Adds a polygon to a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddRectangle ( $hPath, $nX, $nY, $nWidth, $nHeight ) Adds a rectangle to a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathAddString ( $hPath, $sString, $tLayout, $hFamily [, $iStyle = 0 [, $fSize = 8.5 [, $hFormat = 0]]] ) Adds the outline of a string to a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushCreate ( $aPoints [, $iWrapMode = 0] ) Creates a PathGradientBrush object based on an array of points and initializes the wrap mode of the brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushCreateFromPath ( $hPath ) Creates a PathGradientBrush object based on a GraphicsPath object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushGetCenterPoint ( $hPathGradientBrush ) Gets the center point of a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushGetFocusScales ( $hPathGradientBrush ) Gets the focus scales of a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushGetPointCount ( $hPathGradientBrush ) Gets the number of points in the array of points that defines a brush's boundary path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushGetRect ( $hPathGradientBrush ) Gets the smallest rectangle that encloses the boundary path of a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushGetWrapMode ( $hPathGradientBrush ) Gets the wrap mode currently set for a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushMultiplyTransform ( $hPathGradientBrush, $hMatrix [, $iOrder = 0] ) Updates a brush's transformation matrix with the product of itself and another matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushResetTransform ( $hPathGradientBrush ) Resets the transformation matrix of a path gradient brush to the identity matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetBlend ( $hPathGradientBrush, $aBlends ) Sets the blend factors and the blend positions of a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetCenterColor ( $hPathGradientBrush, $iARGB ) Sets the color of the center point of a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetCenterPoint ( $hPathGradientBrush, $nX, $nY ) Sets the center point of a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetFocusScales ( $hPathGradientBrush, $fScaleX, $fScaleY ) Sets the focus scales of a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetGammaCorrection ( $hPathGradientBrush, $bUseGammaCorrection ) Specifies whether gamma correction is enabled for a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetLinearBlend ( $hPathGradientBrush, $fFocus [, $fScale = 1] ) Sets the blend shape of a path gradient brush to create a custom blend based on a triangular shape (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetPresetBlend ( $hPathGradientBrush, $aInterpolations ) Sets the preset colors and the blend positions of a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetSigmaBlend ( $hPathGradientBrush, $fFocus [, $fScale = 1] ) Sets the blend shape of a path gradient brush to create a custom blend based on a bell-shaped curve (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetSurroundColor ( $hPathGradientBrush, $iARGB ) Sets the surround color for a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetSurroundColorsWithCount ( $hPathGradientBrush, $aColors ) Sets the surround colors currently specified for a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetTransform ( $hPathGradientBrush, $hMatrix ) Sets the transformation matrix of a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathBrushSetWrapMode ( $hPathGradientBrush, $iWrapMode ) Sets the wrap mode of a path gradient brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathClone ( $hPath ) Clones a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathCloseFigure ( $hPath ) Closes the current figure of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathCreate ( [$iFillMode = 0] ) Creates a GraphicsPath object and initializes the fill mode (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathCreate2 ( $aPathData [, $iFillMode = 0] ) Creates a GraphicsPath object based on an array of points, an array of types, and a fill mode (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathDispose ( $hPath ) Releases a GraphicsPath object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathFlatten ( $hPath [, $fFlatness = 0.25 [, $hMatrix = 0]] ) Applies a transformation to a path and converts each curve in the path to a sequence of connected lines (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathGetData ( $hPath ) Gets an array of points and types from a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathGetFillMode ( $hPath ) Gets the fill mode of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathGetLastPoint ( $hPath ) Gets the ending point of the last figure in a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathGetPointCount ( $hPath ) Gets the number of points in a path's array of data points (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathGetPoints ( $hPath ) Gets an array of points from a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathGetWorldBounds ( $hPath [, $hMatrix = 0 [, $hPen = 0]] ) Gets the bounding rectangle for a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathIsOutlineVisiblePoint ( $hPath, $nX, $nY [, $hPen = 0 [, $hGraphics = 0]] ) Determines whether a specified point touches the outline of a path with the specified Graphics and Pen (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathIsVisiblePoint ( $hPath, $nX, $nY [, $hGraphics = 0] ) Determines whether a specified point lies in the area that is filled when a path is filled by a specified Graphics object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathIterCreate ( $hPath ) Creates a new GraphicsPathIterator object and associates it with a GraphicsPath object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathIterDispose ( $hPathIter ) Releases a GraphicsPathIterator object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathIterGetSubpathCount ( $hPathIter ) Gets the number of subpaths (also called figures) in the path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathIterNextMarkerPath ( $hPathIter, $hPath ) Gets the next marker-delimited section of an iterator's associated path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathIterNextSubpathPath ( $hPathIter, $hPath ) Gets the next figure (subpath) from an iterator's associated path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathIterRewind ( $hPathIter ) Rewinds an iterator to the beginning of its associated path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathReset ( $hPath ) Empties a path and sets the fill mode to alternate (0) (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathReverse ( $hPath ) Reverses the order of the points that define a path's lines and curves (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathSetFillMode ( $hPath, $iFillMode ) Sets the fill mode of a path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathSetMarker ( $hPath ) Designates the last point in a path as a marker point (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathStartFigure ( $hPath ) Starts a new figure without closing the current figure. Subsequent points added to a path are added to the new figure (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathTransform ( $hPath, $hMatrix ) Multiplies each of a path's data points by a specified matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathWarp ( $hPath, $hMatrix, $aPoints, $nX, $nY, $nWidth, $nHeight [, $iWarpMode = 0 [, $fFlatness = 0.25]] ) Applies a warp transformation to a path. The function also flattens (converts to a sequence of straight lines) the path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathWiden ( $hPath, $hPen [, $hMatrix = 0 [, $fFlatness = 0.25]] ) Replaces a path with curves that enclose the area that is filled when the path is drawn by a specified pen. The function also flattens the path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PathWindingModeOutline ( $hPath [, $hMatrix = 0 [, $fFlatness = 0.25]] ) Transforms and flattens a path, and then converts the path's data points so that they represent only the outline of the path (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenCreate ( [$iARGB = 0xFF000000 [, $nWidth = 1 [, $iUnit = 2]]] ) Erzeugt ein Zeichenstift Objekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenCreate2 ( $hBrush [, $nWidth = 1 [, $iUnit = 2]] ) Creates a Pen object that uses the attributes of a brush (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenDispose ( $hPen ) Loescht das Zeichenstift-Objekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenGetAlignment ( $hPen ) Ermittelt die Ausrichtung des Zeichenstifts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenGetColor ( $hPen ) Ermittelt die Farbe des Zeichenstifts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenGetCustomEndCap ( $hPen ) Ermittelt die benutzerdefinierte Endkappe fuer den Zeichenstift (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenGetDashCap ( $hPen ) Ermittelt den Stil der Strich-Endkappe des Zeichenstiftes (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenGetDashStyle ( $hPen ) Ermittelt den Linien-Stil des Zeichenstifts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenGetEndCap ( $hPen ) Ermittelt die Endkappe des Zeichenstifts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenGetMiterLimit ( $hPen ) Gets the miter length currently set for a Pen object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenGetWidth ( $hPen ) Ermittelt die Breite des Zeichenstifts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenResetTransform ( $hPen ) Resets the world transformation matrix of a Pen object to the identity matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenRotateTransform ( $hPen, $fAngle [, $iOrder = 0] ) Updates the world transformation matrix of a Pen object with the product of itself and a rotation matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenScaleTransform ( $hPen, $fScaleX, $fScaleY [, $iOrder = 0] ) Updates the world transformation matrix of a pen object with the product of itself and a scaling matrix (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetAlignment ( $hPen [, $iAlignment = 0] ) Setzt die Ausrichtung des Zeichenstifts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetColor ( $hPen, $iARGB ) Setzt die Farbe des Zeichenstifts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetCompound ( $hPen, $aCompounds ) Sets the compound array for a Pen object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetCustomEndCap ( $hPen, $hEndCap ) Setzt die benutzerdefinierte Endkappe fuer den Zeichenstift (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetDashCap ( $hPen [, $iDash = 0] ) Setzt den Stil der Strich-Endkappe des Zeichenstiftes (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetDashStyle ( $hPen [, $iStyle = 0] ) Setzt den Stil der Linie (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetEndCap ( $hPen, $iEndCap ) Setzt die Endkappe des Zeichenstifts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetLineCap ( $hPen, $iStartCap, $iEndCap, $iDashCap ) Sets the cap styles for the start, end, and dashes in a line drawn with the pen (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetLineJoin ( $hPen, $iLineJoin ) Sets the line join for a Pen object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetMiterLimit ( $hPen, $fMiterLimit ) Sets the miter limit of a Pen object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetStartCap ( $hPen, $iLineCap ) Sets the start cap for a Pen object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetTransform ( $hPen, $hMatrix ) Sets the world transformation of a pen object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_PenSetWidth ( $hPen, $fWidth ) Setzt die Breite des Zeichenstifts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RectFCreate ( [$nX = 0 [, $nY = 0 [, $nWidth = 0 [, $nHeight = 0]]]] ) Erstellt eine $tagGDIPRECTF Struktur (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionClone ( $hRegion ) Clones a Region object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionCombinePath ( $hRegion, $hPath [, $iCombineMode = 2] ) Updates a region to the portion of itself that intersects the specified path's interior (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionCombineRect ( $hRegion, $nX, $nY, $nWidth, $nHeight [, $iCombineMode = 2] ) Updates a region to the portion of itself that intersects the specified rectangle's interior (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionCombineRegion ( $hRegionDst, $hRegionSrc [, $iCombineMode = 2] ) Updates a region to the portion of itself that intersects another region (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionCreate (  ) Creates a region that is infinite (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionCreateFromPath ( $hPath ) Creates a region that is defined by a path object and has a fill mode that is contained in the path object (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionCreateFromRect ( $nX, $nY, $nWidth, $nHeight ) Creates a region that is defined by a rectangle (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionDispose ( $hRegion ) Gibt ein Regionobjekt frei (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionGetBounds ( $hRegion, $hGraphics ) Gibt ein Rechteck zurueck welches eine Region umschliesst (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionGetHRgn ( $hRegion [, $hGraphics = 0] ) Erzeugt eine GDI Region von einem GDI+ Regionsobjekt (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionSetEmpty ( $hRegion ) Updates a region to an empty region. In other words, the region occupies no space on the display device (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionSetInfinite ( $hRegion ) Updates a region to an infinite region (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionTransform ( $hRegion, $hMatrix ) Transformiert eien Region indem ihre jeweiligen Datenpunkte mit einer angegebenen Matrix multipliziert werden. (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_RegionTranslate ( $hRegion, $nDX, $nDY ) Verschiebt eine Region um eine angegebene Strecke in horizontale und vertikale Richtung (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_Shutdown (  ) Gibt die durch Microsoft Windows GDI+ verwendeten Ressourcen wieder frei (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_Startup ( [$sGDIPDLL = Default [, $bRetDllHandle = False]] ) Initialisiert (startet) Microsoft Windows GDI+ (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_StringFormatCreate ( [$iFormat = 0 [, $iLangID = 0]] ) Erstellt ein String-Format-Objekt  (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_StringFormatDispose ( $hFormat ) Ein String-Formatobjekt freigeben (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_StringFormatGetMeasurableCharacterRangeCount ( $hStringFormat ) Gibt die Anzahl der messbaren Zeichenbereiche, welche im StringFormat-Objekt gesetzt sind, zurueck. (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_StringFormatSetAlign ( $hStringFormat, $iFlag ) Setzt die Textausrichtung eines Stringformatobjekts (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_StringFormatSetLineAlign ( $hStringFormat, $iStringAlign ) Setzt die Zeilenausrichtung eines StringFormat-Objektes in Relation zu dem Ursprung des Layout-Rechtecks (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_StringFormatSetMeasurableCharacterRanges ( $hStringFormat, $aRanges ) Setzt eine Serie an Zeichenbereichen fuer ein StringFormat-Objekt welche, wenn sie in einem String enthalten sind, gemessen werden koennen. (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_TextureCreate ( $hImage [, $iWrapMode = 0] ) Erzeugt ein TextureBrush-Objekt basierend auf ein Image und eines Wrappingmodus (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_TextureCreate2 ( $hImage, $nX, $nY, $nWidth, $nHeight [, $iWrapMode = 0] ) Erzeugt ein TextureBrush-Objekt basierend auf ein Image, eines Wrappingmodus und eines definierenden Rechtecks (benoetigt: #include <GDIPlus.au3>)
_GDIPlus_TextureCreateIA ( $hImage, $nX, $nY, $nWidth, $nHeight [, $pImageAttributes = 0] ) Erzeugt ein TextureBrush-Objekt basieren auf ein Image, einem definierenden Rechteck und einer Menge von Imageeigenschaften (benoetigt: #include <GDIPlus.au3>)
_GetIP (  ) Die oeffentliche IP-Adresse eines Netzwerk/Computers erhalten (benoetigt: #include <Inet.au3>)
_GUICtrlAVI_Close ( $hWnd ) Schliesst ein AVI Video (benoetigt: #include <GuiAVI.au3>)
_GUICtrlAVI_Create ( $hWnd [, $sFilePath = "" [, $iSubFileID = -1 [, $iX = 0 [, $iY = 0 [, $iWidth = 0 [, $iHeight = 0 [, $iStyle = 0x00000006 [, $iExStyle = 0x00000000]]]]]]]] ) Erstellt ein AVI-Control (benoetigt: #include <GuiAVI.au3>)
_GUICtrlAVI_Destroy ( ByRef $hWnd ) Loescht das Control (benoetigt: #include <GuiAVI.au3>)
_GUICtrlAVI_IsPlaying ( $hWnd ) Prueft, ob eine avi-Datei gerade abgespielt wird (benoetigt: #include <GuiAVI.au3>)
_GUICtrlAVI_Open ( $hWnd, $sFileName ) Oeffnet einen AVI Clip und zeigt dessen erster Frame in einem Animations-Control (benoetigt: #include <GuiAVI.au3>)
_GUICtrlAVI_OpenEx ( $hWnd, $sFileName, $iResourceID ) Oeffnet einen AVI Clip und zeigt dessen ersten Frame in einem Animations-Control (benoetigt: #include <GuiAVI.au3>)
_GUICtrlAVI_Play ( $hWnd [, $iFrom = 0 [, $iTo = -1 [, $iRepeat = -1]]] ) Spielt einen AVI-Clip in einem Animations-Control ab (benoetigt: #include <GuiAVI.au3>)
_GUICtrlAVI_Seek ( $hWnd, $iFrame ) Zeigt einen bestimmten Frame eines AVI Clips an (benoetigt: #include <GuiAVI.au3>)
_GUICtrlAVI_Show ( $hWnd, $iState ) Zeigt/Versteckt das AVI-Control (benoetigt: #include <GuiAVI.au3>)
_GUICtrlAVI_Stop ( $hWnd ) Stoppt einen spielenden AVI-Clip (benoetigt: #include <GuiAVI.au3>)
_GUICtrlButton_Click ( $hWnd ) Simuliert einen Klick auf einen Button (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_Create ( $hWnd, $sText, $iX, $iY, $iWidth, $iHeight [, $iStyle = -1 [, $iExStyle = -1]] ) Erstellt ein Button-Control (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_Destroy ( ByRef $hWnd ) Loescht ein Button-Control (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_Enable ( $hWnd [, $bEnable = True] ) Aktiviert oder deaktiviert die Eingabe per Maus oder Tastatur in dem festgelegten Button (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetCheck ( $hWnd ) Ermittelt den Status, ob ein Radiobutton oder eine Checkbox markiert ist (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetFocus ( $hWnd ) Ermittelt, ob der Button den Fokus der Tastatur besitzt (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetIdealSize ( $hWnd ) Ermittelt die optimale Groesse des Buttons, damit dessen Text und Bild am besten passen, wenn eine Imagelist vorhanden ist (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetImage ( $hWnd ) Ermittelt ein Handle zu dem Bild (Icon oder Bitmap), welches dem Button zugewiesen ist (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetImageList ( $hWnd ) Ermittelt ein Array, welches eine Imagelist fuer die jeweiligen Button-Controls enthaelt (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetNote ( $hWnd ) Ermittelt den Text der Notiz, der mit einem Befehlszeilen-Button verbunden ist (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetNoteLength ( $hWnd ) Ermittelt die Laenge der Textnotiz, welche in der Beschreibung fuer einen Befehlszeilen-Button dargestellt werden koennte (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetSplitInfo ( $hWnd ) Ermittelt Informationen fuer ein "Split"-Button-Control (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetState ( $hWnd ) Ermittelt den Status eines Buttons oder einer Checkbox (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetText ( $hWnd ) Ermittelt den Text eines Buttons (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_GetTextMargin ( $hWnd ) Ermittelt die benoetigten Raender um Text in einem Button-Control zu zeichnen (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetCheck ( $hWnd [, $iState = $BST_CHECKED] ) Setzt den markierten Status eines Radiobuttons oder einer Checkbox (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetDontClick ( $hWnd [, $bState = True] ) Setzt den Status des $BST_DONTCLICK Flags eines Buttons (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetFocus ( $hWnd [, $bFocus = True] ) Setzt den Tastatur-Fokus fuer den festgelegten Button (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetImage ( $hWnd, $sImageFile [, $iIconID = -1 [, $bLarge = False]] ) Weist einem Button ein Bild zu (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetImageList ( $hWnd, $hImage [, $iAlign = 0 [, $iLeft = 1 [, $iTop = 1 [, $iRight = 1 [, $iBottom = 1]]]]] ) Verknuepft eine Imagelist zu einem Button-Control (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetNote ( $hWnd, $sNote ) Setzt den Text der Notiz, der mit einem Befehlszeilen-Button verbunden ist (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetShield ( $hWnd [, $bRequired = True] ) Setzt den benoetigten Status fuer einen festgelegten Button oder Befehlszeilen-Button um ein erhoeht versetztes Icon darzustellen (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetSize ( $hWnd, $iWidth, $iHeight ) Legt die Groesse des Buttons fest (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetSplitInfo ( $hWnd [, $himlGlyph = -1 [, $iSplitStyle = $BCSS_ALIGNLEFT [, $iWidth = 0 [, $iHeight = 0]]]] ) Setzt Informationen fuer ein "Split Button" Control (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetState ( $hWnd [, $bHighlighted = True] ) Setzt den "hervorgehoben" Status eines Buttons. Der "hervorgehoben" Status gibt an, ob der Button hervorgehoben ist, als haette der Benutzer ihn gedrueckt (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetStyle ( $hWnd, $iStyle ) Setzt den Stil des Buttons (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetText ( $hWnd, $sText ) Setzt den Text eines Buttons (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_SetTextMargin ( $hWnd [, $iLeft = 1 [, $iTop = 1 [, $iRight = 1 [, $iBottom = 1]]]] ) Setzt den Rand, welcher verwendet wird, um den Text in einem Button-Control zu zeichnen (benoetigt: #include <GuiButton.au3>)
_GUICtrlButton_Show ( $hWnd [, $bShow = True] ) Zeigt bzw. versteckt einen Button (benoetigt: #include <GuiButton.au3>)
_GUICtrlComboBox_AddDir ( $hWnd, $sFilePath [, $iAttributes = 0 [, $bBrackets = True]] ) Fuegt den Namen von Verzeichnissen und Dateien hinzu (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_AddString ( $hWnd, $sText ) Fuegt einen String hinzu (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_AutoComplete ( $hWnd ) Autovervollstaendigt das Input-Control einer ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_BeginUpdate ( $hWnd ) Deaktiviert die Aktualisierung des Control-Items bis _EndUpdate aufgerufen wird (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 120 [, $iStyle = 0x00200042 [, $iExStyle = 0x00000000]]]] ) Erstellt ein ComboBox Control (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_DeleteString ( $hWnd, $iIndex ) Loescht einen String (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_Destroy ( ByRef $hWnd ) Loescht das Control (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_EndUpdate ( $hWnd ) Aktiviert wieder die Aktualisierung des Control-Items, welches durch die BeginUpdate Funktion deaktiviert wurde (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_FindString ( $hWnd, $sText [, $iIndex = -1] ) Sucht einen String (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_FindStringExact ( $hWnd, $sText [, $iIndex = -1] ) Sucht einen exakten String (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetComboBoxInfo ( $hWnd, ByRef $tInfo ) Ermittelt Informationen ueber die festgelegte ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCount ( $hWnd ) Ermittelt die Anzahl von Items (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCueBanner ( $hWnd ) Ermittelt den "cue banner" Text, welcher in einem Edit-Control einer Combobox angezeigt wird (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCurSel ( $hWnd ) Ermittelt den Index des momentan markierten Items (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedControlRect ( $hWnd ) Ermittelt die Bildschirmkoordinaten einer Combobox in seinem aufgeklappten Zustand (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedControlRectEx ( $hWnd ) Ermittelt die Bildschirmkoordinaten einer Combobox in seinem aufgeklappten Zustand (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedState ( $hWnd ) Ermittelt, ob die ListBox der ComboBox aufgeklappt ist (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedWidth ( $hWnd ) Ermittelt die minimal erlaubte Breite der ListBox der ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetEditSel ( $hWnd ) Ermittelt die Position des Startzeichens und des Endzeichens der aktuellen Markierung in einem Edit-Control einer ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetEditText ( $hWnd ) Ermittelt den Text des Edit-Controls der ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetExtendedUI ( $hWnd ) Ermittelt, ob die Standardbenutzeroberflaeche oder die erweiterte Benutzeroberflaeche verwendet wird (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetHorizontalExtent ( $hWnd ) Ermittelt die Breite in Pixel, wie lange die ComboBox horizontal gescrollt werden kann (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetItemHeight ( $hWnd [, $iIndex = -1] ) Ermittelt die Hoehe der Items der Liste oder des Markierungsfeldes in einer ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLBText ( $hWnd, $iIndex, ByRef $sText ) Ermittelt einen String von einer Liste einer ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLBTextLen ( $hWnd, $iIndex ) Ermittelt die Laenge eines Strings (Zeichenanzahl) in der Liste der ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetList ( $hWnd ) Ermittelt alle Items von einem Listenabschnitt eines ComboBox Controls (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetListArray ( $hWnd ) Ermittelt alle Items eines ComboBox Controls (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocale ( $hWnd ) Ermittelt das aktuelle Gebietsschema (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleCountry ( $hWnd ) Ermittelt den aktuellen Laendercode (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleLang ( $hWnd ) Ermittelt die aktuelle Sprache (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocalePrimLang ( $hWnd ) Extrahiert die primaere Sprach-ID von einer Sprach-ID (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleSubLang ( $hWnd ) Extrahiert die Sub-Sprachen-ID von einer Sprachen-ID (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetMinVisible ( $hWnd ) Ermittelt die minimale Anzahl von sichtbaren Items in der Dropdown Liste der ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetTopIndex ( $hWnd ) Ermittelt den 0-basierenden Index des ersten sichtbaren Items in der ListBox der ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_InitStorage ( $hWnd, $iNum, $iBytes ) Weist den ListBox Items Speicher zu (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_InsertString ( $hWnd, $sText [, $iIndex = -1] ) Fuegt einen String ein (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_LimitText ( $hWnd [, $iLimit = 0] ) Begrenzt die Laenge des Textes, den der Benutzer in das Edit-Control der ComboBox eingeben kann (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ReplaceEditSel ( $hWnd, $sText ) Ersetzt den markierten Text des Input-Controls (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ResetContent ( $hWnd ) Loescht alle Items in einer ListBox und einem Edit-Control einer ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SelectString ( $hWnd, $sText [, $iIndex = -1] ) Durchsucht die ListBox der ComboBox nach einem Item, welches mit den Zeichen des festgelegten Strings beginnt (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetCueBanner ( $hWnd, $sText ) Setzt den "cue banner" Text, welcher in einem Edit-Control einer Combobox angezeigt wird (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetCurSel ( $hWnd [, $iIndex = -1] ) Waehlt einen String in der Liste einer ComboBox aus (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetDroppedWidth ( $hWnd, $iWidth ) Setzt die maximale erlaubte Breite der ListBox der ComboBox in Pixel (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetEditSel ( $hWnd, $iStart, $iStop ) Waehlt Zeichen im Edit-Control einer ComboBox aus (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetEditText ( $hWnd, $sText ) Schreibt einen Text in das Input-Control der ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetExtendedUI ( $hWnd [, $bExtended = False] ) Waehlt entweder die Standardbenutzeroberflaeche oder die erweiterte Benutzeroberflaeche aus (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetHorizontalExtent ( $hWnd, $iWidth ) Setzt die Breite in Pixel, wie weit die ComboBox horizontal gescrollt werden kann (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetItemHeight ( $hWnd, $iHeight [, $iComponent = -1] ) Setzt die Hoehe der Listitems oder des Markierungsfeld in einer ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetMinVisible ( $hWnd, $iMinimum ) Setzt die minimale Anzahl von sichtbaren Items in der Dropdown Liste der ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetTopIndex ( $hWnd, $iIndex ) Stellt sicher, dass ein bestimmtes Item in der ListBox der ComboBox sichtbar ist (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ShowDropDown ( $hWnd [, $bShow = False] ) Zeigt oder versteckt die ListBox der ComboBox (benoetigt: #include <GuiComboBox.au3>)
_GUICtrlComboBoxEx_AddDir ( $hWnd, $sFilePath [, $iAttributes = 0 [, $bBrackets = True]] ) Fuegt den Namen von Verzeichnissen und Dateien hinzu (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_AddString ( $hWnd, $sText [, $iImage = -1 [, $iSelectedImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]] ) Fuegt einen String hinzu (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_BeginUpdate ( $hWnd ) Deaktiviert die Aktualisierung des Control-Items bis _EndUpdate aufgerufen wird (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 200 [, $iStyle = 0x00200002 [, $iExStyle = 0x00000000]]]] ) Erstellt ein ComboBoxEx-Control (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_CreateSolidBitMap ( $hWnd, $iColor, $iWidth, $iHeight ) Erstellt ein vollfarbiges Farbbitmap (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_DeleteString ( $hWnd, $iIndex ) Loescht ein Item von einem ComboBoxEx Control (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_Destroy ( ByRef $hWnd ) Loescht das Control (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_EndUpdate ( $hWnd ) Aktiviert wieder die Aktualisierung des Control-Items, welches durch die BeginUpdate Funktion deaktiviert wurde (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_FindStringExact ( $hWnd, $sText [, $iIndex = -1] ) Sucht einen exakten String (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetComboBoxInfo ( $hWnd, ByRef $tInfo ) Ermittelt Informationen ueber die festgelegte ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetComboControl ( $hWnd ) Ermittelt das Handle des Unter-Combobox Controls (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetCount ( $hWnd ) Ermittelt die Anzahl der Items (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetCurSel ( $hWnd ) Ermittelt den Index des momentan markierten Items (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedControlRect ( $hWnd ) Ermittelt die Bildschirmkoordinaten einer Combobox in seinem aufgeklappten Zustand (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedControlRectEx ( $hWnd ) Ermittelt die Bildschirmkoordinaten einer Combobox in seinem aufgeklappten Zustand (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedState ( $hWnd ) Ermittelt, ob die ListBox der ComboBox aufgeklappt ist (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedWidth ( $hWnd ) Ermittelt die Breite der aufgeklappten ListBox einer ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditControl ( $hWnd ) Ermittelt das Handle des Edit-Control Abschnitts eines ComboBoxEx Control (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditSel ( $hWnd ) Ermittelt die Position des Startzeichens und des Endzeichens der aktuellen Markierung in dem Edit-Control einer ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditText ( $hWnd ) Ermittelt den Text von dem Edit-Control einer ComboBoxEx (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetExtendedStyle ( $hWnd ) Ermittelt die erweiterten Stile die in einem ComboBoxEx-Control verwendet werden (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetExtendedUI ( $hWnd ) Ermittelt, ob die Standardbenutzeroberflaeche oder die erweiterte Benutzeroberflaeche verwendet wird (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetImageList ( $hWnd ) Ermittelt das Handle zu einer Imagelist, die zu einem ComboBoxEx-Control gehoert (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItem ( $hWnd, $iIndex ) Ermittelt Attribute eines Items (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemEx ( $hWnd, ByRef $tItem ) Ermittelt manche oder alle Attribute eines Items (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemHeight ( $hWnd [, $iComponent = -1] ) Ermittelt die Hoehe der Items der Liste oder des Markierungsfeldes in einer ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemImage ( $hWnd, $iIndex ) Ermittelt den Index des Itemicons (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemIndent ( $hWnd, $iIndex ) Ermittelt die Anzahl von Bilderbreiten die das Item eingerueckt ist (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemOverlayImage ( $hWnd, $iIndex ) Ermittelt den Index des Icons in der Imagelist des Controls, welches angezeigt wird, wenn man mit der Maus ueber das Item faehrt (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemParam ( $hWnd, $iIndex ) Ermittelt den anwendungsspezifischen Wert fuer das Item (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemSelectedImage ( $hWnd, $iIndex ) Ermittelt den Index des Icons in der Imagelist des Controls, welches angezeigt wird, wenn das Item markiert ist (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemText ( $hWnd, $iIndex, ByRef $sText ) Ermittelt einen String von einer Liste der ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemTextLen ( $hWnd, $iIndex ) Ermittelt die Laenge eines Strings in Zeichen in der Liste einer ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetList ( $hWnd ) Ermittelt alle Items von einem Listenabschnitt eines ComboBox Controls (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetListArray ( $hWnd ) Ermittelt alle Items eines ComboBox Controls (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocale ( $hWnd ) Ermittelt das aktuelle Gebietsschema (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleCountry ( $hWnd ) Ermittelt den aktuellen Laendercode (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleLang ( $hWnd ) Ermittelt die aktuelle Sprach-ID (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocalePrimLang ( $hWnd ) Extrahiert die primaere Sprach-ID von einer Sprach-ID (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleSubLang ( $hWnd ) Extrahiert die Sub-Sprachen-ID von einer Sprachen-ID (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetMinVisible ( $hWnd ) Ermittelt die minimale Anzahl von sichtbaren Items in der Dropdown Liste der ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetTopIndex ( $hWnd ) Ermittelt den 0-basierenden Index des ersten sichtbaren Items in dem ListBox Abschnitt einer ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetUnicode ( $hWnd ) Ermittelt, ob das Control Unicode verwendet (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_InitStorage ( $hWnd, $iNum, $iBytes ) Weist den ListBox Items Speicher zu (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_InsertString ( $hWnd, $sText [, $iIndex = -1 [, $iImage = -1 [, $iSelectedImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]]] ) Fuegt ein neues Item in das Control ein (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_LimitText ( $hWnd [, $iLimit = 0] ) Begrenzt die Laenge des Textes, welchen der Benutzer in das Edit-Control der ComboBox eingeben kann (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ReplaceEditSel ( $hWnd, $sText ) Ersetzt den markierten Text in der EditBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ResetContent ( $hWnd ) Entfernt alle Items (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetCurSel ( $hWnd [, $iIndex = -1] ) Waehlt einen String in der Liste einer ComboBox aus (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetDroppedWidth ( $hWnd, $iWidth ) Setzt die Breite der aufgeklappten ListBox der ComboBox in Pixel (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetEditSel ( $hWnd, $iStart, $iStop ) Waehlt Zeichen im Edit-Control einer ComboBox aus (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetEditText ( $hWnd, $sText ) Setzt den Text eines Edit-Controls der ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetExtendedStyle ( $hWnd, $iExStyle [, $iExMask = 0] ) Setzt den erweiterten Stile innerhalb eines ComboBoxEx Controls (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetExtendedUI ( $hWnd [, $bExtended = False] ) Waehlt entweder die Standardbenutzeroberflaeche oder die erweiterte Benutzeroberflaeche aus (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetImageList ( $hWnd, $hHandle ) Setzt eine Imagelist fuer ein ComboBoxEx Control (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItem ( $hWnd, $sText [, $iIndex = 0 [, $iImage = -1 [, $iSelectedImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]]] ) Setzt einige oder alle Attribute eines Items (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemEx ( $hWnd, ByRef $tItem ) Setzt manche oder alle Attribute eines Items (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemHeight ( $hWnd, $iComponent, $iHeight ) Setzt die Hoehe der Listitems oder des Markierungsfeld in einer ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemImage ( $hWnd, $iIndex, $iImage ) Setzt den Index des Itemicons in der Imagelist des Controls (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemIndent ( $hWnd, $iIndex, $iIndent ) Setzt die Anzahl von Bilderbreiten die das Item eingerueckt werden soll (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemOverlayImage ( $hWnd, $iIndex, $iImage ) Setzt den Index des Icons in der Imagelist des Controls, welches angezeigt werden soll, wenn man mit der Maus ueber das Item faehrt (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemParam ( $hWnd, $iIndex, $iParam ) Setzt den speziellen Wert fuer das Item (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemSelectedImage ( $hWnd, $iIndex, $iImage ) Setzt den Index des Icons in der Imagelist des Controls, welches angezeigt werden soll, wenn das Item markiert wird (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetMinVisible ( $hWnd, $iMinimum ) Setzt die minimale Anzahl von sichtbaren Items in der Dropdown Liste der ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetTopIndex ( $hWnd, $iIndex ) Stellt sicher, dass ein bestimmtes Item sichtbar in der ListBox der ComboBox ist (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetUnicode ( $hWnd [, $bUnicode = True] ) Legt fest, ob das Control Unicode verwenden soll (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ShowDropDown ( $hWnd [, $bShow = False] ) Zeigt oder versteckt die ListBox der ComboBox (benoetigt: #include <GuiComboBoxEx.au3>)
_GUICtrlDTP_Create ( $hWnd, $iX, $iY [, $iWidth = 120 [, $iHeight = 21 [, $iStyle = 0x00000000 [, $iExStyle = 0x00000000]]]] ) Erstellt ein DTP Control (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_Destroy ( ByRef $hWnd ) Loescht das Control (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMCColor ( $hWnd, $iIndex ) Ermittelt die festgelegte Farbe (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMCFont ( $hWnd ) Ermittelt das Handle der Schrift des Monatskalenders (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMonthCal ( $hWnd ) Ermittelt das Handle zu dem Unterpunkt des MonthCal-Control (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetRange ( $hWnd ) Ermittelt die aktuelle minimale und maximale Systemzeit (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetRangeEx ( $hWnd ) Ermittelt die aktuelle minimale und maximale Systemzeit (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetSystemTime ( $hWnd ) Ermittelt das aktuelle markierte Datum und Zeit (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetSystemTimeEx ( $hWnd ) Ermittelt das aktuell ausgewaehlte Datum und die Zeit (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetFormat ( $hWnd, $sFormat ) Setzt die Anzeige basierend auf einem gegebenen Formatstrings (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetMCColor ( $hWnd, $iIndex, $iColor ) Setzt die Farbe fuer einen festgelegten Abschnitt des Monatskalenders (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetMCFont ( $hWnd, $hFont [, $bRedraw = True] ) Setzt die Schrift des Monatskalenders (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetRange ( $hWnd, ByRef $aRange ) Setzt den aktuellen minimalen und maximalen zugelassenen Bereich fuer die Systemzeit (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetRangeEx ( $hWnd, ByRef $tRange ) Setzt die aktuelle minimal und maximal erlaubte Systemzeit (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetSystemTime ( $hWnd, ByRef $aDate ) Setzt das aktuell markierte Datum und Zeit (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetSystemTimeEx ( $hWnd, ByRef $tDate [, $bFlag = False] ) Setzt das aktuell ausgewaehlte Datum und die Zeit (benoetigt: #include <GuiDateTimePicker.au3>)
_GUICtrlEdit_AppendText ( $hWnd, $sText ) Text anhaengen/anfuegen (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_BeginUpdate ( $hWnd ) Deaktiviert die Aktualisierung des Control-Items bis _GUICtrlEdit_EndUpdate aufgerufen wird (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_CanUndo ( $hWnd ) Ermittelt, ob es irgendwelche Aktionen in einem Edit-Control gibt, die rueckgaengig gemacht werden koennen (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_CharFromPos ( $hWnd, $iX, $iY ) Ermittelt Informationen ueber das Zeichen, welches sich am naechsten zu einem festgelegten Punkt im Client-Bereich des Fensters befindet (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x003010C4 [, $iExStyle = 0x00000200]]]] ) Erstellt ein Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_Destroy ( ByRef $hWnd ) Loescht das Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_EmptyUndoBuffer ( $hWnd ) Setzt das Undo-Flag eines Edit-Controls zurueck (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_EndUpdate ( $hWnd ) Aktiviert wieder die Aktualisierung des Control-Items, welches durch die _GUICtrlEdit_BeginUpdate Funktion deaktiviert wurde (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_Find ( $hWnd [, $bReplace = False] ) Laesst einen Suchdialog auftauchen (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_FmtLines ( $hWnd [, $bSoftBreak = False] ) Entscheidet, ob ein Edit-Control "soft line-break"-Zeichen (weiche Zeilenumbrueche) enthaelt (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetCueBanner ( $hWnd ) Gibt den Cue-Banner Text zurueck welcher im Edit-Control angezeigt wird (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetFirstVisibleLine ( $hWnd ) Ermittelt den 0-basierenden Index der obersten sichtbaren Zeile in einem mehrzeilen Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLimitText ( $hWnd ) Ermittelt das aktuelle Textlimit fuer ein Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLine ( $hWnd, $iLine ) Ermittelt eine Zeile mit Text von einem Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLineCount ( $hWnd ) Ermittelt die Anzahl von Zeilen (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetMargins ( $hWnd ) Ermittelt die Breite des linken und rechten Randes (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetModify ( $hWnd ) Ermittelt den Status des Aenderungflags eines Edit-Controls (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetPasswordChar ( $hWnd ) Ermittelt das Passwortzeichen, welches in einem Edit-Control dargestellt wird, wenn der Benutzer einen Text eingibt (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetRECT ( $hWnd ) Ermittelt das formatierte Rechteck eines Edit-Controls (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetRECTEx ( $hWnd ) Ermittelt das formatierte Rechteck eines Edit-Controls (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetSel ( $hWnd ) Ermittelt die Position des Startzeichens und des Endzeichens der aktuellen Markierung (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetText ( $hWnd ) Liest den Text eines Edit-Controls aus (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_GetTextLen ( $hWnd ) Ermittelt die Laenge des gesamten Textes in einem Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_HideBalloonTip ( $hWnd ) Versteckt jeden Balloontip, der mit einem Edit-Control verbunden ist (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_InsertText ( $hWnd, $sText [, $iIndex = -1] ) Fuegt Text ein (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_LineFromChar ( $hWnd [, $iIndex = -1] ) Ermittelt den Index der Zeile, welche den festgelegten Zeichenindex enthaelt (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_LineIndex ( $hWnd [, $iIndex = -1] ) Ermittelt den Index des ersten Zeichens in der festgelegten Zeile (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_LineLength ( $hWnd [, $iIndex = -1] ) Ermittelt die Zeichenlaenge einer Zeile (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_LineScroll ( $hWnd, $iHoriz, $iVert ) Scrollt den Text (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_PosFromChar ( $hWnd, $iIndex ) Ermittelt die Fensterkoordinaten von einem festgelegten Zeichen in einem Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_ReplaceSel ( $hWnd, $sText [, $bUndo = True] ) Ersetzt die aktuelle Auswahl (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_Scroll ( $hWnd, $iDirection ) Scrollt den Text vertikal (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetCueBanner ( $hWnd, $sText [, $bOnFocus = False] ) Setzt den Cue-Banner Text welches im Edit-Control angezeigt wird (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetLimitText ( $hWnd, $iLimit ) Setzt das Textlimit (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetMargins ( $hWnd [, $iMargin = 0x1 [, $iLeft = 0xFFFF [, $iRight = 0xFFFF]]] ) Setzt die Breite des linken und rechten Randes (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetModify ( $hWnd, $bModified ) Setzt oder loescht das Aenderungsflag (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetPasswordChar ( $hWnd [, $sDisplayChar = "0"] ) Setzt oder entfernt das Passwortzeichen fuer ein Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetReadOnly ( $hWnd, $bReadOnly ) Setzt oder entfernt den schreibgeschuetzt Stil ($ES_READONLY) (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECT ( $hWnd, $aRect ) Setzt das formatierte Rechteck von einem mehrzeiligen Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECTEx ( $hWnd, $tRect ) Setzt das formatierte Rechteck eines Mehrzeilen-Edit-Controls (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECTNP ( $hWnd, $aRect ) Setzt das formatierte Rechteck in einem Mehrzeilen Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRectNPEx ( $hWnd, $tRect ) Setzt das formatierte Rechteck in einem Mehrzeilen Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetSel ( $hWnd, $iStart, $iEnd ) Waehlt einen Bereich von Zeichen aus (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetTabStops ( $hWnd, $aTabStops ) Setzt Tabstopps (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_SetText ( $hWnd, $sText ) Schreibt einen Text in ein Edit-Control (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_ShowBalloonTip ( $hWnd, $sTitle, $sText, $iIcon ) Zeigt einen Balloontip, der mit einem Edit-Control verbunden ist (benoetigt: #include <GuiEdit.au3>)
_GUICtrlEdit_Undo ( $hWnd ) Macht die letzte Edit-Control Operation in der Undo-Liste des Controls rueckgaengig (benoetigt: #include <GuiEdit.au3>)
_GUICtrlHeader_AddItem ( $hWnd, $sText [, $iWidth = 50 [, $iAlign = 0 [, $iImage = -1 [, $bOnRight = False]]]] ) Fuegt ein neues Header-Item hinzu (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_ClearFilter ( $hWnd, $iIndex ) Bereinigt den Filter (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_ClearFilterAll ( $hWnd ) Bereinigt alle Filter (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_Create ( $hWnd [, $iStyle = 0x00000046] ) Erstellt ein Header-Control (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_CreateDragImage ( $hWnd, $iIndex ) Erstellt eine halbtransparente Version eines Itembildes zur Verwendung als ziehendes Bild (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_DeleteItem ( $hWnd, $iIndex ) Loescht ein Item des Headers (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_Destroy ( ByRef $hWnd ) Loescht das Header-Control (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_EditFilter ( $hWnd, $iIndex [, $bDiscard = True] ) Startet das Aendern in dem festgelegten Filter (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetBitmapMargin ( $hWnd ) Ermittelt die Breite des Bitmaprandes (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetImageList ( $hWnd ) Ermittelt das Handle der Imagelist (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItem ( $hWnd, $iIndex, ByRef $tItem ) Ermittelt Informationen ueber ein Item (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemAlign ( $hWnd, $iIndex ) Ermittelt die Ausrichtung des Itemtextes (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemBitmap ( $hWnd, $iIndex ) Ermittelt das Item Bitmap Handle (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemCount ( $hWnd ) Ermittelt die Anzahl von Items (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemDisplay ( $hWnd, $iIndex ) Gibt die Anzeigeinformationen fuer das Item zurueck (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemFlags ( $hWnd, $iIndex ) Gibt die Item Flag Informationen zurueck (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemFormat ( $hWnd, $iIndex ) Gibt das Format eines Items zurueck (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemImage ( $hWnd, $iIndex ) Ermittelt den Index eines Bildes innerhalb der Imagelist (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemOrder ( $hWnd, $iIndex ) Ermittelt, an welcher Stelle in der Headerleiste das angegebene Item erscheint (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemParam ( $hWnd, $iIndex ) Ermittelt den Parameterwert eines Items (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemRect ( $hWnd, $iIndex ) Ermittelt das begrenzende Rechteck fuer ein festgelegtes Item (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemRectEx ( $hWnd, $iIndex ) Ermittelt das begrenzende Rechteck fuer ein festgelegtes Item (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemText ( $hWnd, $iIndex ) Ermittelt den Itemtext (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemWidth ( $hWnd, $iIndex ) Ermittelt die Breite des Items (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetOrderArray ( $hWnd ) Ermittelt die aktuelle Reihenfolge der Items in einem Header-Control (links nach rechts) (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_GetUnicodeFormat ( $hWnd ) Ermittelt das Unicode Zeichenformatflag fuer das Control (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_HitTest ( $hWnd, $iX, $iY ) Testet einen Punkt, um zu ermitteln, welches Item sich an dem festgelegten Punkt befindet (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_InsertItem ( $hWnd, $iIndex, $sText [, $iWidth = 50 [, $iAlign = 0 [, $iImage = -1 [, $bOnRight = False]]]] ) Fuegt ein neues Headeritem ein (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_Layout ( $hWnd, ByRef $tRect ) Ermittelt die korrekte Groesse und Position des Controls (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_OrderToIndex ( $hWnd, $iOrder ) Ermittelt den Index des Items an der angegebenen Position der Headerleiste (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetBitmapMargin ( $hWnd, $iWidth ) Setzt die Breite des Randes eines Bitmaps in Pixel (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetFilterChangeTimeout ( $hWnd, $iTimeOut ) Setzt das Timeoutintervall fuer das aendern des Filters (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetHotDivider ( $hWnd, $iFlag, $iInputValue ) Aendert die "hot divider" Farbe (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetImageList ( $hWnd, $hImage ) Weist eine Imagelist zu (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItem ( $hWnd, $iIndex, ByRef $tItem ) Setzt Informationen ueber ein Item (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemAlign ( $hWnd, $iIndex, $iAlign ) Setzt die Ausrichtung eines Itemtextes (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemBitmap ( $hWnd, $iIndex, $hBitmap ) Setzt das Bitmap einer bestimmten Spalte (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemDisplay ( $hWnd, $iIndex, $iDisplay ) Gibt die Itemanzeige Informationen zurueck (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemFlags ( $hWnd, $iIndex, $iFlags ) Setzt die Item Flag Informationen (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemFormat ( $hWnd, $iIndex, $iFormat ) Setzt das Format eines Items (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemImage ( $hWnd, $iIndex, $iImage ) Setzt den Index eines Bildes innerhalb der Imagelist (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemOrder ( $hWnd, $iIndex, $iOrder ) Setzt die Reihenfolge in der das Item erscheint (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemParam ( $hWnd, $iIndex, $iParam ) Setzt den Parameterwert des Items (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemText ( $hWnd, $iIndex, $sText ) Setzt den Text des Items (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemWidth ( $hWnd, $iIndex, $iWidth ) Legt die Breite des Items fest (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetOrderArray ( $hWnd, ByRef $aOrder ) Setzt die aktuelle Reihenfolge der Items (links nach rechts) (benoetigt: #include <GuiHeader.au3>)
_GUICtrlHeader_SetUnicodeFormat ( $hWnd, $bUnicode ) Setzt das Unicode Zeichenformatflag fuer das Control (benoetigt: #include <GuiHeader.au3>)
_GUICtrlIpAddress_ClearAddress ( $hWnd ) Loescht den Inhalt des IP-Address-Controls (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Create ( $hWnd, $iX, $iY [, $iWidth = 125 [, $iHeight = 25 [, $iStyles = 0x00000000 [, $iExstyles = 0x00000000]]]] ) Erzeugt ein GUI zur Eingabe einer IP-Adresse (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Destroy ( ByRef $hWnd ) Loescht das IP-Adressen-Control (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Get ( $hWnd ) Ermittelt die Adresse des IP-Address-Control (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_GetArray ( $hWnd ) Ermittelt die Adresse des IP-Address-Controls (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_GetEx ( $hWnd ) Erneuert die Adresse des IP-Address-Control (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_IsBlank ( $hWnd ) Ermittelt, ob alle Felder im IP-Address-Control leer sind (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Set ( $hWnd, $sAddress ) Setzt die Adresse des IP-Address-Control (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetArray ( $hWnd, $aAddress ) Setzt die Adresse des IP-Address-Controls (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetEx ( $hWnd, $tIP ) Setzt die Adresse des IP-Address-Controls (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetFocus ( $hWnd, $iIndex ) Setzt den Tastaturfokus auf ein spezielles Feld im IP-Address-Control (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetFont ( $hWnd [, $sFaceName = "Arial" [, $iFontSize = 12 [, $iFontWeight = 400 [, $bFontItalic = False]]]] ) Setzt die Schrift des Controls (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetRange ( $hWnd, $iIndex [, $iLowRange = 0 [, $iHighRange = 255]] ) Legt den Min- und Maxwert fest, der in 4 Bereiche, des IP-AdressControl eingetragen werden kann (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlIpAddress_ShowHide ( $hWnd, $iState ) Blendet das IP-Address-Control ein oder aus (benoetigt: #include <GuiIPAddress.au3>)
_GUICtrlListBox_AddFile ( $hWnd, $sFilePath ) Fuegt einen festgelegten Dateinamen hinzu, welcher eine Verzeichnisauflistung enthaelt (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_AddString ( $hWnd, $sText ) Fuegt einen String hinzu (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_BeginUpdate ( $hWnd ) Deaktiviert die Aktualisierung des Control-Items bis _EndUpdate aufgerufen wird (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_ClickItem ( $hWnd, $iIndex [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 0]]]] ) Klick ein Item an (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 200 [, $iStyle = 0x00B00002 [, $iExStyle = 0x00000200]]]] ) Erstellt ein Listbox-Control (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_DeleteString ( $hWnd, $iIndex ) Loescht einen String (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_Destroy ( ByRef $hWnd ) Loescht das Control (ListBox) (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_Dir ( $hWnd, $sFilePath [, $iAttributes = 0 [, $bBrackets = True]] ) Fuegt die Namen von Verzeichnissen und Dateien hinzu (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_EndUpdate ( $hWnd ) Aktiviert wieder die Aktualisierung des Control-Items, welches durch die BeginUpdate Funktion deaktiviert wurde (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_FindInText ( $hWnd, $sText [, $iStart = -1 [, $bWrapOK = True]] ) Sucht nach einem Item, welches den bestimmten Text irgendwo in seinem Text enthaelt (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_FindString ( $hWnd, $sText [, $bExact = False] ) Sucht einen String (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetAnchorIndex ( $hWnd ) Ermittelt den Index des Anker-Item (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCaretIndex ( $hWnd ) Gibt den Index des Item zurueck, welches den Fokus besitzt (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCount ( $hWnd ) Ermittelt die Anzahl an Items (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCurSel ( $hWnd ) Ermittelt den Index des aktuell markierten Items (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetHorizontalExtent ( $hWnd ) Ermittelt von einer Listbox die scrollbare Breite (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemData ( $hWnd, $iIndex ) Ermittelt den anwendungsspezifische Wert welcher mit einem Item verbunden ist (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemHeight ( $hWnd ) Ermittelt die Hoehe eines Items (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemRect ( $hWnd, $iIndex ) Ermittelt das Rechteck welches ein Item begrenzt (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemRectEx ( $hWnd, $iIndex ) Ermittelt das Rechteck, welches ein Item begrenzt (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetListBoxInfo ( $hWnd ) Ermittelt die Anzahl der Items pro Reihe in einer speziellen List-Box (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocale ( $hWnd ) Ermittelt das aktuelle Gebietsschema (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleCountry ( $hWnd ) Ermittelt den aktuellen Laendercode (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleLang ( $hWnd ) Ermittelt die aktuelle Sprachidentifikation   (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocalePrimLang ( $hWnd ) Trennt die primaere Sprach-ID von der Sprach-ID (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleSubLang ( $hWnd ) Trennt die Untersprach-ID von der Sprach-ID  (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSel ( $hWnd, $iIndex ) Ermittelt den "markier-Status" eines Items (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelCount ( $hWnd ) Ermittelt die Anzahl von markierten Items (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelItems ( $hWnd ) Fuellt einen Puffer mit einem Array der markierten Items (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelItemsText ( $hWnd ) Ermittelt den Text des ausgewaehlten Items (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetText ( $hWnd, $iIndex ) Ermittelt den Text des festgelegten Indexes (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetTextLen ( $hWnd, $iIndex ) Ermittelt die Laenge eines Strings in einer Listbox (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_GetTopIndex ( $hWnd ) Ermittelt den Index des ersten sichtbaren Items in einer Liste (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_InitStorage ( $hWnd, $iItems, $iBytes ) Diese Nachricht belegt Speicher fuer die zu speichernden Items (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_InsertString ( $hWnd, $sText [, $iIndex = -1] ) Fuegt einen String in die Liste ein (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_ItemFromPoint ( $hWnd, $iX, $iY ) Ermittelt den 0-basierenden Index des Items, das den angegebenen Koordinaten am naechsten liegt (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_ReplaceString ( $hWnd, $iIndex, $sText ) Ersetzt den Text eines Items (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_ResetContent ( $hWnd ) Loescht alle Items aus einer Listbox (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SelectString ( $hWnd, $sText [, $iIndex = -1] ) Sucht nach einem Item, welches mit dem festgelegten String beginnt (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SelItemRange ( $hWnd, $iFirst, $iLast [, $bSelect = True] ) Waehlt eines oder mehrere aufeinanderfolgende Items einer Mehrfachauswahl-Listbox aus (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SelItemRangeEx ( $hWnd, $iFirst, $iLast ) Waehlt eines oder mehrere aufeinanderfolgende Items einer Mehrfachauswahl-Listbox aus (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetAnchorIndex ( $hWnd, $iIndex ) Setzt das erste Item von dem eine Mehrfachauswahl beginnt (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetCaretIndex ( $hWnd, $iIndex [, $bPartial = False] ) Setzt das Fokus-Rechteck zum Item an dem festgelegten Index in einer Mehrfachauswahl-Listbox (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetColumnWidth ( $hWnd, $iWidth ) Setzt die Breite aller Spalten in Pixel (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetCurSel ( $hWnd, $iIndex ) Waehlt einen String aus und scrollt so, falls notwendig, dass dieser sichtbar ist (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetHorizontalExtent ( $hWnd, $iWidth ) Setzt die Breite in Pixel, in der eine Listbox horizontal gescrollt werden kann (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetItemData ( $hWnd, $iIndex, $iValue ) Setzt den Wert, welcher mit dem festgelegten Item verbunden ist (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetItemHeight ( $hWnd, $iHeight [, $iIndex = 0] ) Setzt die Hoehe der Items in Pixel (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetLocale ( $hWnd, $iLocal ) Bestimmt das korrekte Gebietsschema (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetSel ( $hWnd [, $iIndex = -1 [, $iSelect = -1]] ) Markiert einen oder mehrere Strings in einer Mehrfachauswahl-Listbox (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetTabStops ( $hWnd, $aTabStops ) Setzt die Tabstop Positionen (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SetTopIndex ( $hWnd, $iIndex ) Garantiert das ein bestimmtes Item in einer List-Box sichtbar ist (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_Sort ( $hWnd ) Sortiert eine Listbox, wenn diese den Stil $LBS_SORT besitzt (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_SwapString ( $hWnd, $iIndexA, $iIndexB ) Vertauscht den Text zweier Items bei den festgelegten Indizes (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListBox_UpdateHScroll ( $hWnd ) Aktualisiert die horizontale Scrollbar basierend auf dem laengsten String (benoetigt: #include <GuiListBox.au3>)
_GUICtrlListView_AddArray ( $hWnd, ByRef $aItems ) Fuegt ein Item aus einem Array dem Control hinzu (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_AddColumn ( $hWnd, $sText [, $iWidth = 50 [, $iAlign = -1 [, $iImage = -1 [, $bOnRight = False]]]] ) Fuegt dem Control eine neue Spalte hinzu (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_AddItem ( $hWnd, $sText [, $iImage = -1 [, $iParam = 0]] ) Fuegt ein neues Item an das Ende der Liste hinzu (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_AddSubItem ( $hWnd, $iIndex, $sText, $iSubItem [, $iImage = -1] ) Fuegt dem Control ein neues Subitem hinzu (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewHeight ( $hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]] ) Berechnet die ungefaehre Hoehe, welche fuer die Darstellung einer gegebenen Anzahl von Items notwendig ist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewRect ( $hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]] ) Berechnet die ungefaehre Groesse, welche fuer die Darstellung einer gegebenen Anzahl von Items notwendig ist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewWidth ( $hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]] ) Berechnet die ungefaehre Breite, welche fuer die Darstellung einer gegebenen Anzahl von Items notwendig ist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_Arrange ( $hWnd [, $iArrange = 0] ) Ordnet Items in der "Icon" Ansicht an (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_BeginUpdate ( $hWnd ) Deaktiviert die Aktualisierung des Control-Items bis _GUICtrlListView_EndUpdate() aufgerufen wird (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_CancelEditLabel ( $hWnd ) Beendet das Editieren des Itemtextes (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_ClickItem ( $hWnd, $iIndex [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] ) Klickt ein Item an (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_CopyItems ( $hWnd_Source, $hWnd_Destination [, $bDelFlag = False] ) Kopiert Items zwischen 2 ListView-Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_Create ( $hWnd, $sHeaderText, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x0000000D [, $iExStyle = 0x00000000 [, $bCoInit = False]]]]] ) Erstellt ein ListView-Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_CreateDragImage ( $hWnd, $iIndex ) Erstellt eine Imagelist fuer das bestimmte Item (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_CreateSolidBitMap ( $hWnd, $iColor, $iWidth, $iHeight ) Erstellt ein vollfarbiges Bitmap (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_DeleteAllItems ( $hWnd ) Loescht alle Items eines ListView-Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_DeleteColumn ( $hWnd, $iCol ) Loescht eine Spalte eines ListView-Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_DeleteItem ( $hWnd, $iIndex ) Loescht ein Item eines ListView-Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_DeleteItemsSelected ( $hWnd ) Loescht das/die markierte(n) Item(s) (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_Destroy ( ByRef $hWnd ) Loescht das ListView-Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_DrawDragImage ( ByRef $hWnd, ByRef $aDrag ) Zeichnet das zu ziehende Bild (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_EditLabel ( $hWnd, $iIndex ) Setzt den Cursor so, dass ein festgelegter Item Text geaendert werden kann (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_EnableGroupView ( $hWnd [, $bEnable = True] ) Aktiviert oder deaktiviert, ob die Items als Gruppe angezeigt werden sollen (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_EndUpdate ( $hWnd ) Aktiviert wieder die Aktualisierung des Control-Items, welches durch die _GUICtrlListView_BeginUpdate() Funktion deaktiviert wurde (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_EnsureVisible ( $hWnd, $iIndex [, $bPartialOK = False] ) Stellt sicher, dass ein Listview Item entweder ganz oder teilweise sichtbar ist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_FindInText ( $hWnd, $sText [, $iStart = -1 [, $bWrapOK = True [, $bReverse = False]]] ) Sucht nach einem Item, welches den bestimmten Text irgendwo in seinem Text enthaelt (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_FindItem ( $hWnd, $iStart, ByRef $tFindInfo [, $sText = ""] ) Sucht ein Item mit den bestimmten Eigenschaften (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_FindNearest ( $hWnd, $iX, $iY [, $iDir = 0 [, $iStart = -1 [, $bWrapOK = True]]] ) Findet das Item, welches sich am naechsten bei der bestimmten Position befindet (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_FindParam ( $hWnd, $iParam [, $iStart = -1] ) Sucht nach einem Item mit dem bestimmten lParam (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_FindText ( $hWnd, $sText [, $iStart = -1 [, $bPartialOK = True [, $bWrapOK = True]]] ) Sucht nach einem Item mit dem bestimmten Text (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetBkColor ( $hWnd ) Ermittelt die Hintergrundfarbe eines ListView-Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetBkImage ( $hWnd ) Ermittelt das Hintergrundbild im Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetCallbackMask ( $hWnd ) Ermittelt die Callback-Maske fuer das Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetColumn ( $hWnd, $iIndex ) Ermittelt die Attribute einer Spalte (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnCount ( $hWnd ) Ermittelt die Anzahl der Spalten (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnOrder ( $hWnd ) Ermittelt die aktuelle Reihenfolge der Spalte (gelesen von links nach rechts) (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnOrderArray ( $hWnd ) Ermittelt die aktuelle Reihenfolge der Spalten (gelesen von links nach rechts) (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetColumnWidth ( $hWnd, $iCol ) Ermittelt die Breite einer Spalte in einem Bericht oder Listview (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetCounterPage ( $hWnd ) Ermittelt die Anzahl von Items, welche vertikal in das sichtbare Feld eingepasst werden koennen (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetEditControl ( $hWnd ) Ermittelt das Handle zu dem Aenderungscontrol, welches fuer das Aendern eines Itemtextes verwendet wird (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetExtendedListViewStyle ( $hWnd ) Ermittelt die aktuell verwendeten erweiterten Stile (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetFocusedGroup ( $hWnd ) Ermittelt die Gruppe, welche den Fokus besitzt (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupCount ( $hWnd ) Ermittelt die Anzahl von Gruppen (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupInfo ( $hWnd, $iGroupID ) Ermittelt Informationen einer Gruppe (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupInfoByIndex ( $hWnd, $iIndex ) Ermittelt Gruppeninformationen (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupRect ( $hWnd, $iGroupID [, $iGet = $LVGGR_GROUP] ) Ermittelt das Rechteck fuer die festgelegte Gruppe (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetGroupViewEnabled ( $hWnd ) Ermittelt, ob die Gruppenansicht aktiviert ist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetHeader ( $hWnd ) Ermittelt den Handle des Kopfes des Controls  (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetHotCursor ( $hWnd ) Ermittelt den HCURSOR Wert, welcher benutzt wird, wenn der Mauszeiger sich ueber einem Item befindet waehrend "hot tracking" aktiviert ist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetHotItem ( $hWnd ) Ermittelt den Index des "hot" Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetHoverTime ( $hWnd ) Ermittelt wie lange der Mauscursor ueber einem Item stehen bleiben muss, bevor dieses ausgewaehlt wird (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetImageList ( $hWnd, $iImageList ) Ermittelt das Handle zu einer Imagelist, welche fuer das Zeichnen von Listview Items verwendet wird (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetISearchString ( $hWnd ) Ermittelt den inkrementellen Suchstring des Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItem ( $hWnd, $iIndex [, $iSubItem = 0] ) Ermittelt die Attribute eines Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemChecked ( $hWnd, $iIndex ) Ermittelt den Status, ob das Listviewitem angehakt ist oder nicht (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemCount ( $hWnd ) Ermittelt die Anzahl von Items in einem ListView-Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemCut ( $hWnd, $iIndex ) Ermittelt, ob das Item markiert ist fuer eine Ausschneiden/Einfuegen Operation (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemDropHilited ( $hWnd, $iIndex ) Ermittelt, ob das Item markiert ist wie ein drag-and-drop Ziel (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemEx ( $hWnd, ByRef $tItem ) Ermittelt von manchen oder allen Items die Attribute (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemFocused ( $hWnd, $iIndex ) Ermittelt, ob das Item wie ein drag-and-drop Ziel hervorgehoben ist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemGroupID ( $hWnd, $iIndex ) Ermittelt die Gruppen-ID eines Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemImage ( $hWnd, $iIndex [, $iSubItem = 0] ) Ermittelt den Index des Icons eines (ListView-)Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemIndent ( $hWnd, $iIndex ) Ermittelt um wie viele Bildbreiten das Item eingerueckt ist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemParam ( $hWnd, $iIndex ) Ermittelt den anwendungsspezifischen Wert eines Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemPosition ( $hWnd, $iIndex ) Ermittelt die Position eines Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemPositionX ( $hWnd, $iIndex ) Ermittelt die X-Koordinate eines Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemPositionY ( $hWnd, $iIndex ) Ermittelt die Y-Koordinate eines Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemRect ( $hWnd, $iIndex [, $iPart = 3] ) Ermittelt das begrenzende Rechteck fuer das gesamte oder einen Teil des Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemRectEx ( $hWnd, $iIndex [, $iPart = 3] ) Ermittelt das begrenzende Rechteck fuer das gesamte oder einen Teil des Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSelected ( $hWnd, $iIndex ) Ermittelt, ob das Item ausgewaehlt ist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacing ( $hWnd [, $bSmall = False] ) Ermittelt den Abstand zwischen den Items in dem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacingX ( $hWnd [, $bSmall = False] ) Ermittelt den horizontalen Abstand zwischen den Items in dem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacingY ( $hWnd [, $bSmall = False] ) Ermittelt den vertikalen Abstand zwischen den Items in dem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemState ( $hWnd, $iIndex, $iMask ) Ermittelt den Status eines Listview Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemStateImage ( $hWnd, $iIndex ) Ermittelt das dargestellte Statusbild (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemText ( $hWnd, $iIndex [, $iSubItem = 0] ) Ermittelt den Text des Item oder Subitem (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemTextArray ( $hWnd [, $iItem = -1] ) Ermittelt den Inhalt der kompletten Zeile eines Listview Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetItemTextString ( $hWnd [, $iItem = -1] ) Listet die komplette Zeile eines Listview Items auf (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetNextItem ( $hWnd [, $iStart = -1 [, $iSearch = 0 [, $iState = 8]]] ) Sucht nach einem Item, welches die festgelegten Eigenschaften aufweist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetNumberOfWorkAreas ( $hWnd ) Ermittelt die Anzahl von Arbeitsflaechen in dem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetOrigin ( $hWnd ) Ermittelt den Ursprung der aktuellen Ansicht fuer das Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetOriginX ( $hWnd ) Ermittelt den Ursprung der aktuellen Ansicht fuer das Control (X-Koordinate) (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetOriginY ( $hWnd ) Ermittelt den Ursprung der aktuellen Ansicht fuer das Control (Y-Koordinate) (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetOutlineColor ( $hWnd ) Ermittelt die Randfarbe des Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectedColumn ( $hWnd ) Ermittelt den Index der markierten Spalte (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectedCount ( $hWnd ) Ermittelt die Anzahl der markierten Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectedIndices ( $hWnd [, $bArray = False] ) Ermittelt die Indizes der markierten Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetSelectionMark ( $hWnd ) Ermittelt die Markierung des Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetStringWidth ( $hWnd, $sString ) Ermittelt die Breite eines bestimmten Strings (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetSubItemRect ( $hWnd, $iIndex, $iSubItem [, $iPart = 0] ) Ermittelt Informationen ueber das begrenzende Rechteck eines Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetTextBkColor ( $hWnd ) Ermittelt die Texthintergrundfarbe des Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetTextColor ( $hWnd ) Ermittelt die Textfarbe eines Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetToolTips ( $hWnd ) Ermittelt den Handle des ToolTip-Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetTopIndex ( $hWnd ) Ermittelt den Index des obersten sichtbaren Items, wenn die Ansicht "Liste" oder "Report" aktiv ist (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetUnicodeFormat ( $hWnd ) Ermittelt das UNICODE Zeichen Format (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetView ( $hWnd ) Ermittelt die aktuelle Ansicht des Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetViewDetails ( $hWnd ) Ermittelt, ob sich der Ansichtsmodus im Detailmodus befindet (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetViewLarge ( $hWnd ) Ermittelt, ob sich die Ansicht im Modus "grosse Icons" befindet (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetViewList ( $hWnd ) Ermittelt, ob sich der Ansichtsmodus im Listenmodus befindet (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetViewRect ( $hWnd ) Ermittelt das begrenzende Rechteck aller Items in dem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetViewSmall ( $hWnd ) Ermittelt, ob sich der Ansichtsmodus im Modus "kleine Icons" befindet (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_GetViewTile ( $hWnd ) Ermittelt, ob sich der Ansichtsmodus im "Kachel" Modus befindet (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_HideColumn ( $hWnd, $iCol ) Versteckt eine Spalte (setzt die Spaltenbreite auf 0) (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_HitTest ( $hWnd [, $iX = -1 [, $iY = -1]] ) Ermittelt welches Item sich an der festgelegten Position befindet (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_InsertColumn ( $hWnd, $iIndex, $sText [, $iWidth = 50 [, $iAlign = -1 [, $iImage = -1 [, $bOnRight = False]]]] ) Fuegt dem Control eine neue Spalte hinzu (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_InsertGroup ( $hWnd, $iIndex, $iGroupID, $sHeader [, $iAlign = 0] ) Fuegt eine Gruppe hinzu (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_InsertItem ( $hWnd, $sText [, $iIndex = -1 [, $iImage = -1 [, $iParam = 0]]] ) Fuegt ein neues Item in das Control ein (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_JustifyColumn ( $hWnd, $iIndex [, $iAlign = -1] ) Setzt die Ausrichtung einer Spalte eines ListView-Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_MapIDToIndex ( $hWnd, $iID ) Bildet die ID eines Items als Index ab (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_MapIndexToID ( $hWnd, $iIndex ) Bildet den Index eines Items als ID ab (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_RedrawItems ( $hWnd, $iFirst, $iLast ) Bewegt das Control dazu, einen Bereich mit Items neu aufzubauen (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_RegisterSortCallBack ( $hWnd [, $vCompareType = 1 [, $bArrows = True [, $sPrivateCallBack = "__GUICtrlListView_Sort"]]] ) Registriert die "Simple Sort callback" Funktion (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_RemoveAllGroups ( $hWnd ) Entfernt alle Gruppen eines Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_RemoveGroup ( $hWnd, $iGroupID ) Entfernt eine Gruppe eines Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_Scroll ( $hWnd, $iDX, $iDY ) Scrollt den Inhalt eines Listviews (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetBkColor ( $hWnd, $iColor ) Setzt die Hintergrundfarbe des Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetBkImage ( $hWnd [, $sURL = "" [, $iStyle = 0 [, $iXOffset = 0 [, $iYOffset = 0]]]] ) Setzt das Hintergrundbild in dem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetCallBackMask ( $hWnd, $iMask ) Aendert die "Callback Mask" fuer das Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetColumn ( $hWnd, $iIndex, $sText [, $iWidth = -1 [, $iAlign = -1 [, $iImage = -1 [, $bOnRight = False]]]] ) Setzt die Attribute einer Spalte (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetColumnOrder ( $hWnd, $sOrder ) Setzt die Reihenfolge der Spalten. Angegeben von links nach rechts (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetColumnOrderArray ( $hWnd, $aOrder ) Setzt die links-nach-rechts Reihenfolge der Spalten in dem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetColumnWidth ( $hWnd, $iCol, $iWidth ) Aendert die Breite einer Spalte (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetExtendedListViewStyle ( $hWnd, $iExStyle [, $iExMask = 0] ) Setzt die erweiterten Stile (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetGroupInfo ( $hWnd, $iGroupID, $sHeader [, $iAlign = 0 [, $iState = $LVGS_NORMAL]] ) Setzt Informationen einer Gruppe (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetHotItem ( $hWnd, $iIndex ) Setzt das "hot" Item (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetHoverTime ( $hWnd, $iTime ) Bestimmt wie lange der Mauscursor ueber einem Item stehen bleiben muss, bevor dieses ausgewaehlt wird (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetIconSpacing ( $hWnd, $iCX, $iCY ) Setzt den Abstand zwischen Icons (nur fuer Ansicht "grosse Icons") (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetImageList ( $hWnd, $hHandle [, $iType = 0] ) Weist eine Imagelist einem Control zu (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItem ( $hWnd, $sText [, $iIndex = 0 [, $iSubItem = 0 [, $iImage = -1 [, $iParam = -1 [, $iIndent = -1]]]]] ) Setzt manche oder alle Attribute eines Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemChecked ( $hWnd, $iIndex [, $bCheck = True] ) Setzt den "markiert-Status" (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemCount ( $hWnd, $iItems ) Bringt das ListView-Control dazu, Speicher fuer eine festgelegte Anzahl von Items freizuhalten (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemCut ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob das Item fuer eine verschieben Operation markiert werden soll (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemDropHilited ( $hWnd, $iIndex [, $bEnabled = True] ) Bestimmt, ob das Item fuer eine Drag-and-Drop-Aktion markiert werden soll (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemEx ( $hWnd, ByRef $tItem ) Setzt manche oder alle Attribute eines Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemFocused ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob das Item den Fokus besitzt (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemGroupID ( $hWnd, $iIndex, $iGroupID ) Setzt die Gruppe-ID eines Items (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemImage ( $hWnd, $iIndex, $iImage [, $iSubItem = 0] ) Setzt den Index des Itemicons in der Imagelist des Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemIndent ( $hWnd, $iIndex, $iIndent ) Setzt die Anzahl von Bilderbreiten, die das Item eingerueckt werden soll (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemParam ( $hWnd, $iIndex, $iParam ) Setzt den Wert passend zum Item (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemPosition ( $hWnd, $iIndex, $iCX, $iCY ) Bewegt ein Item zu der festgelegten Position im Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemPosition32 ( $hWnd, $iIndex, $iCX, $iCY ) Bewegt ein Item zu der festgelegten Position im Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemSelected ( $hWnd, $iIndex [, $bSelected = True [, $bFocused = False]] ) Setzt fuer ein Item den Status "ausgewaehlt" (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemState ( $hWnd, $iIndex, $iState, $iStateMask ) Aendert den Status eines Items in dem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemStateImage ( $hWnd, $iIndex, $iImage ) Setzt das darzustellende Statusbild (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetItemText ( $hWnd, $iIndex, $sText [, $iSubItem = 0] ) Aendert den Text eines Items oder Subitems (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetOutlineColor ( $hWnd, $iColor ) Setzt die Farbe des Rands (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetSelectedColumn ( $hWnd, $iCol ) Setzt den Index der markierten Spalte (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetSelectionMark ( $hWnd, $iIndex ) Setzt die Markierung in einem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetTextBkColor ( $hWnd, $iColor ) Setzt die Hintergrundfarbe des Textes in dem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetTextColor ( $hWnd, $iColor ) Setzt die Farbe des Textes in dem Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetToolTips ( $hWnd, $hToolTip ) Setzt das ToolTip-Control welches das Control benutzen wird um ToolTips anzuzeigen (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetUnicodeFormat ( $hWnd, $bUnicode ) Setzt das UNICODE Zeichenformat fuer das Control (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetView ( $hWnd, $iView ) Setzt die Ansicht des Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SetWorkAreas ( $hWnd, $iLeft, $iTop, $iRight, $iBottom ) Erstellt eine Arbeitsflaeche innerhalb des Controls (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SimpleSort ( $hWnd, ByRef $vSortSense, $iCol [, $bToggleSense = True] ) Sortiert ein ListView-Control (begrenzt) (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SortItems ( $hWnd, $iCol ) Startet die Sortier-Callback Funktion und setzt den Pfeil in der Kopfzeile (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_SubItemHitTest ( $hWnd [, $iX = -1 [, $iY = -1]] ) Ermittelt, welches Listview Item oder Subitem sich an einer gegebenen Position befindet (benoetigt: #include <GuiListView.au3>)
_GUICtrlListView_UnRegisterSortCallBack ( $hWnd ) Deregistriert die Sortier-Callback Funktion (benoetigt: #include <GuiListView.au3>)
_GUICtrlMenu_AddMenuItem ( $hMenu, $sText [, $iCmdID = 0 [, $hSubMenu = 0]] ) Fuegt ein neues Menueitem an das Ende des Menues an (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_AppendMenu ( $hMenu, $iFlags, $iNewItem, $vNewItem ) Haengt ein neues Item an das Ende der festgelegten Menueleiste, Untermenue oder Shortcut Menue an (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_CalculatePopupWindowPosition ( $iX, $iY, $iWidth, $iHeight [, $iFlags = 0 [, $tExclude = 0]] ) Berechnet eine angemessene Pop-Up Fensterposition (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_CheckMenuItem ( $hMenu, $iItem [, $bCheck = True [, $bByPos = True]] ) Setzt den Status des "Anhakfeldes" des festgelegten Menueitems entweder auf angehakt oder leer (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_CheckRadioItem ( $hMenu, $iFirst, $iLast, $iCheck [, $bByPos = True] ) Markiert ein festgelegtes Menueitem und stellt es als Radioitem dar (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_CreateMenu ( [$iStyle = $MNS_CHECKORBMP] ) Erstellt ein Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_CreatePopup ( [$iStyle = $MNS_CHECKORBMP] ) Erstellt ein Dropdown Menue, Untermenue oder Shortcut Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_DeleteMenu ( $hMenu, $iItem [, $bByPos = True] ) Loescht ein Item von dem festgelegten Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_DestroyMenu ( $hMenu ) Loescht das festgelegte Menue und gibt den durch das Menue belegten Speichert wieder frei (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_DrawMenuBar ( $hWnd ) Baut die Menueleiste des festgelegten Fensters neu auf (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_EnableMenuItem ( $hMenu, $iItem [, $iState = 0 [, $bByPos = True]] ) Aktiviert, deaktiviert oder graut ein festgelegten Menueitem aus (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_FindItem ( $hMenu, $sText [, $bInStr = False [, $iStart = 0]] ) Ermittelt ein Menu-Item anhand seines Textes (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_FindParent ( $hMenu ) Ermittelt das Fenster zu dem ein Menue gehoert (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmp ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt das Bild des Items (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmpChecked ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt das angezeigte Bild des Items, wenn es ausgewaehlt ist.  (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmpUnchecked ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt das angezeigte Bild wenn das Item nicht ausgewaehlt ist.  (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemChecked ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt ob das Menueitem markiert ist (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemCount ( $hMenu ) Ermittelt die Anzahl von Items in dem festgelegten Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemData ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt den anwendungsspezifischen Wert, welcher mit dem Menueitem verbunden ist (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemDefault ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt, ob ein Menuepunkt den Standardstatus besitzt (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemDisabled ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt, ob das Menueitem deaktiviert ist (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemEnabled ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt, ob das Menueitem aktiviert ist (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemGrayed ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt, ob das Menueitem ausgegraut ist (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemHighlighted ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt, ob das Menueitem hervorgehoben ist (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemID ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt die ID des Menueitems (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemInfo ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt Informationen ueber ein Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemRect ( $hWnd, $hMenu, $iItem ) Ermittelt das begrenzende Rechteck fuer das festgelegte Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemRectEx ( $hWnd, $hMenu, $iItem ) Ermittelt das begrenzende Rechteck fuer das festgelegte Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemState ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt den Menueitem Status (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemStateEx ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt die Menueflags die mit dem festgelegten Menueitem verknuepft sind (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemSubMenu ( $hMenu, $iItem ) Ermittelt ein Untermenue, welches durch ein festgelegten Item aktiviert wird (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemText ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt den Text des festgelegten Menueitems (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetItemType ( $hMenu, $iItem [, $bByPos = True] ) Ermittelt den Menueitemtyp (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenu ( $hWnd ) Ermittelt das Handle des Menues, welches zu dem festgelegten Fenster gehoert (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuBackground ( $hMenu ) Ermittelt das Fuellmuster, welches fuer den Hintergrund des Menues verwendet wird (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuBarInfo ( $hWnd [, $iItem = 0 [, $iObject = 1]] ) Ermittelt Informationen ueber eine festgelegte Menueleiste (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuContextHelpID ( $hMenu ) Ermittelt die Kontext Hilfe ID (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuData ( $hMenu ) Ermittelt den anwendungsspezischen Wert (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuDefaultItem ( $hMenu [, $bByPos = True [, $iFlags = 0]] ) Ermittelt das Standard Menueitem auf dem festgelegten Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuHeight ( $hMenu ) Ermittelt die maximale Hoehe des Menues (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuInfo ( $hMenu ) Ermittelt Informationen ueber ein festgelegtes Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuStyle ( $hMenu ) Ermittelt die Stilinformationen fuer ein Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_GetSystemMenu ( $hWnd [, $bRevert = False] ) Erlaubt der Anwendung den Zugriff auf das Fenstermenue, um es zu kopieren und zu veraendern (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_InsertMenuItem ( $hMenu, $iIndex, $sText [, $iCmdID = 0 [, $hSubMenu = 0]] ) Fuegt ein neues Menueitem an der festgelegten Position ein (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_InsertMenuItemEx ( $hMenu, $iIndex, ByRef $tMenu [, $bByPos = True] ) Fuegt ein neues Menueitem an der festgelegten Position in ein Menue ein (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_IsMenu ( $hMenu ) Prueft, ob ein Handle ein Menue-Handle ist (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_LoadMenu ( $hInst, $sMenuName ) Laedt die angegebene Menueressource von der ausfuehrbaren Datei, welche mit der Instanz einer Anwendung verknuepft ist (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_MapAccelerator ( $hMenu, $sAccelKey ) Stellt eine Abkuerzungstaste (Tastenkombination die einen schnellen Zugriff auf Funktionen ermoeglicht) in deren Position des Menues dar (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_MenuItemFromPoint ( $hWnd, $hMenu [, $iX = -1 [, $iY = -1]] ) Ermittelt welches Menueitem sich an dem festgelegten Ort befindet (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_RemoveMenu ( $hMenu, $iItem [, $bByPos = True] ) Loescht ein Menueitem oder sondert ein Untermenue von dem festgelegten Menue ab (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBitmaps ( $hMenu, $iItem, $hChecked, $hUnChecked [, $bByPos = True] ) Verknuepft das festgelegte Bitmap mit einem Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmp ( $hMenu, $iItem, $hBitmap [, $bByPos = True] ) Setzt das Bitmap, welches fuer das Item angezeigt werden soll (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmpChecked ( $hMenu, $iItem, $hBitmap [, $bByPos = True] ) Setzt das Bitmap je nachdem, ob das Item ausgewaehlt ist (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmpUnchecked ( $hMenu, $iItem, $hBitmap [, $bByPos = True] ) Setzt das Bitmap welches dargestellt werden soll, wenn das Item nicht ausgewaehlt ist (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemChecked ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) Markiert ein Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemData ( $hMenu, $iItem, $iData [, $bByPos = True] ) Setzt einen anwendungsspezifischen Wert fuer ein Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemDefault ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) Setzt das Standardmenueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemDisabled ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) Deaktiviert ein Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemEnabled ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) Aktiviert ein Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemGrayed ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) Graut ein Menueitem aus (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemHighlighted ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] ) Hebt ein Menueitem hervor (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemID ( $hMenu, $iItem, $iID [, $bByPos = True] ) Setzt die Menueitem ID (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemInfo ( $hMenu, $iItem, ByRef $tInfo [, $bByPos = True] ) Aendert Informationen ueber ein Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemState ( $hMenu, $iItem, $iState [, $bState = True [, $bByPos = True]] ) Setzt den Status eines Menueitems (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemSubMenu ( $hMenu, $iItem, $hSubMenu [, $bByPos = True] ) Verbindet das Drop-Down-Menue oder das Untermenue  mit dem Menue-Item (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemText ( $hMenu, $iItem, $sText [, $bByPos = True] ) Setzt den Text fuer ein Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetItemType ( $hMenu, $iItem, $iType [, $bByPos = True] ) Setzt den Menueitemtyp (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenu ( $hWnd, $hMenu ) Weist einem bestimmten Fenster ein neues Menue zu (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuBackground ( $hMenu, $hBrush ) Setzt das Hintergrundfuellmuster fuer das Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuContextHelpID ( $hMenu, $iHelpID ) Setzt die Kontexthilfe ID fuer das Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuData ( $hMenu, $iData ) Setzt den Anwendungsspezifischen Wert fuer das Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuDefaultItem ( $hMenu, $iItem [, $bByPos = True] ) Setzt das Standard Menueitem (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuHeight ( $hMenu, $iHeight ) Setzt die maximale Hoehe des Menues fest (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuInfo ( $hMenu, ByRef $tInfo ) Setzt Informationen fuer ein festgelegtes Menue (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuStyle ( $hMenu, $iStyle ) Setzt den Menuestil (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMenu_TrackPopupMenu ( $hMenu, $hWnd [, $iX = -1 [, $iY = -1 [, $iAlignX = 1 [, $iAlignY = 1 [, $iNotify = 0 [, $iButtons = 0]]]]]] ) Zeigt ein Shortcut Menue an der festgelegten Stelle (benoetigt: #include <GuiMenu.au3>)
_GUICtrlMonthCal_Create ( $hWnd, $iX, $iY [, $iStyle = 0x00000000 [, $iExStyle = 0x00000000]] ) Erstellt ein Monatskalender Control (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_Destroy ( ByRef $hWnd ) Loescht das MonthCal Control (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCalendarBorder ( $hWnd ) Ermittelt die Groesse des Randes in Pixel (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCalendarCount ( $hWnd ) Ermittelt die Anzahl von Kalendern die momentan im Kalender Control dargestellt werden (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetColor ( $hWnd, $iIndex ) Ermittelt eine Farbe des Controls (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetColorArray ( $hWnd, $iColor ) Ermittelt die Farbe fuer einen festgelegten Abschnitt eines Monatskalender Controls (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCurSel ( $hWnd ) Ermittelt das aktuell ausgewaehlte Datum (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCurSelStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) Ermittelt das aktuell markierte Datum im Stringformat (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetFirstDOW ( $hWnd ) Ermittelt den ersten Tag der Woche (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetFirstDOWStr ( $hWnd ) Ermittelt den ersten Tag der Woche als einen String (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMaxSelCount ( $hWnd ) Ermittelt den maximalen Datumsbereich, welcher in einem MonthCal-Control markiert werden kann (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMaxTodayWidth ( $hWnd ) Ermittelt die maximale Breite des "heute"-Strings in einem MonthCal-Control (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqHeight ( $hWnd ) Ermittelt die minimale Hoehe, die notwendig ist, um einen kompletten Monat darzustellen (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqRect ( $hWnd ) Ermittelt die minimale Groesse um einen kompletten Monat darzustellen (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqRectArray ( $hWnd ) Ermittelt die minimale Groesse, um einen kompletten Monat in einem MonthCal-Control darzustellen (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqWidth ( $hWnd ) Ermittelt die minimale Breite, die notwendig ist, um einen kompletten Monat darzustellen (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthDelta ( $hWnd ) Ermittelt die Datumsdifferenz fuer das MonthCal-Control (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRange ( $hWnd [, $bPartial = False] ) Ermittelt Datumsinformationen, welche das hoechste und niedrigste Anzeigelimit aufzeigen (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMax ( $hWnd [, $bPartial = False] ) Ermittelt Datumsinformationen die das hoechste Limit des Controls darstellen (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMaxStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) Ermittelt Datumsinformationen die das hoechste Limit des Controls darstellen im Stringformat (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMin ( $hWnd [, $bPartial = False] ) Ermittelt Datumsinformationen die das niedrigste Limit des Controls darstellen (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMinStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) Ermittelt Datumsinformationen die das niedrigste Limit des Controls darstellen im Stringformat (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeSpan ( $hWnd [, $bPartial = False] ) Gibt einen Wert, der die Bereich in Monaten umfasst, zurueck (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRange ( $hWnd ) Ermittelt das minimal und maximal erlaubte Datum (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMax ( $hWnd ) Ermittelt den oberen begrenzten Datumsbereich (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMaxStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) Ermittelt den oberen begrenzten Datumsbereich im Stringformat (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMin ( $hWnd ) Ermittelt den unten begrenzten Datumsbereich (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMinStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) Ermittelt den unteren begrenzten Datumsbereich in Stringform (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRange ( $hWnd ) Ermittelt die obere und untere Begrenzung des momentan ausgewaehlten Datumbereichs (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMax ( $hWnd ) Ermittelt den oberen Datumsbereich der momentan vom Benutzer ausgewaehlt ist (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMaxStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) Ermittelt den oberen Datumsbereich der momentan vom Benutzer ausgewaehlt ist in Stringform (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMin ( $hWnd ) Ermittelt niedrigeren Datumsbereich als der aktuell durch den Benutzer markierte (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMinStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) Ermittelt den unteren Datumsbereich der momentan vom Benutzer ausgewaehlt ist in Stringform (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetToday ( $hWnd ) Ermittelt die Datumsinformationen fuer das "heutige" Datum (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetTodayStr ( $hWnd [, $sFormat = "%02d/%02d/%04d"] ) Ermittelt die Datumsinformationen fuer das Datum im Stringformat, welches als "heute" definiert ist  (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetUnicodeFormat ( $hWnd ) Ermittelt das Unicode Zeichen-Format-Flag fuer das Control (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_HitTest ( $hWnd, $iX, $iY ) Ermittelt welche Position eines MonthCal-Controls sich am angegebenen Punkt befindet (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetCalendarBorder ( $hWnd [, $iBorderSize = 4 [, $bSetBorder = True]] ) Legt die Groesse des Randes in Pixel fest (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetColor ( $hWnd, $iIndex, $iColor ) Setzt eine Farbe fuer einen festgelegten Abschnitt des Monatskalenders (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetCurSel ( $hWnd, $iYear, $iMonth, $iDay ) Setzt das aktuell ausgewaehlte Datum (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetDayState ( $hWnd, $aMasks ) Setzt den Tagesstatus fuer alle Monats die aktuell sichtbar sind (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetFirstDOW ( $hWnd, $sDay ) Setzt den ersten Tag der Woche fuer ein MonthCal-Control (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetMaxSelCount ( $hWnd, $iMaxSel ) Setzt die maximale Anzahl von Tagen, die in einem MonthCal-Control ausgewaehlt werden koennen (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetMonthDelta ( $hWnd, $iDelta ) Setzt die Datumsdifferenz fuer ein MonthCal-Control (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetRange ( $hWnd, $iMinYear, $iMinMonth, $iMinDay, $iMaxYear, $iMaxMonth, $iMaxDay ) Setzt die Datumsinformationen, welche das hoechste und niedrigste Limit darstellen (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetSelRange ( $hWnd, $iMinYear, $iMinMonth, $iMinDay, $iMaxYear, $iMaxMonth, $iMaxDay ) Setzt die Auswahl fuer eine MonthCal-Control auf einen festgelegten Datumsbereich (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetToday ( $hWnd, $iYear, $iMonth, $iDay ) Setzt die Datumsinformationen fuer den "heutigen" Tag (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetUnicodeFormat ( $hWnd [, $bUnicode = False] ) Setzt das Unicode Zeichen-Format-Flag fuer das Control (benoetigt: #include <GuiMonthCal.au3>)
_GUICtrlRebar_AddBand ( $hWndRebar, $hWndChild [, $iMinWidth = 100 [, $iDefaultWidth = 100 [, $sText = "" [, $iIndex = -1 [, $iStyle = -1]]]]] ) Fuegt eine neue Gruppe in einem Rebar-Control ein (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_AddToolBarBand ( $hWndRebar, $hWndToolbar [, $sText = "" [, $iIndex = -1 [, $iStyle = -1]]] ) Fuegt eine neue Gruppe in einem Rebar-Control ein (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_BeginDrag ( $hWnd, $iIndex [, $iPos = -1] ) Startet eine drag-and-drop Aktion im Rebar-Control. Diese Nachricht fuehrt nicht dazu, dass eine $RBN_ENDDRAG gesendet wird (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_Create ( $hWnd [, $iStyles = 0x513] ) Erstellt ein Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_DeleteBand ( $hWnd, $iIndex ) Loescht eine Gruppe von einem Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_Destroy ( ByRef $hWnd ) Loescht das Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_DragMove ( $hWnd [, $iPos = -1] ) Aktualisiert die neue Position in dem Rebar-Control nach einer vorherigen _GUICtrlRebar_BeginDrag Funktion (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_EndDrag ( $hWnd ) Beendet eine drag-and-drop Aktion im Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandBackColor ( $hWnd, $iIndex ) Ermittelt die Hintergrundfarbe einer Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandBorders ( $hWnd, $iIndex ) Ermittelt die Raender einer Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandBordersEx ( $hWnd, $iIndex ) Ermittelt die Raender einer Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandChildHandle ( $hWnd, $iIndex ) Ermittelt, falls vorhanden, das Handle des Child-Fensters welches in der Gruppe enthalten ist (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandChildSize ( $hWnd, $iIndex ) Ermittelt die Groesseneinstellungen des Child-Fensters (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandCount ( $hWnd ) Ermittelt die Anzahl von Gruppen die aktuell in dem Rebar-Control verwendet werden (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandForeColor ( $hWnd, $iIndex ) Ermittelt die Vordergrundfarbe der Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandHeaderSize ( $hWnd, $iIndex ) Ermittelt die Groesse der Beschriftung einer Gruppe in Pixel (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandID ( $hWnd, $iIndex ) Ermittelt den Wert den das Control verwendet um diese Gruppe fuer eine benutzerdefinierte Nachricht zu identifizieren (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandIdealSize ( $hWnd, $iIndex ) Ermittelt die ideale Breite der Gruppe in Pixel (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandLength ( $hWnd, $iIndex ) Ermittelt die Laenge einer Gruppe in Pixel (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandLParam ( $hWnd, $iIndex ) Ermittelt den anwendungsspezifischen Wert (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandMargins ( $hWnd ) Ermittelt die Randbreiten der Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandMarginsEx ( $hWnd ) Ermittelt die Laenge der Gruppe in Pixel (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandRect ( $hWnd, $iIndex ) Ermittelt das begrenzende Rechteck fuer eine festgelegte Gruppe in einem Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandRectEx ( $hWnd, $iIndex ) Ermittelt das begrenzende Rechteck fuer eine festgelegte Gruppe in einem Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyle ( $hWnd, $iIndex ) Ermittelt die Stil-Flags der Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleBreak ( $hWnd, $iIndex ) Ermittelt, ob die Gruppe in einer neuen Zeile beginnt (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleChildEdge ( $hWnd, $iIndex ) Ermittelt, ob die Gruppe oben und unten eine Kante des Child-Fensters haben soll (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleFixedBMP ( $hWnd, $iIndex ) Ermittelt, ob das Hintergrundbitmap sich nicht bewegt, wenn die Gruppe in der Groesse veraendert wird (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleFixedSize ( $hWnd, $iIndex ) Ermittelt, ob die Gruppe in der Groesse fixiert ist (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleGripperAlways ( $hWnd, $iIndex ) Ermittelt, ob die Gruppe immer einen Verschiebebalken hat, auch wenn es die einzige Gruppe in der Rebar ist (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleHidden ( $hWnd, $iIndex ) Zeigt an, ob die Gruppe versteckt ist (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleHideTitle ( $hWnd, $iIndex ) Ermittelt, ob der Titel der Gruppe versteckt ist (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleNoGripper ( $hWnd, $iIndex ) Ermittelt, ob die Gruppe keinen Schiebebalken hat, auch wenn es mehr als eine Gruppe in der Rebar gibt (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleTopAlign ( $hWnd, $iIndex ) Ermittelt, ob die Gruppe immer oben ausgerichtet ist (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleUseChevron ( $hWnd, $iIndex ) Ermittelt, ob ein Dropdown Button angezeigt wird (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleVariableHeight ( $hWnd, $iIndex ) Ermittelt, ob die Gruppe durch das Rebar-Control in der Groesse veraendert wird (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBandText ( $hWnd, $iIndex ) Ermittelt den dargestellten Text fuer eine Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBarHeight ( $hWnd ) Ermittelt die Hoehe des Rebar-Controls (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBarInfo ( $hWnd ) Ermittelt Informationen ueber ein Rebar-Control und die verwendete Imagelist (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetBKColor ( $hWnd ) Ermittelt die Standard Hintergrundfarbe eines Rebar-Controls (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetColorScheme ( $hWnd ) Ermittelt Informationen zum Farbenschema von dem Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetRowCount ( $hWnd ) Ermittelt die Anzahl von Zeilen mit Gruppen eines Rebar-Controls (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetRowHeight ( $hWnd, $iIndex ) Ermittelt die Hoehe einer festgelegten Zeile in einem Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetTextColor ( $hWnd ) Ermittelt die Standard Textfarbe eines Rebar-Controls (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetToolTips ( $hWnd ) Ermittelt den Handle zu einem ToolTip-Control welches mit einem Rebar-Control verbunden ist (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_GetUnicodeFormat ( $hWnd ) Ermittelt das Unicode Zeichen-Format-Flag fuer das Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_HitTest ( $hWnd [, $iX = -1 [, $iY = -1]] ) Ermittelt, welches Item an der festgelegten Position liegt (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_IDToIndex ( $hWnd, $iID ) Konvertiert eine Gruppen-ID in einen Gruppenindex in einem Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_MaximizeBand ( $hWnd, $iIndex [, $bIdeal = True] ) Veraendert die Groesse einer Gruppe in einem Rebar-Control so, dass entweder dessen idealste oder maximale Groesse erreicht wird (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_MinimizeBand ( $hWnd, $iIndex ) Veraendert die Groesse einer Gruppe in einem Rebar-Control zu dessen minimalster Groesse (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_MoveBand ( $hWnd, $iIndexFrom, $iIndexTo ) Verschiebt eine Gruppe von einem Index zum anderen (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandBackColor ( $hWnd, $iIndex, $iColor ) Setzt die Hintergrundfarbe einer Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandForeColor ( $hWnd, $iIndex, $iColor ) Setzt die Vordergrundfarbe der Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandHeaderSize ( $hWnd, $iIndex, $iNewSize ) Setzt die Groesse der Beschriftung einer Gruppe in Pixel (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandID ( $hWnd, $iIndex, $iID ) Setzt den Wert den das Control verwendet, um diese Gruppe fuer eine benutzerdefinierte Nachricht zu identifizieren (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandIdealSize ( $hWnd, $iIndex, $iNewSize ) Setzt die ideale Breite fuer die Gruppe in Pixel (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandLength ( $hWnd, $iIndex, $iLength ) Setzt die Laenge einer Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandLParam ( $hWnd, $iIndex, $lParam ) Setzt einen anwendungsspezifischen Wert (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyle ( $hWnd, $iIndex, $iStyle ) Setzt die Stilflags der Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleBreak ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob die Gruppe in einer neuen Zeile beginnt (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleChildEdge ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob die Gruppe eine Kante oberhalb und unterhalb des Childfensters haben soll (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleFixedBMP ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob sich das Hintergrundbitmap der Gruppe nicht bewegt, wenn die Groesse der Gruppe geaendert wird (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleFixedSize ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob die Gruppe in der Groesse nicht veraendert werden kann. Mit diesem Stil wird der Schiebebalken auf der Gruppe nicht dargestellt (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleGripperAlways ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob die Gruppe immer einen Verschiebebalken hat, auch wenn es die einzige Gruppe in der Rebar ist (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleHidden ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob die Gruppe nicht sichtbar ist (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleHideTitle ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob der Titel der Gruppe versteckt sein soll (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleNoGripper ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob die Gruppe keinen Schiebebalken hat, auch wenn es mehr als eine Gruppe in der Rebar gibt (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleTopAlign ( $hWnd, $iIndex [, $bEnabled = True] ) Bestimmt, ob die Child-Fenster der Gruppe oben-buendig ausgerichtet werden (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleUseChevron ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob ein Dropdown Button angezeigt werden soll (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleVariableHeight ( $hWnd, $iIndex [, $bEnabled = True] ) Legt fest, ob die Gruppe durch das Rebar-Control in der Groesse veraendert werden kann (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBandText ( $hWnd, $iIndex, $sText ) Setzt den darzustellenden Text fuer eine Gruppe (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBarInfo ( $hWnd, $himl ) Setzt die Charakteristik eines Rebar-Controls (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetBKColor ( $hWnd, $iColor ) Setzt die Standard Hintergrundfarbe fuer ein Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetColorScheme ( $hWnd, $iBtnHighlight, $iBtnShadow ) Setzt das Farbschema eines Rebar-Controls (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetTextColor ( $hWnd, $iColor ) Setzt die Standard Textfarbe eines Rebar-Controls (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetToolTips ( $hWnd, $hToolTip ) Verknuepft ein ToolTip-Control mit dem Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_SetUnicodeFormat ( $hWnd [, $bUnicode = True] ) Setzt das Unicode Zeichen-Format-Flag fuer das Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRebar_ShowBand ( $hWnd, $iIndex [, $bShow = True] ) Zeigt oder versteckt eine festgelegte Gruppe in einem Rebar-Control (benoetigt: #include <GuiRebar.au3>)
_GUICtrlRichEdit_AppendText ( $hWnd, $sText ) Fuegt einen Text am Ende des Anwendungsbereichs hinzu (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_AutoDetectURL ( $hWnd, $bState ) Aktiviert oder deaktiviert automatische Erkennung von URLs (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanPaste ( $hWnd ) Ermittelt, ob das RichEdit-Control den Inhalt der Zwischenablage einfuegen kann.  (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanPasteSpecial ( $hWnd ) Ermittelt, ob das RichEdit-Control den Inhalt der Zwischenablage in beide Formate einfuegen kann.  (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanRedo ( $hWnd ) Ueberprueft, ob eine rueckgaengig gemachte Aktion wiederholt werden kann (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanUndo ( $hWnd ) Prueft, ob irgendwelche Aktionen in der Undo-Reihe eines (Rich)Edit-Controls vorhanden sind (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ChangeFontSize ( $hWnd, $iIncrement ) Inkrementiert oder dekrementiert die Schriftgroesse des markierten Textes (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Copy ( $hWnd ) Kopiert Text in die Zwischenablage (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Create ( $hWnd, $sText, $iLeft, $iTop [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = -1 [, $iExStyle = -1]]]] ) Erzeugt ein Edit Control (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Cut ( $hWnd ) Schneidet Text aus und setzt diesen in die Zwischenablage (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Deselect ( $hWnd ) Demarkiert den Text (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Destroy ( ByRef $hWnd ) Loescht das RichEdit Control (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_EmptyUndoBuffer ( $hWnd ) Setzt das Undo-Flag des Controls zurueck (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_FindText ( $hWnd, $sText [, $bForward = True [, $bMatchCase = False [, $bWholeWord = False [, $iBehavior = 0]]]] ) Sucht nach einem Text mit dem Einfuege- oder Ankerpunkt der Selektion als Startpunkt (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_FindTextInRange ( $hWnd, $sText [, $iStart = 0 [, $iEnd = -1 [, $bMatchCase = False [, $bWholeWord = False [, $iBehavior = 0]]]]] ) Sucht nach Text im Bereich zwischen den angegebenen Zeichenpositionen (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetBkColor ( $hWnd ) Ermittelt die Hintergrundfarbe des Controls (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharAttributes ( $hWnd ) Gibt die Attribute markierten Textes zurueck (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharBkColor ( $hWnd ) Gibt die Hintergrundfarbe des markierten Textes zurueck oder, wenn keiner markiert ist, vom ersten Buchstaben rechts vom Einfuegepunkt (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharColor ( $hWnd ) Ermittelt die Farbe des markierten Textes oder, falls keiner markiert ist, die des Zeichens rechts vom Einfuegepunkt (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosFromXY ( $hWnd, $iX, $iY ) Ermittelt die Zeichenposition, die am naechsten an einem bestimmten Punkt im Control ist (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosOfNextWord ( $hWnd, $iCpStart ) Ermittelt die Zeichenposition vor dem naechsten Wort (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosOfPreviousWord ( $hWnd, $iCpStart ) Ermittelt die Zeichenposition vor dem vorherigen Wort (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharWordBreakInfo ( $hWnd, $iCp ) Ermittelt Informationen ueber das Zeichen an der angegebenen Zeichenposition vor oder hinter dem naechsten Zeilenumbruch (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetFirstCharPosOnLine ( $hWnd [, $iLine = -1] ) Ermittelt die Zeichenposition des ersten Zeichens einer Zeile (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetFont ( $hWnd ) Ermittelt die Attribute der Schriftart einer Auswahl oder, wenn nichts ausgewaehlt ist, am Einfuegepunkt (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineCount ( $hWnd ) Ermittelt die Zeilenanzahl in einem mehrzeiligen Edit-Control (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineLength ( $hWnd, $iLine ) Gibt die Laenge der Zeile zurueck (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineNumberFromCharPos ( $hWnd, $iCharPos ) Ermittelt die Zeilennummer einer bestimmten Zeichenposition (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNextRedo ( $hWnd [, $bName = True] ) Ermittelt den Namen oder die Typ-ID der naechstmoeglichen Wiederholaktion (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNextUndo ( $hWnd [, $bName = True] ) Ermittelt den Namen oder die ID der naechsten Rueckgaengig-Aktion (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNumberOfFirstVisibleLine ( $hWnd ) Ermittelt die Nummer der ersten sichtbaren Zeile in dem Control (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaAlignment ( $hWnd ) Ermittelt die Ausrichtung markierter Absaetze oder, falls keine markiert sind, des aktuellen Absatzes (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaAttributes ( $hWnd ) Ermittelt die Attribute markierter Absaetze oder, falls keine markiert sind, des aktuellen Absatzes (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaBorder ( $hWnd ) Ermittelt die Rahmeneinstellungen des (ersten) ausgewaehlten Absatzes oder, wenn keiner ausgewaehlt ist, die des aktiven Absatzes (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaIndents ( $hWnd ) Ermittelt die Zeileneinzuege des (ersten) markierten Absatzes oder, wenn keiner markiert ist, des aktuellen Absatzes (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaNumbering ( $hWnd ) Ermittelt die Art der Absatznummerierung des (ersten) markierten Absatzes oder, wenn keiner markiert ist, die des aktuellen Absatzes (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaShading ( $hWnd ) Ermittelt die Schattierungseinstellungen des (ersten) markierten Absatzes oder, wenn keiner markiert ist, die des aktuellen Absatzes (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaSpacing ( $hWnd ) Ermittelt die Zeilen- und Absatzabstaende des (ersten) markierten Absatzes oder, wenn keiner markiert ist, die des aktuellen Absatzes (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaTabStops ( $hWnd ) Ermittelt die Tabstopps des (ersten) markierten Absatzes oder, wenn keiner markiert ist, die des aktuellen Absatzes (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetPasswordChar ( $hWnd ) Ermittelt das Passwort-Zeichen das ein RichEdit Control anzeigt, wenn der Benutzer den Text eingibt (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetRECT ( $hWnd ) Ermittelt das formatierte Rechteck eines Controls (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetScrollPos ( $hWnd ) Ermittelt die Scrollposition in dem Control (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSel ( $hWnd ) Ermittelt die Anfangs- ($iLow) und Endposition ($iHigh) einer Auswahl (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSelAA ( $hWnd ) Ermittelt die Ankerposition (Startposition) und die aktive Position (Endposition) einer Auswahl, in dieser Reihenfolge (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSelText ( $hWnd ) Ermittelt den aktuell markierten Text (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSpaceUnit (  ) Ermittelt die Masseinheit des horzizontalen und vertikalen Abstandes, welcher in verschiedenen _GUICtrlRichEdit Funktionen verwendet wird (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetText ( $hWnd [, $bCrToCrLf = False [, $iCodePage = 0 [, $sReplChar = ""]]] ) Gibt den gesamten Text des Controls zurueck (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextInLine ( $hWnd, $iLine ) Ermittelt den Text einer Zeile (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextInRange ( $hWnd, $iStart, $iEnd ) Ermittelt den Text zwischen zwei Zeichenpositionen (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextLength ( $hWnd [, $bExact = True [, $bChars = False]] ) Ermittelt die Laenge des gesamten Textes in einem Control (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetVersion (  ) Ermittelt die Version von RichEdit (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetXYFromCharPos ( $hWnd, $iCharPos ) Ermittelt die XY Koordinaten einer Zeichenposition (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetZoom ( $hWnd ) Ermittelt den Zoomlevel des Controls (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GotoCharPos ( $hWnd, $iCharPos ) Verschiebt den Einfuegepunkt (Caret) zu einer bestimmte Zeichenposition (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_HideSelection ( $hWnd [, $bHide = True] ) Versteckt (oder zeigt) eine Markierung (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_InsertText ( $hWnd, $sText ) Fuegt Text am Einfuegepunkt oder Ankerpunkt der Markierung ein (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_IsModified ( $hWnd ) Ermittelt den Status des Aenderungsflags eines RichEdit Controls (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_IsTextSelected ( $hWnd ) Ueberprueft, ob Text ausgewaehlt ist (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Paste ( $hWnd ) Fuegt RTF oder RTF mit Objekten von der Zwischenablage ein (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_PasteSpecial ( $hWnd [, $bAndObjects = True] ) Fuegt RTF oder RTF mit Objekten von der Zwischenablage ein (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_PauseRedraw ( $hWnd ) Pausiert das neuzeichnen des Controls (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Redo ( $hWnd ) Wiederholt die letzte rueckgaengig gemachte Aktion (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ReplaceText ( $hWnd, $sText [, $bCanUndo = True] ) Ersetzt den markierten Text (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ResumeRedraw ( $hWnd ) Setzt das neuzeichnen des Controls fort (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollLineOrPage ( $hWnd, $sAction ) Scrollt den Text eine Zeile oder eine Seite nach oben oder nach unten (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollLines ( $hWnd, $iQlines ) Verschiebt das Sichtfeld um eine Anzahl an Zeilen nach oben/unten (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollToCaret ( $hWnd ) Verschiebt das Sichtfeld auf die Zeile, in der die Einfuegemarke ist (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetBkColor ( $hWnd [, $iBngColor = Default] ) Aendert die Hintergrundfarbe eines Controls (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharAttributes ( $hWnd, $sStatesAndEffects [, $bWord = False] ) Setzt/Entfernt ein Attribut fuer den markierten Text oder, falls keiner markiert ist, fuer den Text nach der Einfuegemarke (Cursor) (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharBkColor ( $hWnd [, $iBkColor = Default] ) Setzt die Hintergrundfarbe des markierten Textes. Falls keiner markiert ist, wird die Hintergrundfarbe des Textes beim Einfuegepunkt gesetzt (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharColor ( $hWnd [, $iColor = Default] ) Setzt die Farbe des markierten Textes. Falls keiner markiert ist, wird die Farbe des Textes beim Einfuegepunkt gesetzt (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetEventMask ( $hWnd, $iEventMask ) Setzt fest, welche Benachrichtigungen an das Parent-Window (GUI) gesendet werden sollen (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetFont ( $hWnd [, $iPoints = Default [, $sName = Default [, $iCharset = Default [, $iLcid = Default]]]] ) Legt die Schrifteigenschaften des markierten Textes oder, wenn nichts markiert worden ist, des eingefuegten Textes ab dem Einfuegepunkt fest (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetLimitOnText ( $hWnd, $iNewLimit ) Aendert die Anzahl an Zeichen im RichText-Format, die in das RichEdit-Control eingetippt, eingefuegt oder gestreamt werden kann (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetModified ( $hWnd [, $bState = True] ) Setzt oder loescht das Aenderungsflag (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaAlignment ( $hWnd, $sAlignment ) Setzt die Ausrichtung der Absaetze der aktuellen Markierung oder, falls nichts markiert ist, der eingefuegten Absaetze an dem Einfuegepunkt (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaAttributes ( $hWnd, $sStatesAndAtts ) Setzt die Attribute markierter Absaetze oder, falls keine markiert sind, des am Einfuegepunkt eingefuegten Absatzes (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaBorder ( $hWnd [, $sLocation = Default [, $vLineStyle = Default [, $sColor = Default [, $iSpace = Default]]]] ) Setzt die Rahmeneinstellungen der ausgewaehlten Absaetze oder, wenn keine Auswahl existiert, die der am Eingabepunkt eingefuegten Absaetze (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaIndents ( $hWnd [, $vLeft = Default [, $iRight = Default [, $iFirstLine = Default]]] ) Aendert die Zeileneinzuege der markierten Absaetze oder, wenn keiner markiert ist, der Absaetze, die am Einfuegungspunkt (Cursor) eingefuegt werden (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaNumbering ( $hWnd, $sStyle [, $iTextToNbrSpace = Default [, $bForceRoman = False]] ) Legt die Art der Absatznummerierung der markierten Absaetze oder, wenn keine markiert sind, die der nach dem Einfuegungspunkt eingefuegten Absaetze fest (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaShading ( $hWnd [, $iWeight = Default [, $sStyle = Default [, $sForeColor = Default [, $sBackColor = Default]]]] ) Aendert die Schattierungseinstellungen von markierten Absaetzen oder, wenn keine markiert sind, fuer den Text, der nach dem Eingabepunkt (Caret) eingefuegt wird (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaSpacing ( $hWnd [, $vInter = Default [, $iBefore = Default [, $iAfter = Default]]] ) Aendert den Zeilenabstand und Absatzabstand von markierten Absaetzen oder, wenn keine markiert sind, fuer den Text, der nach dem Einfuegungspunkt (Cursor) eingefuegt wird (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaTabStops ( $hWnd, $sTabStops ) Aendert die Tabulatoreinstellungen von markierten Absaetzen oder, wenn keine markiert sind, fuer den Text, der nach dem Eingabepunkt (Caret) eingefuegt wird (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetPasswordChar ( $hWnd [, $sDisplayChar = "*"] ) Setzt das Zeichen welches statt dem eingetippten Text dargestellt wird oder es bewirkt, dass die Zeichen angezeigt werden (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetReadOnly ( $hWnd [, $bState = True] ) Setzt oder entfernt den Status "schreibgeschuetzt" (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetRECT ( $hWnd [, $iLeft = Default [, $iTop = Default [, $iRight = Default [, $iBottom = Default [, $bRedraw = True]]]]] ) Aendert das formatierte Rechteck eines Rich Edit Controls (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetScrollPos ( $hWnd, $iX, $iY ) Scrollt die Anzeige so, dass ($ix,$iY) sich in der oberen linken Ecke des Controls befinden (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetSel ( $hWnd, $iAnchor, $iActive [, $bHideSel = False] ) Setzt die Anfangs- und Endposition der Zeichen einer Markierung (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetSpaceUnit ( $sUnit ) Setzt die Masseinheit des horzizontalen und vertikalen Abstandes, welcher in verschiedenen _GUICtrlRichEdit Funktionen verwendet wird (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetTabStops ( $hWnd, $vTabStops [, $bRedraw = True] ) Setzt die Tabulatorpositionen fuer ein Control (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetText ( $hWnd, $sText ) Setzt den Text eines Controls (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetUndoLimit ( $hWnd, $iLimit ) Setzt die maximale Anzahl von Befehlen die in der Undo-Reihe gespeichert werden koennen (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetZoom ( $hWnd, $iPercent ) Setzt das Zoomlevel des Controls (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamFromFile ( $hWnd, $sFileSpec [, $iFileEncoding = Default] ) Setzt den Inhalt einer Datei als Text in einem Control (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamFromVar ( $hWnd, $sVar ) Setzt den Inhalt einer Variablen als Text in ein Control (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamToFile ( $hWnd, $sFileSpec [, $bIncludeCOM = True [, $iOpts = 0 [, $iCodePage = 0 [, $iFileEncoding = Default]]]] ) Schreibt den gesamten Inhalt eines Controls in eine Datei (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamToVar ( $hWnd [, $bRtf = True [, $bIncludeCOM = True [, $iOpts = 0 [, $iCodePage = 0]]]] ) Gibt den gesamten Inhalt eines Controls zurueck (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Undo ( $hWnd ) Macht die letzte Edit-Control Operation in des Controls Undo-Queue rueckgaengig (benoetigt: #include <GuiRichEdit.au3>)
_GUICtrlSlider_ClearSel ( $hWnd ) Loescht den aktuellen ausgewaehlten Bereich (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_ClearTics ( $hWnd ) Loescht die aktuellen Skalenstriche von dem Slider (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_Create ( $hWnd, $iX, $iY [, $iWidth = 100 [, $iHeight = 20 [, $iStyle = $TBS_AUTOTICKS [, $iExStyle = 0x00000000]]]] ) Erstellt ein Slider-Control (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_Destroy ( ByRef $hWnd ) Loescht das Control (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetBuddy ( $hWnd, $bLocation ) Ermittelt das Handle zu einem Slider-Control Buddy Fenster an dem gegebenen Bereich (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetChannelRect ( $hWnd ) Ermittelt die Groesse und Position des begrenzenden Rechtecks fuer den Slider (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetChannelRectEx ( $hWnd ) Ermittelt die Groesse und Position des begrenzenden Rechtecks fuer den Slider (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetLineSize ( $hWnd ) Ermittelt die Anzahl von logischen Positionen in der sich der Slider bewegen laesst (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetLogicalTics ( $hWnd ) Ermittelt ein Array, welches die logischen Positionen fuer die Skalenstriche fuer einen Slider enthalten (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetNumTics ( $hWnd ) Ermittelt die Anzahl von Skalenstrichen des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetPageSize ( $hWnd ) Ermittelt die Anzahl von logischen Position, die der Slider abfahren kann (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetPos ( $hWnd ) Ermittelt die logische Position des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetRange ( $hWnd ) Ermittelt die minimale und maximale Position des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetRangeMax ( $hWnd ) Ermittelt die maximale Position des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetRangeMin ( $hWnd ) Ermittelt die minimale Position des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetSel ( $hWnd ) Ermittelt die Start- und Endposition des aktuellen markierten Bereichs (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetSelEnd ( $hWnd ) Ermittelt die Endposition des aktuellen ausgewaehlten Bereichs (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetSelStart ( $hWnd ) Ermittelt die Startposition des aktuell markierten Bereichs (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbLength ( $hWnd ) Ermittelt die Laenge des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbRect ( $hWnd ) Ermittelt die Groesse und Position des begrenzenden Rechtecks des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbRectEx ( $hWnd ) Ermittelt die Groesse und Position des begrenzenden Rechtecks des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetTic ( $hWnd, $iTic ) Ermittelt die logische Position des Skalenstriches (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetTicPos ( $hWnd, $iTic ) Ermittelt die aktuelle physikalische Position des Skalenstrichs (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetToolTips ( $hWnd ) Ermittelt, falls vorhanden, das Handle zu dem ToolTip-Control, welches zum Slider gehoert (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_GetUnicodeFormat ( $hWnd ) Ermittelt das Unicode Zeichen-Format-Flag fuer das Control (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetBuddy ( $hWnd, $bLocation, $hBuddy ) Weist ein Fenster als Buddy Fenster fuer ein Slider-Control zu (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetLineSize ( $hWnd, $iLineSize ) Setzt die Anzahl von logischen Positionen in die sich der Slider bewegen laesst (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetPageSize ( $hWnd, $iPageSize ) Setzt die Anzahl von logischen Positionen in der sich der Slider bewegen kann (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetPos ( $hWnd, $iPosition ) Setzt die aktuelle logische Position des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetRange ( $hWnd, $iMinimum, $iMaximum ) Setzt den Bereich der minimalen und maximalen logischen Position des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetRangeMax ( $hWnd, $iMaximum ) Setzt die maximale logische Position des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetRangeMin ( $hWnd, $iMinimum ) Setzt die minimale logische Position des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetSel ( $hWnd, $iMinimum, $iMaximum ) Setzt die Start- und Endposition fuer den verfuegbaren Markierungsbereich (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetSelEnd ( $hWnd, $iMaximum ) Setzt die logische Endposition des aktuell markierten Bereiches (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetSelStart ( $hWnd, $iMinimum ) Setzt die logische Startposition des aktuell markierten Bereiches (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetThumbLength ( $hWnd, $iLength ) Setzt die Laenge des Sliders (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetTic ( $hWnd, $iPosition ) Setzt einen Skalenstrich an der festgelegten logischen Position (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetTicFreq ( $hWnd, $iFreg ) Setzt die Intervallfrequenz fuer Skalenstriche in einem Slider (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetTipSide ( $hWnd, $iLocation ) Positioniert ein ToolTip-Control (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetToolTips ( $hWnd, $hWndTT ) Weist ein ToolTip-Control einem Slider-Control zu (benoetigt: #include <GuiSlider.au3>)
_GUICtrlSlider_SetUnicodeFormat ( $hWnd, $bUnicode ) Setzt das Unicode Zeichen-Format-Flag fuer das Control (benoetigt: #include <GuiSlider.au3>)
_GUICtrlStatusBar_Create ( $hWnd [, $vPartEdge = -1 [, $vPartText = "" [, $iStyles = -1 [, $iExStyles = 0x00000000]]]] ) Erstellt eine Statusbar (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_Destroy ( ByRef $hWnd ) Loescht das Control (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_EmbedControl ( $hWnd, $iPart, $hControl [, $iFit = 4] ) Bindet ein Unter-Control in das Control ein (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBorders ( $hWnd ) Ermittelt die aktuelle Breite des horizontalen und vertikalen Randes (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersHorz ( $hWnd ) Ermittelt die aktuelle Breite des horizontalen Randes (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersRect ( $hWnd ) Ermittelt die aktuelle Breite des Rechteckrandes (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersVert ( $hWnd ) Ermittelt die aktuelle Breite des vertikalen Randes (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetCount ( $hWnd ) Ermittelt die Anzahl von Abschnitten (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetHeight ( $hWnd ) Ermittelt die Hoehe der Statusbar (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetIcon ( $hWnd [, $iIndex = 0] ) Ermittelt das Icon fuer einen Abschnitt (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetParts ( $hWnd ) Ermittelt die Anzahl von Abschnitten und die Kanten der Abschnitte (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetRect ( $hWnd, $iPart ) Ermittelt das abgrenzende Rechteck eines Abschnitts (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetRectEx ( $hWnd, $iPart ) Ermittelt das abgrenzende Rechteck eines Abschnitts (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetText ( $hWnd, $iPart ) Ermittelt den Text von dem festgelegten Abschnitt (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextFlags ( $hWnd, $iPart ) Ermittelt die Flags der Textlaenge fuer einen Abschnitt (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextLength ( $hWnd, $iPart ) Ermittelt die Laenge eines Abschnittextes (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextLengthEx ( $hwnd, $iPart ) Ermittelt das uFlag eines Abschnitts (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTipText ( $hWnd, $iPart ) Ermittelt den ToolTip-Text fuer einen Abschnitt (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetUnicodeFormat ( $hWnd ) Ermittelt das Unicode Zeichen-Format-Flag (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetWidth ( $hWnd, $iPart ) Ermittelt die Breite eines Abschnitts (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_IsSimple ( $hWnd ) Prueft, ob ein Statusbar-Control sich im einfachen Modus befindet (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_Resize ( $hWnd ) Bewirkt, dass sich Statusbar bei Groessenaenderung des Fenster mitanpasst (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetBkColor ( $hWnd, $iColor ) Setzt die Hintergrundfarbe (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetIcon ( $hWnd, $iPart [, $hIcon = -1 [, $sIconFile = ""]] ) Setzt das Icon fuer einen Abschnitt (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetMinHeight ( $hWnd, $iMinHeight ) Setzt die minimale Hoehe der Statusbar (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetParts ( $hWnd [, $vPartEdge = -1 [, $vPartWidth = 25]] ) Setzt die Anzahl von Abschnitten und Kanten der Abschnitte (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetSimple ( $hWnd [, $bSimple = True] ) Legt fest, ob ein Statusfenster einfachen Text oder alle Fensterabschnitte darstellen soll (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetText ( $hWnd [, $sText = "" [, $iPart = 0 [, $iUFlag = 0]]] ) Setzt den Text in dem festgelegten Abschnitt eines Statusfensters (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetTipText ( $hWnd, $iPart, $sText ) Setzt den ToolTip Text fuer einen Abschnitt (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetUnicodeFormat ( $hWnd [, $bUnicode = True] ) Setzt das Unicode Zeichen-Format-Flag (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlStatusBar_ShowHide ( $hWnd, $iState ) Zeigt/versteckt das Statusbar-Control (benoetigt: #include <GuiStatusBar.au3>)
_GUICtrlTab_ActivateTab ( $hWnd, $iIndex ) Aktiviert einen Tab durch dessen Indes (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_ClickTab ( $hWnd, $iIndex [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] ) Klickt einen Tab an (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_Create ( $hWnd, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x00000040 [, $iExStyle = 0x00000000]]]] ) Erstellt ein Tab-Control (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_DeleteAllItems ( $hWnd ) Loescht alle Tabs (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_DeleteItem ( $hWnd, $iIndex ) Loescht einen Tab (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_DeselectAll ( $hWnd [, $bExclude = True] ) Setzt alle Tabs zurueck, die den Status "gedrueckt" besitzen (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_Destroy ( ByRef $hWnd ) Loescht das Control (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_FindTab ( $hWnd, $sText [, $bInStr = False [, $iStart = 0]] ) Suche einen Tab mit dem festgelegten Text (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetCurFocus ( $hWnd ) Gibt den Index des Items zurueck, welches den Fokus im Tab-Control besitzt (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetCurSel ( $hWnd ) Ermittelt den aktuell markierten Tab (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetDisplayRect ( $hWnd ) Ermittelt die Groesse und Position des begrenzenden Rechtecks fuer das Tab-Control (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetDisplayRectEx ( $hWnd ) Ermittelt das begrenzende Rechteck eines Tab-Controls (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetExtendedStyle ( $hWnd ) Ermittelt die erweiterten Stile, welche momentan genutzt werden (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetImageList ( $hWnd ) Ermittelt die Imagelist des Tab-Controls (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetItem ( $hWnd, $iIndex ) Ermittelt Informationen ueber einen Tab (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetItemCount ( $hWnd ) Ermittelt die Anzahl von Tabs (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetItemImage ( $hWnd, $iIndex ) Ermittelt den Bilderindex fuer einen Tab (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetItemParam ( $hWnd, $iIndex ) Ermittelt die Parameterdaten fuer einen Tab (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetItemRect ( $hWnd, $iIndex ) Ermittelt das begrenzende Rechteck fuer einen Tab (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetItemRectEx ( $hWnd, $iIndex ) Ermittelt das begrenzende Rechteck fuer einen Tab (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetItemState ( $hWnd, $iIndex ) Ermittelt den Status eines Tabs (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetItemText ( $hWnd, $iIndex ) Ermittelt den Text auf einem Tab (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetRowCount ( $hWnd ) Ermittelt die aktuelle Anzahl von Zeilen von Tabs (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetToolTips ( $hWnd ) Ermittelt das Handle zu dem ToolTip-Control, welches zu dem Control gehoert (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_GetUnicodeFormat ( $hWnd ) Ermittelt das Unicode Zeichen-Format-Flag fuer das Control (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_HighlightItem ( $hWnd, $iIndex [, $bHighlight = True] ) Setzt den "hervorgehoben" Status eines Tabitems (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_HitTest ( $hWnd, $iX, $iY ) Ermittelt, ob der angegebene Punkt ueber einem Tab-Control liegt (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_InsertItem ( $hWnd, $iIndex, $sText [, $iImage = -1 [, $iParam = 0]] ) Fuegt einen neuen Tab ein (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_RemoveImage ( $hWnd, $iIndex ) Loescht ein Bild von der Imagelist des Controls (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetCurFocus ( $hWnd, $iIndex ) Setzt den Fokus auf den festgelegten Tab (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetCurSel ( $hWnd, $iIndex ) Waehlt einen Tab aus (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetExtendedStyle ( $hWnd, $iStyle ) Setzt die erweiterten Stile, welche momentan genutzt werden (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetImageList ( $hWnd, $hImage ) Setzt die Imagelist, welche zu dem Tab-Control gehoert (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetItem ( $hWnd, $iIndex [, $sText = -1 [, $iState = -1 [, $iImage = -1 [, $iParam = -1]]]] ) Setzt Informationen ueber einen Tab (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetItemImage ( $hWnd, $iIndex, $iImage ) Setzt das Bild eines Tabs (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetItemParam ( $hWnd, $iIndex, $iParam ) Setzt die Parameterdaten eines Controls (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetItemSize ( $hWnd, $iWidth, $iHeight ) Setzt die Breite und Hoehe eines Tabs (mit fester Breite oder selbst gezeichnet) (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetItemState ( $hWnd, $iIndex, $iState ) Setzt den Status eines Tabs (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetItemText ( $hWnd, $iIndex, $sText ) Setzt den Text eines Tabs (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetMinTabWidth ( $hWnd, $iMinWidth ) Setzt die minimale Breite eines Items in einem Tab-Control (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetPadding ( $hWnd, $iHorz, $iVert ) Setzt den freien Platz der sich um jedes Tabicon und Label befinden soll (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetToolTips ( $hWnd, $hToolTip ) Setzt ein Handle zu dem ToolTip-Control, welches mit dem Control verbunden ist (benoetigt: #include <GuiTab.au3>)
_GUICtrlTab_SetUnicodeFormat ( $hWnd, $bUnicode ) Setzt das Flag fuer das Unicode-Zeichen-Format fuer das Control (benoetigt: #include <GuiTab.au3>)
_GUICtrlToolbar_AddBitmap ( $hWnd, $iButtons, $hInst, $iID ) Fuegt ein neues Bilder der Imagelist hinzu (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_AddButton ( $hWnd, $iID, $iImage [, $iString = 0 [, $iStyle = 0 [, $iState = 4 [, $iParam = 0]]]] ) Fuegt einen Button hinzu (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_AddButtonSep ( $hWnd [, $iWidth = 6] ) Fuegt einen Trennstrich ein (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_AddString ( $hWnd, $sString ) Fuegt einen neuen String dem Stringpool der Toolbar hinzu (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_ButtonCount ( $hWnd ) Ermittelt die Anzahl an Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_CheckButton ( $hWnd, $iCommandID [, $bCheck = True] ) Drueckt oder laesst einen Button los (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_ClickAccel ( $hWnd, $sAccelKey [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] ) Klickt auf einen festgelegten Button durch Verwendung des Abkuerzungsbefehls (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_ClickButton ( $hWnd, $iCommandID [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] ) Klickt auf einen festgelegten Button (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_ClickIndex ( $hWnd, $iIndex [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] ) Klickt auf einen Button durch Verwendung des Indexes (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_CommandToIndex ( $hWnd, $iCommandID ) Ermittelt den Index fuer den Button der mit der festgelegten Command-ID verknuepft ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_Create ( $hWnd [, $iStyle = 0x00000800 [, $iExStyle = 0x00000000]] ) Erstellt ein Toolbar-Control (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_Customize ( $hWnd ) Zeigt die anpassbare Werkzeug Dialogbox (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_DeleteButton ( $hWnd, $iCommandID ) Loescht einen Button von einer Toolbar (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_Destroy ( ByRef $hWnd ) Loescht das Control (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_EnableButton ( $hWnd, $iCommandID [, $bEnable = True] ) Aktiviert oder deaktiviert einen festgelegten Button (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_FindToolbar ( $hWnd, $sText ) Findet eine bestimmte Toolbar (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetAnchorHighlight ( $hWnd ) Ermittelt die Einstellung des "anchor highlight" (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetBitmapFlags ( $hWnd ) Ermittelt die Flags, die den Typ der verwendeten Bitmap beschreiben (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonBitmap ( $hWnd, $iCommandID ) Ermittelt den Index des Bitmaps, welcher mit einem Button verknuepft ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonInfo ( $hWnd, $iCommandID ) Ermittelt Informationen fuer einen Button (benoetigt: #include <GuiToolbar.au3>)
_GUICtrlToolbar_GetButtonInfoEx ( $hWnd, $iCommandID ) Ermittelt erweiterte Informationen fuer einen Button (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonParam ( $hWnd, $iCommandID ) Ermittelt die Parameterwerte eines Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonRect ( $hWnd, $iCommandID ) Ermittelt das begrenzende Rechteck fuer einen Button (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonRectEx ( $hWnd, $iCommandID ) Ermittelt das begrenzende Rechteck fuer einen festgelegten Toolbar Button (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonSize ( $hWnd ) Ermittelt die aktuelle Breite und Hoehe eines Buttons in Pixel (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonState ( $hWnd, $iCommandID ) Ermittelt Informationen ueber den Status eines festgelegten Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonStyle ( $hWnd, $iCommandID ) Ermittelt die Stilflags eines Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonText ( $hWnd, $iCommandID ) Ermittelt den dargestellten Text eines Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetColorScheme ( $hWnd ) Ermittelt Informationen ueber das Farbenschema (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetDisabledImageList ( $hWnd ) Ermittelt die Imagelist mit den deaktivierten Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetExtendedStyle ( $hWnd ) Ermittelt die erweiterten Stile (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetHotImageList ( $hWnd ) Ermittelt den Hot-Button in der Imagelist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetHotItem ( $hWnd ) Ermittelt den Index des Hotitems (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetImageList ( $hWnd ) Ermittelt die standardmaessige Imagelist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetInsertMark ( $hWnd ) Ermittelt die aktuelle Eingabemarke (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetInsertMarkColor ( $hWnd ) Ermittelt die Farbe die fuer das zeichnen der Einfuegemarke verwendet wird (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetMaxSize ( $hWnd ) Ermittelt die Gesamtgroesse aller sichtbaren Buttons und Trennzeichen (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetMetrics ( $hWnd ) Ermittelt die Eigenschaften eines Toolbar Controls (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetPadding ( $hWnd ) Ermittelt die horizontale und vertikale Einrueckung (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetRows ( $hWnd ) Ermittelt die Anzahl von Zeilen von Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetString ( $hWnd, $iIndex ) Ermittelt einen String von der Stringsammlung (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyle ( $hWnd ) Ermittelt die Stile die momentan in einem Toolbar-Control verwendet werden (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleAltDrag ( $hWnd ) Zeigt an, ob das Control es erlaubt, dass Buttons mitgeschleppt werden koennen (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleCustomErase ( $hWnd ) Zeigt an, ob das Control NM_CUSTOMDRAW Nachrichten erzeugt (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleFlat ( $hWnd ) Zeigt an, ob das Control flach ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleList ( $hWnd ) Zeigt an, ob das Control den Buttontext rechts im Bitmap hat oder nicht (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleRegisterDrop ( $hWnd ) Zeigt an, ob das Control TBN_GETOBJECT Nachrichten erzeugt (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleToolTips ( $hWnd ) Zeigt an, dass das Control ToolTips verwendet (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleTransparent ( $hWnd ) Ermittelt, ob das Control transparent ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleWrapable ( $hWnd ) Zeigt an, ob das Control "umbruchfaehig" ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetTextRows ( $hWnd ) Ermittelt die maximale Anzahl von Textzeilen, welche auf einem Button dargestellt werden koennen (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetToolTips ( $hWnd ) Ermittelt das Handle des ToolTip Controls (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_GetUnicodeFormat ( $hWnd ) Ermittelt das Unicode Zeichen-Format-Flag (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_HideButton ( $hWnd, $iCommandID [, $bHide = True] ) Versteckt oder zeigt den festgelegten Button (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_HighlightButton ( $hWnd, $iCommandID [, $bHighlight = True] ) Setzt den "hervorheben"-Status eines festgelegten Button Controls (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_HitTest ( $hWnd, $iX, $iY ) Ermittelt, wo ein Punkt innerhalb des Controls liegt (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_IndexToCommand ( $hWnd, $iIndex ) Ermittelt die Command ID, die mit dem Button verknuepft ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_InsertButton ( $hWnd, $iIndex, $iID, $iImage [, $sText = "" [, $iStyle = 0 [, $iState = 4 [, $iParam = 0]]]] ) Fuegt einen Button ein (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_InsertMarkHitTest ( $hWnd, $iX, $iY ) Ermittelt die Einfuegemarken-Informationen fuer einen Punkt (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonChecked ( $hWnd, $iCommandID ) Zeigt an, ob der festgelegte Button markiert ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonEnabled ( $hWnd, $iCommandID ) Zeigt an, ob der festgelegte Button aktiviert ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonHidden ( $hWnd, $iCommandID ) Prueft, ob der festgelegte Button versteckt ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonHighlighted ( $hWnd, $iCommandID ) Prueft, ob der festgelegte Button hervorgehoben ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonIndeterminate ( $hWnd, $iCommandID ) Zeigt an, ob der festgelegte Button deaktiviert ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonPressed ( $hWnd, $iCommandID ) Prueft, ob der Button geklickt ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_LoadBitmap ( $hWnd, $sFileName ) Fuegt von einer Datei einen Button zu der Imagelist hinzu (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_LoadImages ( $hWnd, $iBitMapID ) Laedt systemdefinierte Buttonbilder in eine Imagelist eines Toolbar Controls (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_MapAccelerator ( $hWnd, $sAccelKey ) Zeigt die ID des Button an welches zu dem festgelegten Shortcutbuchstaben gehoert (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_MoveButton ( $hWnd, $iOldPos, $iNewPos ) Verschiebt einen Button von einem Index zum anderen (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_PressButton ( $hWnd, $iCommandID [, $bPress = True] ) Drueckt oder laesst einen festgelegten Button los (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetAnchorHighlight ( $hWnd, $bAnchor ) Setzt die Einstellung von "anchor highlight" (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetBitmapSize ( $hWnd, $iWidth, $iHeight ) Setzt die Groesse des zu einer Toolbar hinzuzufuegenden Bitmapbildes (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonBitMap ( $hWnd, $iCommandID, $iIndex ) Setzt den Index des Bitmaps der mit einem Button verknuepft ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonInfo ( $hWnd, $iCommandID [, $iImage = -3 [, $iState = -1 [, $iStyle = -1 [, $iWidth = -1 [, $iParam = -1]]]]] ) Setzt Informationen fuer einen Button (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonInfoEx ( $hWnd, $iCommandID, $tButton ) Setzt erweiterte Informationen fuer einen Button (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonParam ( $hWnd, $iCommandID, $iParam ) Setzt einen Button Parameter Wert (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonSize ( $hWnd, $iHeight, $iWidth ) Setzt die Groesse der Buttons die zu der Toolbar hinzugefuegt werden sollen (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonState ( $hWnd, $iCommandID, $iState ) Setzt Informationen ueber den Status fest festgelegten Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonStyle ( $hWnd, $iCommandID, $iStyle ) Setzt die Stilflags eines Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonText ( $hWnd, $iCommandID, $sText ) Setzt den angezeigten Text des Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonWidth ( $hWnd, $iMin, $iMax ) Legt die minimale und maximale Breite des Buttons in einem Toolbar-Control fest (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetCmdID ( $hWnd, $iIndex, $iCommandID ) Setzt die Command ID eines Toolbar Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetColorScheme ( $hWnd, $iHighlight, $iShadow ) Setzt die Informationen zu einem Farbenschema (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetDisabledImageList ( $hWnd, $hImageList ) Setzt die deaktivierte Imagelist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetDrawTextFlags ( $hWnd, $iMask, $iDTFlags ) Setzt das Textzeichen Flag fuer die Toolbar (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetExtendedStyle ( $hWnd, $iStyle ) Setzt die erweiterten Fensterstile des Controls (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetHotImageList ( $hWnd, $hImageList ) Setzt die "hot" Button Imagelist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetHotItem ( $hWnd, $iIndex ) Setzt das "hot" Item (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetImageList ( $hWnd, $hImageList ) Setzt die Standard Button Imagelist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetIndent ( $hWnd, $iIndent ) Setzt die Einrueckung des ersten Button Controls (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetIndeterminate ( $hWnd, $iCommandID [, $bState = True] ) Setzt oder entfernt den "deaktiviert"-Status des festgelegten Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetInsertMark ( $hWnd, $iButton [, $iFlags = 0] ) Setzt die aktuelle Einfuegemarke fuer die Toolbar (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetInsertMarkColor ( $hWnd, $iColor ) Setzt die Farbe die fuer das zeichnen der Einfuegemarke verwendet wird (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetMaxTextRows ( $hWnd, $iMaxRows ) Setzt die maximale Anzahl von Textzeilen die Buttons anzeigen sollen (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetMetrics ( $hWnd, $iXPad, $iYPad, $iXSpacing, $iYSpacing ) Setzt die Eigenschaften eines Toolbar Controls (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetPadding ( $hWnd, $iCX, $iCY ) Legt die Einrueckung fest (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetParent ( $hWnd, $hParent ) Legt das Fenster fest, an welches das Control Nachrichten sendet (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetRows ( $hWnd, $iRows [, $bLarger = True] ) Setzt die Anzahl von Zeilen mit Buttons (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyle ( $hWnd, $iStyle ) Setzt die Stile des Controls (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleAltDrag ( $hWnd [, $bState = True] ) Legt fest, ob das Control es erlaubt, dass die Buttons mitgeschleppt werden koennen (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleCustomErase ( $hWnd [, $bState = True] ) Legt fest, ob das Control NM_CUSTOMDRAW Nachrichten erstellt (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleFlat ( $hWnd, $bState ) Legt fest, ob das Control flach ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleList ( $hWnd, $bState ) Bestimmt, ob das Control den Buttontext rechts im Bitmap hat oder nicht (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleRegisterDrop ( $hWnd, $bState ) Legt fest, ob das Control TBN_GETOBJECT Nachrichten erstellt (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleToolTips ( $hWnd, $bState ) Legt fest, ob das Control ToolTip hat (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleTransparent ( $hWnd, $bState ) Legt fest, ob das Control transparent ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleWrapable ( $hWnd, $bState ) Legt fest, ob das Control "umbruchfaehig" ist (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetToolTips ( $hWnd, $hToolTip ) Verknuepft ein ToolTip-Control mit einer Toolbar (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetUnicodeFormat ( $hWnd [, $bUnicode = False] ) Setzt das Unicode Zeichen-Format-Flag (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlToolbar_SetWindowTheme ( $hWnd, $sTheme ) Setzt den Visual Style (benoetigt: #include <GuiToolBar.au3>)
_GUICtrlTreeView_Add ( $hWnd, $hSibling, $sText [, $iImage = -1 [, $iSelImage = -1]] ) Fuegt ein neues Item am Ende hinzu (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_AddChild ( $hWnd, $hParent, $sText [, $iImage = -1 [, $iSelImage = -1]] ) Fuegt ein neues Child-Item Am Ende hinzu (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_AddChildFirst ( $hWnd, $hParent, $sText [, $iImage = -1 [, $iSelImage = -1]] ) Fuegt ein neues Child-Item am Anfang hinzu (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_AddFirst ( $hWnd, $hSibling, $sText [, $iImage = -1 [, $iSelImage = -1]] ) Fuegt ein neues Item am Anfang hinzu (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_BeginUpdate ( $hWnd ) Deaktiviert die Aktualisierung des Control-Items bis _EndUpdate aufgerufen wird (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_ClickItem ( $hWnd, $hItem [, $sButton = "left" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 0]]]] ) Klickt auf ein Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Create ( $hWnd, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x00000037 [, $iExStyle = 0x00000000]]]] ) Erstellt ein Treeview-Control (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_CreateDragImage ( $hWnd, $hItem ) Erstellt ein ziehbares Bitmap fuer das festgelegte Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_CreateSolidBitMap ( $hWnd, $iColor, $iWidth, $iHeight ) Erstellt ein vollfarbiges Bitmap (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Delete ( $hWnd [, $hItem = 0] ) Loescht ein Item und alle dessen Children (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DeleteAll ( $hWnd ) Loescht alle Items eines Treeview Controls (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DeleteChildren ( $hWnd, $hItem ) Loescht alle Children eines Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Destroy ( ByRef $hWnd ) Loescht das Control (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DisplayRect ( $hWnd, $hItem [, $bTextOnly = False] ) Gibt das begrenzende Rechteck fuer ein Treeitem zurueck (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DisplayRectEx ( $hWnd, $hItem [, $bTextOnly = False] ) Gibt das begrenzende Rechteck fuer ein Treeitem zurueck (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EditText ( $hWnd, $hItem ) Beginnt die Editierung des Textes des festgelegten Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EndEdit ( $hWnd [, $bCancel = False] ) Beendet das Editieren des Textes des festgelegten Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EndUpdate ( $hWnd ) Aktiviert wieder die Aktualisierung des Control-Items, welches durch die BeginUpdate Funktion deaktiviert wurde (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EnsureVisible ( $hWnd, $hItem ) Stellt sicher, dass ein Item sichtbar ist, notfalls durch aufklappen des Items oder durch scrollen des Controls (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Expand ( $hWnd [, $hItem = 0 [, $bExpand = True]] ) Erweitert (aufklappen) oder reduziert (zuklappen) die Liste mit den Subitems, welche zu dem festgelegten "Parent"-Item gehoeren (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_ExpandedOnce ( $hWnd, $hItem ) Zeigt an, ob die Itemliste der Child-Items mindestens einmal aufgeklappt wurde (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_FindItem ( $hWnd, $sText [, $bInStr = False [, $hStart = 0]] ) Ermittelt ein Item, basierend auf dessen Text (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_FindItemEx ( $hWnd, $sTreePath [, $hStart = 0] ) Ermittelt ein Item basierend auf einem Treeviewpfad (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetBkColor ( $hWnd ) Ermittelt die Hintergrundfarbe des Textes (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetBold ( $hWnd, $hItem ) Zeigt an, ob das Item im Stil 'fett' gezeichnet wurde (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChecked ( $hWnd, $hItem ) Ermittelt, ob die Checkbox eines Items angehakt ist (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChildCount ( $hWnd, $hItem ) Ermittelt die Anzahl von Children eines Parent-Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChildren ( $hWnd, $hItem ) Prueft, ob ein Item Childs besitzt (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetCount ( $hWnd ) Ermittelt die Anzahl von Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetCut ( $hWnd, $hItem ) Zeigt an, ob das Item dargestellt wird, wie wenn es sich in einer Ausschneide Operation befindet (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetDropTarget ( $hWnd, $hItem ) Zeigt an, ob das Item wie ein "drag and drop" Ziel dargestellt ist (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetEditControl ( $hWnd ) Ermittelt das Handle zu dem Edit-Control, welches verwendet wird, um den Text eines Items zu aendern (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetExpanded ( $hWnd, $hItem ) Ermittelt ob das Item ausgeklappt ist (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstChild ( $hWnd, $hItem ) Ermittelt das erste Item des Child-Items des festgelegten Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstItem ( $hWnd ) Ermittelt das oberste oder das erste Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstVisible ( $hWnd ) Ermittelt das erste sichtbare Item in dem Control (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFocused ( $hWnd, $hItem ) Ermittelt, ob das Item den Fokus hat (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetHeight ( $hWnd ) Ermittelt die aktuelle Hoehe von jedem Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetImageIndex ( $hWnd, $hItem ) Ermittelt den normalen Status Bilderindex (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetImageListIconHandle ( $hWnd, $iIndex ) Ermittelt das Handle der Imagelist (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetIndent ( $hWnd ) Ermittelt wie viele Pixel die Child-Items im Vergleich zu dessen Parent-Items eingerueckt sind (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetInsertMarkColor ( $hWnd ) Ermittelt die Farbe die fuer die Einfuegemarke verwendet wird (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetISearchString ( $hWnd ) Ermittelt den inkrementellen Suchstring (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemByIndex ( $hWnd, $hItem, $iIndex ) Ermittelt ein Item durch dessen Position in der Liste der Child-Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemHandle ( $hWnd [, $hItem = 0] ) Ermittelt das Handle eines Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemParam ( $hWnd [, $hItem = 0] ) Ermittelt den anwendungsspezifischen Wert fuer ein Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetLastChild ( $hWnd, $hItem ) Ermittelt das letzte Child-Item eines festgelegten Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetLineColor ( $hWnd ) Ermittelt die Farbe der Zeile (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNext ( $hWnd, $hItem ) Ermittelt das naechste Item nach dem aufgerufenen Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextChild ( $hWnd, $hItem ) Gibt das naechste Item, welches sich auf der gleichen Ebene wie das festgelegte Item befindet, zurueck (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextSibling ( $hWnd, $hItem ) Gibt das naechste Item, welches auf der gleichen Ebene wie das festgelegte Item liegt, zurueck (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextVisible ( $hWnd, $hItem ) Ermittelt das naechste sichtbare Item, welches dem angegebenen Item folgt (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNormalImageList ( $hWnd ) Ermittelt die normale Imagelist (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetParentHandle ( $hWnd [, $hItem = 0] ) Ermittelt das Parent-Handle des Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetParentParam ( $hWnd [, $hItem = 0] ) Ermittelt die Uebersteuerungs-ID/Parameter des Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrev ( $hWnd, $hItem ) Ermittelt das vorherige Item vor dem aufgerufenen Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevChild ( $hWnd, $hItem ) Gibt das vorherige Item, welches sich auf der gleichen Ebene wie das festgelegte Item befindet, zurueck (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevSibling ( $hWnd, $hItem ) Gibt das vorherige Item, welches auf der gleichen Ebene wie das festgelegte Item liegt, zurueck (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevVisible ( $hWnd, $hItem ) Ermittelt das erste sichtbare Item, welches vor dem angegebenen Item steht (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetScrollTime ( $hWnd ) Ermittelt die maximale Scrollzeit (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelected ( $hWnd, $hItem ) Ermittelt, ob das Item sich im "markiert"-Status befindet (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelectedImageIndex ( $hWnd, $hItem ) Ermittelt den Index des Bildes in der Imagelist, welches erscheint, wenn das Item ausgewaehlt ist (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelection ( $hWnd ) Ermittelt das aktuell markierte Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSiblingCount ( $hWnd, $hItem ) Ermittelt die Anzahl von Items, die sich auf der gleichen Ebene befinden wie das festgelegte Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetState ( $hWnd [, $hItem = 0] ) Ermittelt den Status eines Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetStateImageIndex ( $hWnd, $hItem ) Ermittelt den Index des Statusbildes, welches fuer das Item dargestellt wird (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetStateImageList ( $hWnd ) Ermittelt das Handle zu der StatusImagelist (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetText ( $hWnd [, $hItem = 0] ) Ermittelt den Text des Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetTextColor ( $hWnd ) Ermittelt die Textfarbe (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetToolTips ( $hWnd ) Ermittelt das Handle zu dem Child-ToolTip-Control (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetTree ( $hWnd [, $hItem = 0] ) Ermittelt den kompletten Pfad bis hin zum gewuenschten Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetUnicodeFormat ( $hWnd ) Ermittelt das Unicode Zeichen-Format-Flag (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetVisible ( $hWnd, $hItem ) Zeigt an, ob das Item momentan sichtbar im Controlbild ist (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetVisibleCount ( $hWnd ) Gibt die Anzahl von Items zurueck, die komplett sichtbar sind (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTest ( $hWnd, $iX, $iY ) Gibt Informationen ueber den Ort eines Punktes relativ zu dem Control zurueck (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTestEx ( $hWnd, $iX, $iY ) Gibt Informationen ueber den Ort eines Punktes relativ zum Control zurueck (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTestItem ( $hWnd, $iX, $iY ) Gibt das Item an den festgelegten Koordinaten zurueck (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Index ( $hWnd, $hItem ) Ermittelt die Position eines Items in der Liste (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_InsertItem ( $hWnd, $sItem_Text [, $hItem_Parent = 0 [, $hItem_After = 0 [, $iImage = -1 [, $iSelImage = -1]]]] ) Fuegt ein Item ein (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_IsFirstItem ( $hWnd, $hItem ) Zeigt an, ob das Treeitem das erste Item ist (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_IsParent ( $hWnd, $hParent, $hItem ) Zeigt an, ob ein Item in der Hierarchie ueber einem anderen Item steht (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Level ( $hWnd, $hItem ) Ermittelt die Ebene eines Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SelectItem ( $hWnd, $hItem [, $iFlag = 0] ) Waehlt das festgelegte Item aus, scrollt das Item in die Ansicht oder zeichnet das Item neu (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SelectItemByIndex ( $hWnd, $hItem, $iIndex ) Waehlt ein Item, basierend auf dessen Index in der Parentliste aus (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetBkColor ( $hWnd, $vRGBColor ) Setzt die Hintergrundfarbe (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetBold ( $hWnd, $hItem [, $bFlag = True] ) Legt fest, ob das Item im Stil 'fett' gezeichnet werden soll (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetChecked ( $hWnd, $hItem [, $bCheck = True] ) Legt fest, ob die Checkbox eines Items angehakt ist oder nicht (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetCheckedByIndex ( $hWnd, $hItem, $iIndex [, $bCheck = True] ) Legt fest, ob die Checkbox eines durch seinen Index angegebenen Eintrags eines Items angehakt ist oder nicht (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetChildren ( $hWnd, $hItem [, $bFlag = True] ) Setzt das Child-Item-Flag (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetCut ( $hWnd, $hItem [, $bFlag = True] ) Legt fest, ob das Item dargestellt wird, als waere es Teil einer Ausschneide-/ Einfuege-Operation (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetDropTarget ( $hWnd, $hItem [, $bFlag = True] ) Bestimmt, ob das Item als "drag and drop" Ziel dargestellt werden soll (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetFocused ( $hWnd, $hItem [, $bFlag = True] ) Entscheided, ob das Item den Fokus besitzt (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetHeight ( $hWnd, $iHeight ) Setzt die Hoehe fuer jedes Item (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetIcon ( $hWnd [, $hItem = 0 [, $sIconFile = "" [, $iIconID = 0 [, $iImageMode = 6]]]] ) Setzt ein Itemicon (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetImageIndex ( $hWnd, $hItem, $iIndex ) Setzt den Index in der Imagelist, welches Bild fuer einen normalen Status verwendet werden soll (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetIndent ( $hWnd, $iIndent ) Setzt die Breite der Einrueckung fuer das Treeview-Control und zeichnet das Control neu um die neue Breite darzustellen (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetInsertMark ( $hWnd, $hItem [, $bAfter = True] ) Setzt die Einfuegemarke (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetInsertMarkColor ( $hWnd, $iColor ) Setzt die Farbe die fuer die Einfuegemarke verwendet werden soll (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetItemHeight ( $hWnd, $hItem, $iIntegral ) Setzt die Hoehe eines individuellen Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetItemParam ( $hWnd, $hItem, $iParam ) Setzt den festgelegten Wert des Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetLineColor ( $hWnd, $vRGBColor ) Setzt die Linienfarbe (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetNormalImageList ( $hWnd, $hImageList ) Setzt die normale Imagelist fuer das Control (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetScrollTime ( $hWnd, $iTime ) Setzt die maximale Scrollzeit (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetSelected ( $hWnd, $hItem [, $bFlag = True] ) Legt fest, ob das Item im markierten Zustand erscheinen soll (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetSelectedImageIndex ( $hWnd, $hItem, $iIndex ) Setzt den Index des Bildes aus einer Imagelist, welches angezeigt werden soll, wenn das angegebene Item des TreeViews ausgewaehlt wurde (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetState ( $hWnd, $hItem [, $iState = 0 [, $bSetState = True]] ) Setzt den Status eines festgelegten Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetStateImageIndex ( $hWnd, $hItem, $iIndex ) Setzt den Index in die Imagelist fuer das Statusbild (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetStateImageList ( $hWnd, $hImageList ) Setzt die StatusImagelist fuer das Control (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetText ( $hWnd [, $hItem = 0 [, $sText = ""]] ) Setzt den Text eines Items (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetTextColor ( $hWnd, $vRGBColor ) Setzt die Textfarbe (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetToolTips ( $hWnd, $hToolTip ) Setzt das Handle zu dem Child-ToolTip-Control (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetUnicodeFormat ( $hWnd [, $bFormat = True] ) Setzt dast Unicode Zeichen-Format-Flag (benoetigt: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Sort ( $hWnd ) Sortiert die Items (benoetigt: #include <GuiTreeView.au3>)
_GUIImageList_Add ( $hWnd, $hImage [, $hMask = 0] ) Fuegt ein Bild oder mehrere Bilder einer Imagelist hinzu (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_AddBitmap ( $hWnd, $sImage [, $sMask = ""] ) Fuegt ein Bitmap einer Imagelist hinzu (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_AddIcon ( $hWnd, $sFilePath [, $iIndex = 0 [, $bLarge = False]] ) Fuegt ein Icon der Imagelist hinzu (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_AddMasked ( $hWnd, $hImage [, $iMask = 0] ) Fuegt ein Bild oder mehrere Bilder einer Imagelist hinzu, welche eine Maske von dem festgelegten Bitmap erstellt (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_BeginDrag ( $hWnd, $iTrack, $iXHotSpot, $iYHotSpot ) Beginnt mit dem ziehen eines Bildes (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_Copy ( $hWnd, $iSource, $iDestination ) Quellbild wird zum Index des Zielbildes kopiert (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_Create ( [$iCX = 16 [, $iCY = 16 [, $iColor = 4 [, $iOptions = 0 [, $iInitial = 4 [, $iGrow = 4]]]]]] ) Erstellt ein Imagelist Control (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_Destroy ( $hWnd ) Loescht die Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_DestroyIcon ( $hIcon ) Loescht ein Icon und gibt den durch das Icon verwendeten Speicher wieder frei (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_DragEnter ( $hWnd, $iX, $iY ) Zeigt das ziehende Bild an der festgelegten Position innerhalb des Fenster (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_DragLeave ( $hWnd ) Gibt das festgelegte Fenster frei und versteckt das zu ziehende Bild. Es wird dem Fenster erlaubt sich zu aktualisieren (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_DragMove ( $iX, $iY ) Bewegt das Bild, welches waehrend einer drag-and-drop Aktion gezogen wird (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_Draw ( $hWnd, $iIndex, $hDC, $iX, $iY [, $iStyle = 0] ) Zeichnet ein Item aus einer Imagelist an dem festgelegten Bereich (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_DrawEx ( $hWnd, $iIndex, $hDC, $iX, $iY [, $iDX = 0 [, $iDY = 0 [, $iRGBBk = 0xFFFFFFFF [, $iRGBFg = 0xFFFFFFFF [, $iStyle = 0]]]]] ) Zeichnet ein Item aus einer Imagelist an dem festgelegten Bereich (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_Duplicate ( $hWnd ) Erstellt ein Duplikat einer bestehenden Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_EndDrag (  ) Beendet eine ziehende Aktion (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_GetBkColor ( $hWnd ) Ermittelt die aktuelle Hintergrundfarbe fuer eine Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_GetIcon ( $hWnd, $iIndex [, $iStyle = 0] ) Erstellt ein Icon von einem Bild und einer Maske in einer Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_GetIconHeight ( $hWnd ) Ermittelt die Hoehe der Bilder in einer Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_GetIconSize ( $hWnd ) Ermittelt die Abmessungen von Bildern in der Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_GetIconSizeEx ( $hWnd ) Ermittelt die Dimensionen der Bilder in der Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_GetIconWidth ( $hWnd ) Ermittelt die Breite der Bilder in einer Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_GetImageCount ( $hWnd ) Ermittelt die Anzahl von Bildern in einer Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_GetImageInfoEx ( $hWnd, $iIndex ) Ermittelt Informationen ueber ein Bild (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_Remove ( $hWnd [, $iIndex = -1] ) Entfernt ein oder mehrere Bilder von einer Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_ReplaceIcon ( $hWnd, $iIndex, $hIcon ) Ersetzt ein Bild durch ein Icon oder einen Cursor (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_SetBkColor ( $hWnd, $iClrBk ) Setzt die Hintergrundfarbe fuer eine Imagelist (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_SetIconSize ( $hWnd, $iCX, $iCY ) Setzt die Abmessungen der Bilder in einer Imagelist und entfernt alle Bilder von der Liste (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_SetImageCount ( $hWnd, $iNewCount ) Passt die Groesse einer existierenden Imagelist neu an (benoetigt: #include <GuiImageList.au3>)
_GUIImageList_Swap ( $hWnd, $iSource, $iDestination ) Tauscht das Bild zwischen dem Quell- und Zielindex aus (benoetigt: #include <GuiImageList.au3>)
_GUIScrollBars_EnableScrollBar ( $hWnd [, $iSBflags = $SB_BOTH [, $iArrows = $ESB_ENABLE_BOTH]] ) Aktiviert/Deaktiviert die Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarInfoEx ( $hWnd, $iObject ) Ermittelt Informationen ueber die festgelegten Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarRect ( $hWnd, $iObject ) Ermittelt die Koordinaten der Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarRGState ( $hWnd, $iObject ) Ermittelt den Status einer Scrollbarkomponente (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYLineButton ( $hWnd, $iObject ) Ermittelt die Hoehe oder Breite der Scrollbox (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYThumbBottom ( $hWnd, $iObject ) Ermittelt die untere oder rechte Position der Scrollbox (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYThumbTop ( $hWnd, $iObject ) Ermittelt die obere oder linke Position der Scrollbox (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfo ( $hWnd, $iBar, ByRef $tSCROLLINFO ) Ermittelt die Parameter der Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoEx ( $hWnd, $iBar ) Ermittelt die Parameter der Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoMax ( $hWnd, $iBar ) Ermittelt die maximale Scrollposition (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoMin ( $hWnd, $iBar ) Ermittelt die minimale Scrollposition (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoPage ( $hWnd, $iBar ) Ermittelt die Seitengroesse (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoPos ( $hWnd, $iBar ) Ermittelt die Position der Scrollbox (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoTrackPos ( $hWnd, $iBar ) Ermittelt die augenblickliche Position der Scrollbox, waehrend der Anwender diese bewegt (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollPos ( $hWnd, $iBar ) Ermittelt die aktuelle Position der Scrollbox in der festgelegten Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollRange ( $hWnd, $iBar ) Ermittelt die aktuelle minimale und maximale Scrollposition fuer die festgelegte Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_Init ( $hWnd [, $iMaxH = -1 [, $iMaxV = -1]] ) Initialisiert die Scrollbar fuer das Fenster (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_ScrollWindow ( $hWnd, $iXAmount, $iYAmount ) Scrollt den Inhalt des angegebenen Fensterbereiches (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfo ( $hWnd, $iBar, $tSCROLLINFO [, $bRedraw = True] ) Setzt die Parameter der Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoMax ( $hWnd, $iBar, $iMax ) Setzt die maximale Scrollposition (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoMin ( $hWnd, $iBar, $iMin ) Setzt die minimale Scrollposition (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoPage ( $hWnd, $iBar, $iPage ) Setzt die Seitengroesse (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoPos ( $hWnd, $iBar, $iPos ) Setzt die aktuelle Position der Scrollbox in der festgelegten Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollRange ( $hWnd, $iBar, $iMinPos, $iMaxPos ) Setzt die minimale und maximale Scrollposition fuer die festgelegte Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIScrollBars_ShowScrollBar ( $hWnd, $iBar [, $bShow = True] ) Zeigt oder versteckt die angegebene Scrollbar (benoetigt: #include <GuiScrollBars.au3>)
_GUIToolTip_Activate ( $hWnd ) Aktiviert ein ToolTip Control (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_AddTool ( $hTool, $hWnd, $sText [, $iID = 0 [, $iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0 [, $iFlags = Default [, $iParam = 0]]]]]]] ) Registriert ein Tool mit dem ToolTip-Control (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_AdjustRect ( $hWnd, ByRef $tRECT [, $bLarger = True] ) Berechnet das Rechteck des Textes von dem Fensterrechteck (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_BitsToTTF ( $iFlags ) Dekodiert Bit Flags in $TTF_Flags (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_Create ( $hWnd [, $iStyle = $_TT_ghTTDefaultStyle] ) Erstellt ein ToolTip-Control (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_Deactivate ( $hWnd ) Deaktiviert ein ToolTip Control (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_DelTool ( $hWnd, $hTool [, $iID = 0] ) Loescht ein Tool von einem Tooltip Control (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_Destroy ( ByRef $hWnd ) Loescht ein ToolTip-Control (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_EnumTools ( $hWnd, $iIndex ) Ermittelt Informationen ueber das aktuelle Tool (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleHeight ( $hWnd, $hTool, $iID [, $iFlags = 0x00000001 + 0x00000010] ) Gibt die Hoehe des Controls zurueck (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleSize ( $hWnd, $hTool, $iID [, $iFlags = 0x00000001 + 0x00000010] ) Gibt die Breite und Hoehe des Controls zurueck (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleWidth ( $hWnd, $hTool, $iID [, $iFlags = 0x00000001 + 0x00000010] ) Gibt die Breite des Controls zurueck (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetCurrentTool ( $hWnd ) Ermittelt Informationen fuer das aktuelle Tool (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetDelayTime ( $hWnd, $iDuration ) Ermittelt die Initial-, Popup- und Reshow- Dauer eines ToolTip-Controls (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetMargin ( $hWnd ) Ermittelt den oberen, linken, unteren und rechten Rand eines ToolTip-Controls (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetMarginEx ( $hWnd ) Ermittelt den oberen, linken, unteren und rechten Rand (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetMaxTipWidth ( $hWnd ) Ermittelt die maximale Breite eines ToolTip Fensters (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetText ( $hWnd, $hTool, $iID ) Ermittelt den Text eines Tools (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetTipBkColor ( $hWnd ) Ermittelt die Hintergrundfarbe (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetTipTextColor ( $hWnd ) Ermittelt die Textfarbe des ToolTip-Controls (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetTitleBitMap ( $hWnd ) Ermittelt das Titel Bitmap Icon (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetTitleText ( $hWnd ) Ermittelt den Titel (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetToolCount ( $hWnd ) Ermittelt die Anzahl von Tools (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_GetToolInfo ( $hWnd, $hTool, $iID ) Ermittelt die Informationen ueber ein festgelegtes Tool (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_HitTest ( $hWnd, $hTool, $iX, $iY ) Ermittelt ueber die Informationen, die ein ToolTip-Control ueber ein Tool enthaelt, ob sich ein Koordinatenpunkt innerhalb des Tooltip-Rechtecks befindet (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_NewToolRect ( $hWnd, $hTool, $iID, $iLeft, $iTop, $iRight, $iBottom ) Setzt das neue begrenzende Rechteck fuer ein Tool (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_Pop ( $hWnd ) Entfernt einen angezeigten ToolTip von der Anzeige (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_PopUp ( $hWnd ) Laesst den ToolTip an der letzten bekannten Stelle der Maus Koordinaten erscheinen (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_SetDelayTime ( $hWnd, $iDuration, $iTime ) Setzt die Dauer der Initial-, Popup- und Reshow-Dauer eines Tooltips (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_SetMargin ( $hWnd, $iLeft, $iTop, $iRight, $iBottom ) Setzt den oberen, linken, unteren und rechten Rand eines ToolTips (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_SetMaxTipWidth ( $hWnd, $iWidth ) Setzt die maximale Breite eines ToolTip Fensters (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_SetTipBkColor ( $hWnd, $iColor ) Setzt die Hintergrundfarbe eines ToolTips (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_SetTipTextColor ( $hWnd, $iColor ) Setzt die Textfarbe (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_SetTitle ( $hWnd, $sTitle [, $iIcon = 0] ) Fuegt ein Standardicon und ein Titelstring hinzu (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_SetToolInfo ( $hWnd, $sText [, $iID = 0 [, $iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0 [, $iFlags = Default [, $iParam = 0]]]]]]] ) Setzt die Informationen fuer ein Tool (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_SetWindowTheme ( $hWnd, $sStyle ) Setzt den Visual Style (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_ToolExists ( $hWnd ) Ermittelt, ob das aktuelle Tool existiert (bzw. angezeigt wird) (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_ToolToArray ( $hWnd, ByRef $tToolInfo, $iError ) Schreibt die ToolInfo Struktur in ein Array (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_TrackActivate ( $hWnd [, $bActivate = True [, $hTool = 0 [, $iID = 0]]] ) Aktiviert oder deaktiviert das Verfolgen des ToolTips (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_TrackPosition ( $hWnd, $iX, $iY ) Setzt die Position des verfolgenden ToolTips (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_Update ( $hWnd ) Erzwingt das aktuelle Tool zum Neuaufbau (benoetigt: #include <GuiToolTip.au3>)
_GUIToolTip_UpdateTipText ( $hWnd, $hTool, $iID, $sText ) Setzt den ToolTip Text fuer ein Tool (benoetigt: #include <GuiToolTip.au3>)
_HexToString ( $sHex ) Konvertiert einen hexadezimalen String in einen String (benoetigt: #include <String.au3>)
_IE_Example ( [$sModule = "basic"] ) Zeigt ein Browserfenster mit vorgefertigten HTML-Seiten an, die in der IE.au3 verwendet werden und die man fuer eigene Tests nutzen kann (benoetigt: #include <IE.au3>)
_IE_Introduction ( [$sModule = "basic"] ) Zeigt grundlegende Informationen ueber die IE.au3 in einem neuen Browserfenster an (benoetigt: #include <IE.au3>)
_IE_VersionInfo (  ) Gibt ein Array mit Informationen ueber die aktuelle IE.au3-Version zurueck (benoetigt: #include <IE.au3>)
_IEAction ( ByRef $oObject, $sAction ) Geht in der Historyliste einen Eintrag rueckwaerts.
_IEAction ( ByRef $oObject, $sAction ) Veranlasst das Element den Fokus zu verlieren, der Fokus wird jedoch nicht auf das naechste Element in der Tab-Reihenfolge gesetzt.
_IEAction ( ByRef $oObject, $sAction ) Simuliert einen Klick auf das angegebene Element.
_IEAction ( ByRef $oObject, $sAction ) Kopiert die momentane Auswahl in die Zwischenablage.
_IEAction ( ByRef $oObject, $sAction ) Kopiert die momentane Auswahl in die Zwischenablage und loescht sie danach.
_IEAction ( ByRef $oObject, $sAction ) Loescht die momentane Auswahl.
_IEAction ( ByRef $oObject, $sAction ) Deaktiviert das angegebene Element.
_IEAction ( ByRef $oObject, $sAction ) Aktiviert das angegebene Element.
_IEAction ( ByRef $oObject, $sAction ) Weist dem Element den Fokus zu.
_IEAction ( ByRef $oObject, $sAction ) Geht in der Historyliste einen Eintrag vorwaerts.
_IEAction ( ByRef $oObject, $sAction ) Geht zur momentanen Home- oder Startseite.
_IEAction ( ByRef $oObject, $sAction ) Setzt den Status des Objekts auf versteckt.
_IEAction ( ByRef $oObject, $sAction ) Ueberschreibt die momentane Auswahl mit dem Inhalt der Zwischenablage.
_IEAction ( ByRef $oObject, $sAction ) Oeffnet den Drucken Dialog, damit der Benutzer die momentane Seite drucken kann.
_IEAction ( ByRef $oObject, $sAction ) Direkt mit dem Standard-Drucker drucken (kein Dialog).
_IEAction ( ByRef $oObject, $sAction ) Schliesst das Objekt.
_IEAction ( ByRef $oObject, $sAction ) Aktualisiert das momentane Dokument.
_IEAction ( ByRef $oObject, $sAction ) Oeffnet die Dialogbox zum speichern der derzeitigen Webseite in eine Datei.
_IEAction ( ByRef $oObject, $sAction ) scrollt das Dokument so, dass das festgelegt Element sichtbar ist.
_IEAction ( ByRef $oObject, $sAction ) Geht zur momentanen "suchen"-Seite.
_IEAction ( ByRef $oObject, $sAction ) Waehlt das ganze Dokument aus.
_IEAction ( ByRef $oObject, $sAction ) Beendet alle nicht erledigte Aufrufe, Downloads und dynamische Seitenelemente, wie z.B. Hintergrundgeraeusche und Animationen.
_IEAction ( ByRef $oObject, $sAction ) Hebt die momentane Auswahl auf.
_IEAction ( ByRef $oObject, $sAction ) Setzt den Status des Objekts auf sichtbar.
_IEAttach ( $sString [, $sMode = "title" [, $iInstance = 1]] ) Verknuepft sich mit der angegebenen Instanz des Internet Explorers, die der gesuchte String - abhaengig vom Suchmodus - enthaelt (benoetigt: #include <IE.au3>)
_IEBodyReadHTML ( ByRef $oObject ) Gibt den HTML-Code innerhalb des <body>-Tags des Dokumentes zurueck (benoetigt: #include <IE.au3>)
_IEBodyReadText ( ByRef $oObject ) Gibt den Text zwischen dem <body>-tag zurueck (benoetigt: #include <IE.au3>)
_IEBodyWriteHTML ( ByRef $oObject, $sHTML ) Ersetzt den HTML-Code innerhalb des <body>-Tags des Dokumentes (benoetigt: #include <IE.au3>)
_IECreate ( [$sUrl = "about:blank" [, $iTryAttach = 0 [, $iVisible = 1 [, $iWait = 1 [, $iTakeFocus = 1]]]]] ) Erstellt ein Internet-Explorer-Fenster (benoetigt: #include <IE.au3>)
_IECreateEmbedded (  ) Erstellt ein Webbrowserobjekt, das man mit GuiCtrlCreateObj() in eine Autoit-GUI einbinden kann (benoetigt: #include <IE.au3>)
_IEDocGetObj ( ByRef $oObject ) Wenn die Funktion ein beliebiges DOM-Objekt uebergeben bekommt, gibt sie eine Referenz auf das verknuepfte Dokument zurueck (benoetigt: #include <IE.au3>)
_IEDocInsertHTML ( ByRef $oObject, $sString [, $sWhere = "beforeend"] ) Fuegt HTML in oder um ein Element herum ein (benoetigt: #include <IE.au3>)
_IEDocInsertText ( ByRef $oObject, $sString [, $sWhere = "beforeend"] ) Fuegt Text in oder um ein Element herum ein (benoetigt: #include <IE.au3>)
_IEDocReadHTML ( ByRef $oObject ) Gibt den kompletten HTML-Quelltext eines Dokuments zurueck (benoetigt: #include <IE.au3>)
_IEDocWriteHTML ( ByRef $oObject, $sHTML ) Ersetzt den HTML-Code des gesamten Dokuments (benoetigt: #include <IE.au3>)
_IEErrorNotify ( [$vNotify = Default] ) Legt fest, ob die IE.au3 Warnung und Fehler automatisch (auf der Konsole) ausgibt (benoetigt: #include <IE.au3>)
_IEFormElementCheckBoxSelect ( ByRef $oObject, $sString [, $sName = "" [, $iSelect = 1 [, $sMode = "byValue" [, $iFireEvent = 1]]]] ) Setzt den Wert des angegebenen Formitems (benoetigt: #include <IE.au3>)
_IEFormElementGetCollection ( ByRef $oObject [, $iIndex = -1] ) Gibt eine Sammlung von Objektvariablen zurueck, welche alle Formular-Elemente eines bestimmten Formulares beinhaltet (benoetigt: #include <IE.au3>)
_IEFormElementGetObjByName ( ByRef $oObject, $sName [, $iIndex = 0] ) Gibt die Objektreferenz auf ein, ueber den Namen bestimmtes, Formular-Element zurueck (benoetigt: #include <IE.au3>)
_IEFormElementGetValue ( ByRef $oObject ) Gibt den Wert eines angegebenen Formularelements zurueck (benoetigt: #include <IE.au3>)
_IEFormElementOptionSelect ( ByRef $oObject, $sString [, $iSelect = 1 [, $sMode = "byValue" [, $iFireEvent = 1]]] ) Setzt den Wert des angegebenen Formelements (benoetigt: #include <IE.au3>)
_IEFormElementRadioSelect ( ByRef $oObject, $sString, $sName [, $iSelect = 1 [, $sMode = "byValue" [, $iFireEvent = 1]]] ) Setzt den Wert eines angegebenen Formitems (benoetigt: #include <IE.au3>)
_IEFormElementSetValue ( ByRef $oObject, $sNewValue [, $iFireEvent = 1] ) Setzt den Wert eines angegebenen Formelements (benoetigt: #include <IE.au3>)
_IEFormGetCollection ( ByRef $oObject [, $iIndex = -1] ) Gibt eine Auflistung von Objektvariablen zurueck, die alle Formulare (HTML-Tag) in dem Dokument oder ein einzelnes Formular (ueber seinen Index charakterisiert) beinhaltet (benoetigt: #include <IE.au3>)
_IEFormGetObjByName ( ByRef $oObject, $sName [, $iIndex = 0] ) Gibt einen Objekt Verweis auf eine Form durch den Namen zurueck (benoetigt: #include <IE.au3>)
_IEFormImageClick ( ByRef $oObject, $sLinkText [, $sMode = "src" [, $iIndex = 0 [, $iWait = 1]]] ) Simuliert einen Mausklick auf ein <input type=image>. Das Bild kann durch den Alternativtext (Attribut alt), den Namen (Attribut name) und den Quellpfad (Attribut src) identifiziert werden (benoetigt: #include <IE.au3>)
_IEFormReset ( ByRef $oObject ) Setzt das angegebene Formularelement zurueck auf die Standardwerte beim Laden der Seite (benoetigt: #include <IE.au3>)
_IEFormSubmit ( ByRef $oObject [, $iWait = 1] ) Ein angegebenes Formular absenden (benoetigt: #include <IE.au3>)
_IEFrameGetCollection ( ByRef $oObject [, $iIndex = -1] ) Gibt eine Sammlung zurueck, die alle Frames eines Framesets, die iFrames einer normalen Internetseite, einen einzelnen Frame oder einen iFrame (bestimmt durch den Index) enthaelt (benoetigt: #include <IE.au3>)
_IEFrameGetObjByName ( ByRef $oObject, $sName ) Gibt eine Objekt zurueck, welches auf einen Frame oder iFrame verweist und durch einen Namen bestimmt wurde (benoetigt: #include <IE.au3>)
_IEGetObjById ( ByRef $oObject, $sID ) Gibt eine Objektvariable zurueck, die durch die ID oder den Namen bestimmt wird (benoetigt: #include <IE.au3>)
_IEGetObjByName ( ByRef $oObject, $sName [, $iIndex = 0] ) Gibt eine Objektvariable anhand des Namens des Objektes zurueck (benoetigt: #include <IE.au3>)
_IEHeadInsertEventScript ( ByRef $oObject, $sHTMLFor, $sEvent, $sScript ) Fuegt ein JavaScript innerhalb des <HEAD>-Abschnittes in das Dokument ein (benoetigt: #include <IE.au3>)
_IEImgClick ( ByRef $oObject, $sLinkText [, $sMode = "src" [, $iIndex = 0 [, $iWait = 1]]] ) Simuliert einen Mausklick auf ein Bild. Das Bild kann durch einen Teil des Wertes der Attribute alt, name oder src identifiziert werden (benoetigt: #include <IE.au3>)
_IEImgGetCollection ( ByRef $oObject [, $iIndex = -1] ) Gibt eine Auflistungsobjektvariable zurueck, die alle Bilder (HTML-Tag IMG) in dem Dokument oder ein einzelnes Bild (per angegebenem Index) beinhaltet (benoetigt: #include <IE.au3>)
_IEIsFrameSet ( ByRef $oObject ) Ueberprueft, ob das angegebene Fenster ein FrameSet enthaelt (benoetigt: #include <IE.au3>)
_IELinkClickByIndex ( ByRef $oObject, $iIndex [, $iWait = 1] ) Simuliert einen Mausklick auf einem Link eines bei 0 beginnenden Indexes (in der Reihenfolge der Quelle) (benoetigt: #include <IE.au3>)
_IELinkClickByText ( ByRef $oObject, $sLinkText [, $iIndex = 0 [, $iWait = 1]] ) Simuliert einen Mausklick auf einen Link. Er wird anhand eines angegebenen Textes identifiziert, der in seinem Namen vorkommen muss (benoetigt: #include <IE.au3>)
_IELinkGetCollection ( ByRef $oObject [, $iIndex = -1] ) Gibt ein Auflistungsobjekt zurueck, das entweder alle Links des Dokuments oder einen dem Index entsprechenden Link enthaelt (benoetigt: #include <IE.au3>)
_IELoadWait ( ByRef $oObject [, $iDelay = 0 [, $iTimeout = -1]] ) Pausiert das Skript bis eine Seite im Browser fertig geladen wurde (benoetigt: #include <IE.au3>)
_IELoadWaitTimeout ( [$iTimeout = -1] ) Abfrage oder Setzen des _IELoadWait-Timeouts in Millisekunden (benoetigt: #include <IE.au3>)
_IENavigate ( ByRef $oObject, $sUrl [, $iWait = 1] ) Weist eine existierende Internet-Explorer-Instanz an, zu der angegebenen URL zu navigieren (benoetigt: #include <IE.au3>)
_IEPropertyGet ( ByRef $oObject, $sProperty ) Gibt eine ausgewaehlte Eigenschaft des Browsers oder eines DOM Elementes zurueck (benoetigt: #include <IE.au3>)
_IEPropertySet ( ByRef $oObject, $sProperty, $vValue ) Setzt eine ausgewaehlte Eigenschaft des Browsers oder DOM-Elements (benoetigt: #include <IE.au3>)
_IEQuit ( ByRef $oObject ) Schliesst den Internet Explorer und entfernt alle darauf verweisenden Objekte (benoetigt: #include <IE.au3>)
_IETableGetCollection ( ByRef $oObject [, $iIndex = -1] ) Gibt eine Auflistung von Objektvariablen zurueck, welche alle Tabellen in dem Dokument oder eine einzelne Tabelle (angegeben ueber ihren Index) beinhaltet (benoetigt: #include <IE.au3>)
_IETableWriteToArray ( ByRef $oObject [, $bTranspose = False] ) Liest den Inhalt einer Tabelle in ein Array ein (benoetigt: #include <IE.au3>)
_IETagNameAllGetCollection ( ByRef $oObject [, $iIndex = -1] ) Gibt ein Auflistungsobjekt aller Elemente des Dokuments oder der Dokumentenhierarchie in der Reihenfolge der Quelle oder ein dem Index entsprechendes Element zurueck (benoetigt: #include <IE.au3>)
_IETagNameGetCollection ( ByRef $oObject, $sTagName [, $iIndex = -1] ) Gibt ein Sammelobjekt zurueck, das entweder alle Elemente des Objekts mit dem angegebenen TagName oder ein dem Index entsprechendes Element enthaelt (benoetigt: #include <IE.au3>)
_INetExplorerCapable ( $sIEString ) Konvertiert einen String in eine IE(Internet Explorer) ausfuehrbare Zeile (benoetigt: #include <INet.au3>)
_INetGetSource ( $sURL [, $bString = True] ) Ermittelt den Quelltext von einer URL ohne eine temporaere Datei zu schreiben (benoetigt: #include <INet.au3>)
_INetMail ( $sMailTo, $sMailSubject, $sMailBody ) Oeffnet das Standard-E-Mail Programm mit vorgegebener Adresse, Ueberschrift und Inhalt (benoetigt: #include <INet.au3>)
_INetSmtpMail ( $sSMTPServer, $sFromName, $sFromAddress, $sToAddress [, $sSubject = "" [, $aBody = "" [, $sEHLO = "" [, $sFirst = "" [, $bTrace = 0]]]]] ) Sendet eine Email, ohne ein externes Emailprogramm zu benutzen (benoetigt: #include <INet.au3>)
_IsPressed ( $sHexKey [, $vDLL = "user32.dll"] ) Prueft, ob eine Taste gedrueckt wurde (benoetigt: #include <Misc.au3>)
_MathCheckDiv ( $iNum1 [, $iNum2 = 2] ) Prueft, ob die erste Zahl durch eine zweite Zahl teilbar ist (benoetigt: #include <Math.au3>)
_Max ( $iNum1, $iNum2 ) Berechnet welche der zwei Zahlen groesser ist (benoetigt: #include <Math.au3>)
_MemGlobalAlloc ( $iBytes [, $iFlags = 0] ) Reserviert eine festgelegte Anzahl von Bytes aus dem Heap (benoetigt: #include <Memory.au3>)
_MemGlobalFree ( $hMemory ) Gibt das angegebene Global-Memory-Objekt frei und macht dessen Handle ungueltig (benoetigt: #include <Memory.au3>)
_MemGlobalLock ( $hMemory ) Sperrt ein Global-Memory Objekt und gibt einen Zeiger zum ersten Byte des Objekt-Memory-Blocks zurueck (benoetigt: #include <Memory.au3>)
_MemGlobalSize ( $hMemory ) Ruft die aktuelle Groesse eines Global-Memory Objekt ab (benoetigt: #include <Memory.au3>)
_MemGlobalUnlock ( $hMemory ) Vermindert die Sperrzahl in Verbindung mit einem Speicher-Objekt, welches mit GMEM_MOVABLE zugeteilt wurde (benoetigt: #include <Memory.au3>)
_MemMoveMemory ( $pSource, $pDest, $iLength ) Bewegt Speicher entweder nach vorne oder nach hinten, ausgerichtet oder unausgerichtet (benoetigt: #include <Memory.au3>)
_MemVirtualAlloc ( $pAddress, $iSize, $iAllocation, $iProtect ) Reserviert oder bindet einen Seitenbereich innerhalb des virtuellen Adressraumes des aufrufenden Prozesses (benoetigt: #include <Memory.au3>)
_MemVirtualAllocEx ( $hProcess, $pAddress, $iSize, $iAllocation, $iProtect ) Reserviert einen Seitenbereich innerhalb des virtuellen Adressraumes eines Prozesses (benoetigt: #include <Memory.au3>)
_MemVirtualFree ( $pAddress, $iSize, $iFreeType ) Entbindet und/oder gibt einen Seitenbereich innerhalb des virtuellen Adressspeichers des aufrufenden Prozesses frei (benoetigt: #include <Memory.au3>)
_MemVirtualFreeEx ( $hProcess, $pAddress, $iSize, $iFreeType ) Entbindet und/oder gibt einen Seitenbereich innerhalb des virtuellen Adressspeichers eines bestimmten Prozesses frei (benoetigt: #include <Memory.au3>)
_Min ( $iNum1, $iNum2 ) Berechnet welche der zwei Zahlen kleiner ist (benoetigt: #include <Math.au3>)
_MouseTrap ( [$iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0]]]] ) Grenzt die Mauskoordinaten ein (benoetigt: #include <Misc.au3>)
_NamedPipes_CallNamedPipe ( $sPipeName, $pInpBuf, $iInpSize, $pOutBuf, $iOutSize, ByRef $iRead [, $iTimeOut = 0] ) Fuehrt ein Lese/Schreibt Operation auf eine Named Pipe durch (benoetigt: #include <NamedPipes.au3>)
_NamedPipes_ConnectNamedPipe ( $hNamedPipe [, $tOverlapped = 0] ) Aktiviert einen benannten Datenstromserver, der auf eine Client-Verbindung wartet (benoetigt: #include <NamedPipes.au3>)
_NamedPipes_CreateNamedPipe ( $sName [, $iAccess = 2 [, $iFlags = 2 [, $iACL = 0 [, $iType = 1 [, $iRead = 1 [, $iWait = 0 [, $iMaxInst = 25 [, $iOutBufSize = 4096 [, $iInpBufSize = 4096 [, $iDefaultTimeout = 5000 [, $tSecurity = 0]]]]]]]]]]] ) Erzeugt die Instanz einer Named Pipe (FIFO) (benoetigt: #include <NamedPipes.au3>)
_NamedPipes_CreatePipe ( ByRef $hReadPipe, ByRef $hWritePipe [, $tSecurity = 0 [, $iSize = 0]] ) Erzeugt eine anonyme Pipe (benoetigt: #include <NamedPipes.au3>)
_NamedPipes_DisconnectNamedPipe ( $hNamedPipe ) Trennt die Serverseite einer benannten Pipe-Instanz vom Client-Prozess (benoetigt: #include <NamedPipes.au3>)
_NamedPipes_GetNamedPipeHandleState ( $hNamedPipe ) Ruft Informationen ueber eine benannte Pipe ab (benoetigt: #include <NamedPipes.au3>)
_NamedPipes_GetNamedPipeInfo ( $hNamedPipe ) Ermittelt Informationen ueber die angefuehrte Benannte Pipe (benoetigt: #include <NamedPipes.au3>)
_NamedPipes_PeekNamedPipe ( $hNamedPipe ) Kopiert Daten aus einer Pipe in einen Puffer, ohne die Daten aus der Pipe zu entfernen (benoetigt: #include <NamedPipes.au3>)
_NamedPipes_SetNamedPipeHandleState ( $hNamedPipe, $iRead, $iWait [, $iBytes = 0 [, $iTimeOut = 0]] ) Legt den Lesemodus und den Wartemodus der angegebenen benannten Pipe fest (benoetigt: #include <NamedPipes.au3>)
_NamedPipes_TransactNamedPipe ( $hNamedPipe, $pInpBuf, $iInpSize, $pOutBuf, $iOutSize [, $tOverlapped = 0] ) Liest und beschreibt eine benannte Pipe in einer Netzwerkoperation (benoetigt: #include <NamedPipes.au3>)
_NamedPipes_WaitNamedPipe ( $sPipeName [, $iTimeOut = 0] ) Wartet, bis eine Instanz einer benannten Pipe verfuegbar ist (benoetigt: #include <NamedPipes.au3>)
_Net_Share_ConnectionEnum ( $sServer, $sQualifier ) Listet alle zu einer freigegebenen Ressource gemachten Verbindungen auf (benoetigt: #include <NetShare.au3>)
_Net_Share_FileClose ( $sServer, $iFileID ) Erzwingt, dass die Ressource geschlossen wird (benoetigt: #include <NetShare.au3>)
_Net_Share_FileEnum ( [$sServer = "" [, $sBaseName = "" [, $sUserName = ""]]] ) Gibt Informationen ueber die geoeffnete Datei auf dem Server zurueck (benoetigt: #include <NetShare.au3>)
_Net_Share_FileGetInfo ( $sServer, $iFileID ) Ermittelt einzelne Informationen ueber die geoeffnete Ressource auf dem Server (benoetigt: #include <NetShare.au3>)
_Net_Share_PermStr ( $iPerm ) Gibt die als Integer uebergebene Berechtigung einer Ressource als String zurueck (benoetigt: #include <NetShare.au3>)
_Net_Share_ResourceStr ( $iResource ) Gibt die String-Entsprechung einer Ressource zurueck (benoetigt: #include <NetShare.au3>)
_Net_Share_SessionDel ( [$sServer = "" [, $sClientName = "" [, $sUserName = ""]]] ) Beendet eine Netzwerk-Session zwischen einem Server und einer Workstation (benoetigt: #include <NetShare.au3>)
_Net_Share_SessionEnum ( [$sServer = "" [, $sClientName = "" [, $sUserName = ""]]] ) Liefert Informationen ueber die zu einem Server aufgebauten Verbindungen (Sessions) (benoetigt: #include <NetShare.au3>)
_Net_Share_SessionGetInfo ( $sServer, $sClientName, $sUserName ) Liefert Informationen ueber eine zwischen einem Server und Workstation aufgebaute Verbindung (Session) (benoetigt: #include <NetShare.au3>)
_Net_Share_ShareAdd ( $sServer, $sShare, $iType, $sResourcePath [, $sComment = "" [, $iMaxUses = -1]] ) Gibt eine Server-Ressource frei (benoetigt: #include <NetShare.au3>)
_Net_Share_ShareCheck ( $sServer, $sShare ) Ueberprueft, ob ein Server ein Geraet freigibt oder nicht (benoetigt: #include <NetShare.au3>)
_Net_Share_ShareDel ( $sServer, $sShare ) Loescht eine Freigabekennung von einer Serverliste der freigegebenen Ressourcen (benoetigt: #include <NetShare.au3>)
_Net_Share_ShareEnum ( [$sServer = ""] ) Gibt Informationen ueber alle freigegebenen Ressourcen auf einem Server zurueck (benoetigt: #include <NetShare.au3>)
_Net_Share_ShareGetInfo ( $sServer, $sShare ) Ermittelt Informationen ueber eine bestimmte, auf einem Server freigegebene Ressource (benoetigt: #include <NetShare.au3>)
_Net_Share_ShareSetInfo ( $sServer, $sShare, $sComment, $iMaxUses ) Veraendert Information einer Server-Freigabe (benoetigt: #include <NetShare.au3>)
_Net_Share_StatisticsGetSvr ( [$sServer = ""] ) Ermittelt die Verbindungsstatistik eines Servers (benoetigt: #include <NetShare.au3>)
_Net_Share_StatisticsGetWrk ( [$sWorkStation = ""] ) Ermittelt die Verbindungsstatistik einer Workstation (benoetigt: #include <NetShare.au3>)
_Now (  ) Gibt das aktuelle Datum und die aktuelle Zeit entsprechend dem im PC eingestellten Format zurueck (benoetigt: #include <Date.au3>)
_NowCalc (  ) Ausgabe des Datums und der Zeit im Format YYYY/MM/DD HH:MM:SS zur Weiterverwendung in Zeitberechnungen (benoetigt: #include <Date.au3>)
_NowCalcDate (  ) Gibt das aktuelle Datum im Format YYYY/MM/DD zurueck (benoetigt: #include <Date.au3>)
_NowDate (  ) Gibt das aktuelle Datum im eingestellten Format zurueck (benoetigt: #include <Date.au3>)
_NowTime ( [$sType = 3] ) Gibt die aktuelle Zeit im angegebenen Format zurueck (benoetigt: #include <Date.au3>)
_PathFull ( $sRelativePath [, $sBasePath = @WorkingDir] ) Erstellt einen Pfad basierend auf dem relativen Pfad, der vom Benutzer uebergegeben wird. Der neue absolute Pfad wird zurueckgegeben (benoetigt: #include <File.au3>)
_PathGetRelative ( $sFrom, $sTo ) Gibt den relativen Pfad zu einem Verzeichnis zurueck (benoetigt: #include <File.au3>)
_PathMake ( $sDrive, $sDir, $sFileName, $sExtension ) Erstellt einen Pfad aus einem Laufwerk, Verzeichnis, Dateinamen und einer Dateierweiterung (benoetigt: #include <File.au3>)
_PathSplit ( $sFilePath, ByRef $sDrive, ByRef $sDir, ByRef  $sFileName, ByRef  $sExtension ) Teilt einen Pfad in Laufwerk, Verzeichnis, Dateinamen und Dateierweiterung auf. Falls ein Teil des Pfades fehlt, wird ein leerer String gesetzt (benoetigt: #include <File.au3>)
_ProcessGetName ( $iPID ) Gibt einen String zurueck, der den Prozessnamen der angegebenen PID beinhaltet (benoetigt: #include <Process.au3>)
_ProcessGetPriority ( $vProcess ) Gibt die Prioritaet eines Prozesses zurueck (benoetigt: #include <Process.au3>)
_Radian ( $iDegrees ) Konvertiert Grad in Radiant (Bogenmass) (benoetigt: #include <Math.au3>)
_ReplaceStringInFile ( $sFilePath, $sSearchString, $sReplaceString [, $iCaseSensitive = 0 [, $iOccurance = 1]] ) Ersetzt einen Teilstring in einer Datei (benoetigt: #include <File.au3>)
_RunDos ( $sCommand ) Fuehrt einen DOS-Befehl in einem  nicht sichtbaren Fenster aus (benoetigt: #include <Process.au3>)
_ScreenCapture_Capture ( [$sFileName = "" [, $iLeft = 0 [, $iTop = 0 [, $iRight = -1 [, $iBottom = -1 [, $bCursor = True]]]]]] ) Erstellt von einem Bereich des Bildschirms einen Screenshot (benoetigt: #include <ScreenCapture.au3>)
_ScreenCapture_CaptureWnd ( $sFileName, $hWnd [, $iLeft = 0 [, $iTop = 0 [, $iRight = -1 [, $iBottom = -1 [, $bCursor = True]]]]] ) Erstellt von einem bestimmten Fenster oder einer Control-ID einen Screenshot (benoetigt: #include <ScreenCapture.au3>)
_ScreenCapture_SaveImage ( $sFileName, $hBitmap [, $bFreeBmp = True] ) Speichert ein Bild in eine Datei (benoetigt: #include <ScreenCapture.au3>)
_ScreenCapture_SetBMPFormat ( $iFormat ) Setzt das Bit-Format welches fuer BMP Screenshots verwendet wird (benoetigt: #include <ScreenCapture.au3>)
_ScreenCapture_SetJPGQuality ( $iQuality ) Setzt den Qualitaetslevel, der fuer JPEG Screenshots verwendet wird  (benoetigt: #include <ScreenCapture.au3>)
_ScreenCapture_SetTIFColorDepth ( $iDepth ) Setzt die Farbtiefe fuer TIFF Screenshots (benoetigt: #include <ScreenCapture.au3>)
_ScreenCapture_SetTIFCompression ( $iCompress ) Setzt die Komprimierung fuer TIFF Screenshots (benoetigt: #include <ScreenCapture.au3>)
_Security__AdjustTokenPrivileges ( $hToken, $bDisableAll, $tNewState, $iBufferLen [, $tPrevState = 0 [, $pRequired = 0]] ) Aktiviert oder deaktiviert Rechte in einem Access Token (benoetigt: #include <Security.au3>)
_Security__CreateProcessWithToken ( $hToken, $iLogonFlags, $sCommandLine, $iCreationFlags, $sCurDir, $tSTARTUPINFO, $tPROCESS_INFORMATION )  (benoetigt: #include <Security.au3>)
_Security__DuplicateTokenEx ( $hExistingToken, $iDesiredAccess, $iImpersonationLevel, $iTokenType ) Erstellt ein neues Zugriffstoken als Duplikat eines existierenden Tokens (benoetigt: #include <Security.au3>)
_Security__GetAccountSid ( $sAccount [, $sSystem = ""] ) Gibt den "Security Identifier" (SID) fuer ein Konto zurueck (benoetigt: #include <Security.au3>)
_Security__GetLengthSid ( $pSID ) Gibt die Laenge einer gueltigen SID in Bytes zurueck (benoetigt: #include <Security.au3>)
_Security__GetTokenInformation ( $hToken, $iClass ) Gibt den angegebenen Typ an Informationen ueber ein Access Token zurueck (benoetigt: #include <Security.au3>)
_Security__ImpersonateSelf ( [$iLevel = $SECURITYIMPERSONATION] ) Erhaelt einen Access Token, der den Security-Kontext des aufgerufenen Prozesses verkoerpert (benoetigt: #include <Security.au3>)
_Security__IsValidSid ( $pSID ) Prueft die Gueltigkeit einer SID (benoetigt: #include <Security.au3>)
_Security__LookupAccountName ( $sAccount [, $sSystem = ""] ) Ermittelt einen Sicherheits-Identifizierer (SID) fuer das Konto und den Namen der Domaene (benoetigt: #include <Security.au3>)
_Security__LookupAccountSid ( $vSID [, $sSystem = ""] ) Gibt den Namen des Kontos fuer eine SID zurueck (benoetigt: #include <Security.au3>)
_Security__LookupPrivilegeValue ( $sSystem, $sName ) Erfragt den lokal beschraenkten Identifizierer (LUID) fuer einen privilegierten Wert in Form eines 64bit Integers (benoetigt: #include <Security.au3>)
_Security__OpenProcessToken ( $hProcess, $iAccess ) Gibt das mit dem Prozess verbundene Prozess Token zurueck (benoetigt: #include <Security.au3>)
_Security__OpenThreadToken ( $iAccess [, $hThread = 0 [, $bOpenAsSelf = False]] ) Oeffnet das Access-Token, welches mit einem Thread verbunden ist (benoetigt: #include <Security.au3>)
_Security__OpenThreadTokenEx ( $iAccess [, $hThread = 0 [, $bOpenAsSelf = False]] ) Oeffnet das Access-Token, welches mit einem Thread verbunden ist und personifiziert den Sicherheitskontext des Client-Prozesses, falls notwendig (benoetigt: #include <Security.au3>)
_Security__SetPrivilege ( $hToken, $sPrivilege, $bEnable ) Aktiviert oder deaktiviert Rechte in einem lokalen Token (benoetigt: #include <Security.au3>)
_Security__SetTokenInformation ( $hToken, $iTokenInformation, $vTokenInformation, $iTokenInformationLength ) Setzt verschiedene Eigenschaften eines Tokens (benoetigt: #include <Security.au3>)
_Security__SidToStringSid ( $pSID ) Konvertiert eine binaere SID in einen String (benoetigt: #include <Security.au3>)
_Security__SidTypeStr ( $iType ) Konvertiert ein SID-Typ in eine String-Form (benoetigt: #include <Security.au3>)
_Security__StringSidToSid ( $sSID ) Konvertiert einen String in eine binaere SID (benoetigt: #include <Security.au3>)
_SendMessage ( $hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iReturn = 0 [, $wParamType = "wparam" [, $lParamType = "lparam" [, $sReturnType = "lresult"]]]]]] ) Wrapper fuer den sonst ueblichen DLL-Aufruf (benoetigt: #include <SendMessage.au3>)
_SendMessageA ( $hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iReturn = 0 [, $wParamType = "wparam" [, $lParamType = "lparam" [, $sReturnType = "lresult"]]]]]] ) Sendet eine Nachricht zu einem Fenster/Control (Force Ansi Call) (benoetigt: #include <SendMessage.au3>)
_SetDate ( $iDay [, $iMonth = 0 [, $iYear = 0]] ) Setzt das aktuelle Systemdatum (benoetigt: #include <Date.au3>)
_SetTime ( $iHour, $iMinute [, $iSecond = 0 [, $iMSeconds = 0]] ) Setzt die aktuelle Systemzeit (benoetigt: #include <Date.au3>)
_Singleton ( $sOccurrenceName [, $iFlag = 0] ) Erzwingt ein Entwicklungsmodell bei dem nur eine Instanz des Skripts ausgefuehrt werden darf (benoetigt: #include <Misc.au3>)
_SoundClose ( $aSndID ) Schliesst eine zuvor mit _SoundOpen geoeffnete Sounddatei (benoetigt: #include <Sound.au3>)
_SoundLength ( $aSndID [, $iMode = 1] ) Gibt die Laenge einer Sounddatei zurueck (benoetigt: #include <Sound.au3>)
_SoundOpen ( $sFilePath ) Oeffnet eine Sounddatei, welche in anderen _Sound Funktionen verwendet werden kann (benoetigt: #include <Sound.au3>)
_SoundPause ( $aSndID ) Pausiert einen Sound (benoetigt: #include <Sound.au3>)
_SoundPlay ( $aSndID [, $iWait = 0] ) Spielt eine Sounddatei ab (benoetigt: #include <Sound.au3>)
_SoundPos ( $aSndID [, $iMode = 1] ) Gibt die aktuelle Position der Sounddatei an (benoetigt: #include <Sound.au3>)
_SoundResume ( $aSndID ) Setzt einen pausierenden Sound fort (benoetigt: #include <Sound.au3>)
_SoundSeek ( ByRef $aSndID, $iHour, $iMin, $iSec ) Springt in einer Sounddatei zur angegebenen Position  (benoetigt: #include <Sound.au3>)
_SoundStatus ( $aSndID ) Gibt den Status eines Sounds zurueck  (benoetigt: #include <Sound.au3>)
_SoundStop ( ByRef $aSndID ) Stoppt einen spielenden Sound (benoetigt: #include <Sound.au3>)
_SQLite_Changes ( [$hDB = -1] ) Gibt die Anzahl der Datenbank-Reihen zurueck, die durch die letzte vollendete Abfrage mit dieser Verbindung veraendert wurden (benoetigt: #include <SQLite.au3>)
_SQLite_Close ( [$hDB = -1] ) Schliesst eine offene Datenbank (benoetigt: #include <SQLite.au3>)
_SQLite_Display2DResult ( $aResult [, $iCellWidth = 0 [, $bReturn = False]] ) Gibt ein formatiertes 2D Array zurueck oder gibt es in der Console aus (benoetigt: #include <SQLite.au3>)
_SQLite_Encode ( $vData ) Verschluesselt Strings, Nummern oder Binaerdaten zur Verwendung als BLOB in einer SQLite-Abfrage (benoetigt: #include <SQLite.au3>)
_SQLite_ErrCode ( [$hDB = -1] ) Gibt den letzten Fehlercode zurueck (numerisch) (benoetigt: #include <SQLite.au3>)
_SQLite_ErrMsg ( [$hDB = -1] ) Gibt einen String zurueck, der in englisch die Fehlerbedingung des letzten sqlite3_* API Aufrufes beschreibt (benoetigt: #include <SQLite.au3>)
_SQLite_Escape ( $sString [, $iBuffSize = Default] ) Escaped einen String oder eine Nummer, um als TEXT in SQLite-Befehlen verwendet werden zu koennen (benoetigt: #include <SQLite.au3>)
_SQLite_Exec ( $hDB, $sSQL [, $sCallBack = ""] ) Fuehrt eine SQLite Abfrage durch, bearbeitet jedoch keine Ergebnisse (benoetigt: #include <SQLite.au3>)
_SQLite_FastEncode ( $vData ) Encodiert binaer-Daten fuer den Gebrauch in SQLite-Statements (Querys) (benoetigt: #include <SQLite.au3>)
_SQLite_FastEscape ( $sString ) Escapt einen String oder eine Number zur Benutzung in einem SQLite Statement (Query) als TEXT (benoetigt: #include <SQLite.au3>)
_SQLite_FetchData ( $hQuery, ByRef $aRow [, $bBinary = False [, $bDoNotFinalize = False [, $iColumns = 0]]] ) Ruft eine Zeile von einer _SQLite_Query()-Abfrage ab (benoetigt: #include <SQLite.au3>)
_SQLite_FetchNames ( $hQuery, ByRef $aNames ) Liest die Spaltennamen einer _SQLite_Query()-Abfrage aus (benoetigt: #include <SQLite.au3>)
_SQLite_GetTable ( $hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1] ) Gibt ein 1D Array aus, das die Tabellennamen und Daten der ausgefuehrten Abfrage beinhaltet (benoetigt: #include <SQLite.au3>)
_SQLite_GetTable2d ( $hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1 [, $bSwichDimensions = False]] ) Gibt ein 2D Array zurueck mit Spaltennamen und dem Inhalt der ausgefuehrten Abfrage (benoetigt: #include <SQLite.au3>)
_SQLite_LastInsertRowID ( [$hDB = -1] ) Gibt die Zeilen-ID der in letzter Zeit durch diese Verbindung eingefuegten Angaben in die Datenbank zurueck (benoetigt: #include <SQLite.au3>)
_SQLite_LibVersion (  ) Gibt die Versionsnummer der SQLite-DLL zurueck (benoetigt: #include <SQLite.au3>)
_SQLite_Open ( [$sDatabase_Filename = ":memory:" [, $iAccessMode = Default [, $iEncoding = $SQLITE_ENCODING_UTF8]]] ) Oeffnet/Erstellt eine SQLite-Datenbank (benoetigt: #include <SQLite.au3>)
_SQLite_Query ( $hDB, $sSQL, ByRef $hQuery ) Bereitet eine SQLite-Abfrage vor (benoetigt: #include <SQLite.au3>)
_SQLite_QueryFinalize ( $hQuery ) Beendet eine _SQLite_Query() basierende Abfrage. Die Abfrage wird unterbrochen (benoetigt: #include <SQLite.au3>)
_SQLite_QueryReset ( $hQuery ) Setzt eine auf _SQLite_Query() basierende Abfrage zurueck (benoetigt: #include <SQLite.au3>)
_SQLite_QuerySingleRow ( $hDB, $sSQL, ByRef $aRow ) Liest die erste Zeile des Ergebnisses der angegebenen Abfrage aus (benoetigt: #include <SQLite.au3>)
_SQLite_SafeMode ( $bSafeModeState ) Deaktiviert oder aktiviert den Sicherheitsmodus (benoetigt: #include <SQLite.au3>)
_SQLite_SetTimeout ( [$hDB = -1 [, $iTimeout = 1000]] ) Setzt einen Timeout fuer beschaeftigte Pruefroutinen (benoetigt: #include <SQLite.au3>)
_SQLite_Shutdown (  ) Loescht SQLite.dll (benoetigt: #include <SQLite.au3>)
_SQLite_SQLiteExe ( $sDatabaseFile, $sInput, ByRef $sOutput [, $sSQLiteExeFilename = "sqlite3.exe" [, $bDebug = False]] ) Fuehrt Befehle mit der sqlite3.exe aus (benoetigt: #include <SQLite.au3>)
_SQLite_Startup ( [$sDll_Filename = "" [, $bUTF8ErrorMsg = False [, $iForceLocal = 0 [, $hPrintCallback = $__g_hPrintCallback_SQLite]]]] ) Laedt die SQLite3.dll (benoetigt: #include <SQLite.au3>)
_SQLite_TotalChanges ( [$hDB = -1] ) Gibt die Anzahl aller Veraenderungen (Trigger und Fremdschluessel eingeschlossen) seit Verbindungsstart zurueck (benoetigt: #include <SQLite.au3>)
_StringBetween ( $sString, $sStart, $sEnd [, $iMode = $STR_ENDISSTART [, $bCase = False]] ) Findet Strings zwischen zwei Trennzeichen (benoetigt: #include <String.au3>)
_StringExplode ( $sString, $sDelimiter [, $iLimit = 0] ) Teilt einen String abhaengig von den gegebenen Trennzeichen wie PHP Explode v5 in Teilstrings auf (benoetigt: #include <String.au3>)
_StringInsert ( $sString, $sInsertion, $iPosition ) Fuegt einen String in einen anderen ein (benoetigt: #include <String.au3>)
_StringProper ( $sString ) Wandelt den ersten Buchstaben aller Woerter in einem String in Grossbuchstaben um. Wandelt alle anderen Buchstaben in Kleinbuchstaben um. Arbeitet wie die Funktion "Gross"/"Proper" in Tabellenkalkulationen (benoetigt: #include <String.au3>)
_StringRepeat ( $sString, $iRepeatCount ) Ein String wird eine bestimmte Anzahl mal wiederholt (benoetigt: #include <String.au3>)
_StringTitleCase ( $sString ) Modifiziert einen String zu einem Grossschreibungsstring (benoetigt: #include <String.au3>)
_StringToHex ( $sString ) Konvertiert einen String zu einem hexadezimalen String (benoetigt: #include <String.au3>)
_TCPIpToName ( $sIp [, $iOption = 0 [, $hDll = "Ws2_32.dll"]] ) Loest eine IP-Adresse in den/die Hostnamen auf (benoetigt: #include <iNet.au3>)
_TempFile ( [$sDirectoryName = @TempDir [, $sFilePrefix = "~" [, $sFileExtension = ".tmp" [, $iRandomLength = 7]]]] ) Generiert einen Namen fuer eine temporaere Datei. Diese Datei existiert garantiert noch nicht (benoetigt: #include <File.au3>)
_TicksToTime ( $iTicks, ByRef $iHours, ByRef $iMins, ByRef $iSecs ) Konvertiert die angegebenen Ticks in Stunden, Minuten und Sekunden (benoetigt: #include <Date.au3>)
_Timer_Diff ( $iTimeStamp ) Gibt die Zeitdifferenz zum vorherigen Aufruf von _Timer_Init zurueck (benoetigt: #include <Timers.au3>)
_Timer_GetIdleTime (  ) Gibt die Anzahl von Ticks seit der letzten Aktivitaet des Benutzers zurueck (z.B. Tastatur/Maus) (benoetigt: #include <Timers.au3>)
_Timer_GetTimerID ( $wParam ) Gibt die Timer ID von $wParam zurueck (benoetigt: #include <Timers.au3>)
_Timer_Init (  ) Gibt die Zeitmarke (in Millisekunden) zurueck (benoetigt: #include <Timers.au3>)
_Timer_KillAllTimers ( $hWnd ) Loescht alle Timer (benoetigt: #include <Timers.au3>)
_Timer_KillTimer ( $hWnd, $iTimerID ) Loescht einen festgelegten Timer (benoetigt: #include <Timers.au3>)
_Timer_SetTimer ( $hWnd [, $iElapse = 250 [, $sTimerFunc = "" [, $iTimerID = -1]]] ) Erstellt einen Timer mit einem festgelegten Timeout Wert (benoetigt: #include <Timers.au3>)
_TimeToTicks ( [$iHours = @HOUR [, $iMins = @MIN [, $iSecs = @SEC]]] ) Konvertiert die angegebenen Stunden, Minuten und Sekunden in Ticks (benoetigt: #include <Date.au3>)
_VersionCompare ( $sVersion1, $sVersion2 ) Vergleicht zwei Dateiversionen auf Gleichheit (benoetigt: #include <Misc.au3>)
_viClose ( $hSession ) Schliesst eine VISA-Verbindung zu einem Geraet (benoetigt: #include <Visa.au3>)
_viExecCommand ( $hSession, $sCommand [, $iTimeoutMS = -1 [, $sMode = @LF]] ) Sendet ein(e) Kommando/Suchanfrage ueber eine VISA-Verbindung (GPIB/TCP) an ein Instrument/Geraet (benoetigt: #include <Visa.au3>)
_viFindGpib ( ByRef $aDescriptorList, ByRef $aIDNList [, $iShow_Search_Results = 0] ) Sendet einen Befehl/Abfrage an ein Instrument/Geraet durch das VISA-Interface (GPIB / TCP) (benoetigt: #include <Visa.au3>)
_viGpibBusReset (  ) GPIB BUS "reset": Diese Funktion ist zu benutzen, wenn der GPIB BUS aus irgendwelchen Gruenden festsitzt (benoetigt: #include <Visa.au3>)
_viGTL ( $hSession ) Go To Local mode: Instrumente, die dieses Kommando akzeptieren, werden den "Remote Control Mode" verlassen und in den "Local Mode" wechseln (benoetigt: #include <Visa.au3>)
_viInteractiveControl ( [$sCommand_Save_FilePath = ""] ) Interaktives VISA Control um deine SCPI Befehle zu testen (benoetigt: #include <Visa.au3>)
_viOpen ( $sVisa_Address [, $sVisa_Secondary_Address = 0] ) Oeffnet eine VISA-Verbindung zu einem Instrument/Geraet (benoetigt: #include <Visa.au3>)
_viSetAttribute ( $hSession, $iAttribute, $iValue ) Setzt VISA Attribute. Diese Funktion, welche durch _viSetTimeout aufgerufen wird, kann auch verwendet werden um die anderen VISA-spezifischen Attribute zu setzen (benoetigt: #include <Visa.au3>)
_viSetTimeout ( $hSession, $iTimeoutMS ) Setzt das VISA Timeout in Millisekunden (benoetigt: #include <Visa.au3>)
_WeekNumberISO ( [$iYear = @YEAR [, $iMonth = @MON [, $iDay = @MDAY]]] ) Ermittelt die Kalenderwoche eines vorgegebenen Datums (benoetigt: #include <Date.au3>)
_WinAPI_AbortPath ( $hDC ) Schliesst und entsorgt jegliche Pfade, welche in einem angegebenen Geraetekontext existieren (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ActivateKeyboardLayout ( $hLocale [, $iFlag = 0] ) Setzt den Eingabesprachenidentifizierer fuer den aufrufenden Thread oder den aktuellen Prozess (benoetigt: #include <WinAPISys.au3>)
_WinAPI_AddClipboardFormatListener ( $hWnd ) Platziert ein uebergebenes Fenster in der systemverwalteten Listenerliste im Zwischenablageformat (benoetigt: #include <WinAPISys.au3>)
_WinAPI_AddFontMemResourceEx ( $pData, $iSize ) Fuegt die Schriftartenressource von einem Speicherabbild zum System hinzu (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_AddFontResourceEx ( $sFont [, $iFlag = 0 [, $bNotify = False]] ) Fuegt die Schriftartenressource von einer angegebenen Datei zur Systemschriftartentabelle hinzu (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_AddIconOverlay ( $hIcon, $hOverlay ) Erzeugt ein Icon durch Verschmelzung des Quellicons und der Ueberlagsmaske (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_AddIconTransparency ( $hIcon [, $iPercent = 50 [, $bDelete = False]] ) Fuegt einem 32 Bits-pro-Pixel Icon Transparenz hinzu (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_AddMRUString ( $hMRU, $sStr ) Fuegt einen String auf den Anfang einer kuerzlich-verwendet-Liste (most recently used (MRU)) hinzu (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_AdjustBitmap ( $hBitmap, $iWidth, $iHeight [, $iMode = 3 [, $tAdjustment = 0]] ) Erzeugt ein neues geraeteabhaengiges Bitmap (device-depended bitmap (DDB)) des Quellbitmaps mit neuen Dimensionen und Farbanpassungen (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_AdjustTokenPrivileges ( $hToken, $aPrivileges, $iAttributes, ByRef $aAdjust ) Aktiviert oder deaktiviert bestimmte Privilegien im angegebenen Zugangstoken (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_AdjustWindowRectEx ( ByRef $tRECT, $iStyle [, $iExStyle = 0 [, $bMenu = False]] ) Berechnet die benoetigte Groesse des Fensterrechtecks basierend auf der gewuenschten Groesse des Clientrechtecks (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_AlphaBlend ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iAlpha [, $bAlpha = False] ) Zeigt Bitmaps an welche transparente oder semitransparente Pixel haben (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_AngleArc ( $hDC, $iX, $iY, $iRadius, $nStartAngle, $nSweepAngle ) Zeichnet ein Liniensegment und einen Bogen (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_AnimateWindow ( $hWnd, $iFlags [, $iDuration = 1000] ) Erlaubt die Produktion von Spezialeffekte wenn Fenster angezeigt oder versteckt werden (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_Arc ( $hDC, $tRECT, $iXStartArc, $iYStartArc, $iXEndArc, $iYEndArc ) Draws an elliptical arc (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ArcTo ( $hDC, $tRECT, $iXRadial1, $iYRadial1, $iXRadial2, $iYRadial2 ) Draws an elliptical arc (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ArrayToStruct ( Const ByRef $aData [, $iStart = 0 [, $iEnd = -1]] ) Converts an array of strings to the structure (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_AssignProcessToJobObject ( $hJob, $hProcess ) Assigns a process to an existing job object (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_AssocGetPerceivedType ( $sExt ) Retrieves a file's perceived type based on its extension (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_AssocQueryString ( $sAssoc, $iType [, $iFlags = 0 [, $sExtra = '']] ) Searches for and retrieves a file or protocol association-related string from the registry (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_AttachConsole ( [$iPID = -1] ) Heftet den aufgerufenen Prozess an der Console des festgelegten Prozesses an (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_AttachThreadInput ( $iAttach, $iAttachTo, $bAttach ) Verknuepft oder trennt den Eingabe-Prozessmechanismus von einem Thread mit dem eines anderen Threads (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_BackupRead ( $hFile, $pBuffer, $iLength, ByRef $iBytes, ByRef $pContext [, $bSecurity = False] ) Backs up a file or directory, including the security information (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_BackupReadAbort ( ByRef $pContext ) Finishes the use of _WinAPI_BackupRead() on the handle (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_BackupSeek ( $hFile, $iSeek, ByRef $iBytes, ByRef $pContext ) Seeks forward in a data stream initially accessed by using the _WinAPI_BackupRead() or _WinAPI_BackupWrite() function (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_BackupWrite ( $hFile, $pBuffer, $iLength, ByRef $iBytes, ByRef $pContext [, $bSecurity = False] ) Restore a file or directory that was backed up using _WinAPI_BackupRead() (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_BackupWriteAbort ( ByRef $pContext ) Finishes the use of _WinAPI_BackupWrite() on the handle (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_Beep ( [$iFreq = 500 [, $iDuration = 1000]] ) Generiert einfache Toene auf dem Systemlautsprecher (benoetigt: #include <WinAPIError.au3>)
_WinAPI_BeginBufferedPaint ( $hDC, $tTarget, ByRef $hNewDC [, $iFormat = 0 [, $iFlags = 0 [, $tExclude = 0 [, $iAlpha = -1]]]] ) Begins a buffered paint operation (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_BeginDeferWindowPos ( [$iAmount = 1] ) Allocates memory for a multiple-window-position structure (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_BeginPaint ( $hWnd, ByRef $tPAINTSTRUCT ) Prepares the specified window for painting (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_BeginPath ( $hDC ) Opens a path bracket in the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_BeginUpdateResource ( $sFilePath [, $bDelete = False] ) Retrieves a handle that can be used to add, delete, or replace resources in a binary module (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_BitBlt ( $hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $iROP ) Vollzieht einen Bit-Blocktransfer von Farbdaten ("blitten")  (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_BringWindowToTop ( $hWnd ) Brings the specified window to the top of the Z order (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_BroadcastSystemMessage ( $iMsg [, $wParam = 0 [, $lParam = 0 [, $iFlags = 0 [, $iRecipients = 0]]]] ) Sends a message to the specified recipients (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_BrowseForFolderDlg ( [$sRoot = '' [, $sText = '' [, $iFlags = 0 [, $pBrowseProc = 0 [, $lParam = 0 [, $hParent = 0]]]]]] ) Displays a dialog box that enables the user to select a Shell folder (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_BufferedPaintClear ( $hBP [, $tRECT = 0] ) Clears a specified rectangle in the buffer to ARGB = {0,0,0,0} (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_BufferedPaintInit (  ) Initialize buffered painting for the current thread (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_BufferedPaintSetAlpha ( $hBP [, $iAlpha = 255 [, $tRECT = 0]] ) Sets the alpha to a specified value in a given rectangle (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_BufferedPaintUnInit (  ) Closes down buffered painting for the current thread (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_CallNextHookEx ( $hHook, $iCode, $wParam, $lParam ) Uebergibt die "Hook" Information an die naechste "Hook"-Prozedur in dieser "Hook"-Kette (benoetigt: #include <WinAPISys.au3>)
_WinAPI_CallWindowProc ( $pPrevWndFunc, $hWnd, $iMsg, $wParam, $lParam ) Uebergibt die "Hook"-Information an die naechste "Hook"-Prozedur in der aktuellen "Hook"-Kette (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_CallWindowProcW ( $pPrevWndProc, $hWnd, $iMsg, $wParam, $lParam ) Passes message information to the specified window procedure (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_CascadeWindows ( $aWnds [, $tRECT = 0 [, $hParent = 0 [, $iFlags = 0 [, $iStart = 0 [, $iEnd = -1]]]]] ) Cascades the specified child windows of the specified parent window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_ChangeWindowMessageFilterEx ( $hWnd, $iMsg, $iAction ) Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_CharToOem ( $sStr ) Converts a string into the OEM-defined character set (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_ChildWindowFromPointEx ( $hWnd, $tPOINT [, $iFlags = 0] ) Determines which, if any, of the child windows belonging to the specified parent window contains the specified point (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_ClientToScreen ( $hWnd, ByRef $tPoint ) Rechnet die Koordinaten eines angegebenen Punktes in einem Anwendungsbereich eines Fensters in Bildschirmkoordinaten um (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_ClipCursor ( $tRECT ) Confines the cursor to a rectangular area on the screen (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_CloseDesktop ( $hDesktop ) Closes an open handle to a desktop object (benoetigt: #include <WinAPISys.au3>)
_WinAPI_CloseEnhMetaFile ( $hDC ) Closes an enhanced-metafile device context and returns a handle that identifies an enhanced-format metafile (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CloseFigure ( $hDC ) Closes an open figure in a path (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CloseHandle ( $hObject ) Schliesst ein offenes Objekthandle (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_CloseThemeData ( $hTheme ) Closes the theme data handle (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_CloseWindow ( $hWnd ) Minimizes (but does not destroy) the specified window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_CloseWindowStation ( $hStation ) Closes an open window station handle (benoetigt: #include <WinAPISys.au3>)
_WinAPI_CLSIDFromProgID ( $sProgID ) Sucht nach einer CLSID in der Registrierung, der eine ProgID zugewiesen wurde (benoetigt: #include <WinAPICom.au3>)
_WinAPI_CoInitialize ( [$iFlags = 0] ) Initialisiert die COM-Bibliothek zur Verwendung durch den aufrufenden Prozess (benoetigt: #include <WinAPICom.au3>)
_WinAPI_ColorAdjustLuma ( $iRGB, $iPercent [, $bScale = True] ) Changes the luminance of a RGB value (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ColorHLSToRGB ( $iHue, $iLuminance, $iSaturation ) Converts colors from hue-luminance-saturation (HLS) to RGB format (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ColorRGBToHLS ( $iRGB, ByRef $iHue, ByRef $iLuminance, ByRef $iSaturation ) Converts colors from RGB to hue-luminance-saturation (HLS) format (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CombineRgn ( $hRgnDest, $hRgnSrc1, $hRgnSrc2, $iCombineMode ) Verknuepft zwei Bereiche und speichert das Ergebnis in einem weiteren (dritten) Bereich (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CombineTransform ( $tXFORM1, $tXFORM2 ) Concatenates two world-space to page-space transformations (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CommandLineToArgv ( $sCmd ) Parses a command-line string and returns an array of the command-line arguments (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_CommDlgExtendedError (  ) Gibt die Fehlermeldung einer Standard-Dialogbox zurueck. Dieser String beschreibt den zuletzt aufgetretenen Fehler beim Aufruf der Standard-Dialogbox Funktionen (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_CommDlgExtendedErrorEx (  ) Returns a common dialog box error code (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_CompareString ( $iLCID, $sString1, $sString2 [, $iFlags = 0] ) Compares two character strings for a specified locale (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_CompressBitmapBits ( $hBitmap, ByRef $pBuffer [, $iCompression = 0 [, $iQuality = 100]] ) Creates a compressed data block from the specified bitmap (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CompressBuffer ( $pUncompressedBuffer, $iUncompressedSize, $pCompressedBuffer, $iCompressedSize [, $iFormatAndEngine = 0x0002] ) Compresses a buffer with specified compression format and engine type (benoetigt: #include <WinAPISys.au3>)
_WinAPI_ComputeCrc32 ( $pMemory, $iLength ) Calculates the CRC32 checksum of a block of memory (benoetigt: #include <WinAPISys.au3>)
_WinAPI_ConfirmCredentials ( $sTarget, $bConfirm ) Confirms the validity of the credential harvested (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_CopyBitmap ( $hBitmap ) Creates a duplicate of a specified bitmap with a device-independent bitmap (DIB) section (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CopyCursor ( $hCursor ) Creates a duplicate of a specified cursor (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_CopyEnhMetaFile ( $hEmf [, $sFilePath = ''] ) Copies the contents of an enhanced-format metafile to a specified file (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CopyFileEx ( $sExistingFile, $sNewFile [, $iFlags = 0 [, $pProgressProc = 0 [, $pData = 0]]] ) Kopiert eine vorhandene Datei in eine neue Datei und benachrichtigt die Anwendung ueber eine Callback-Funktion ueber ihren Fortschritt (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_CopyIcon ( $hIcon ) Kopiert das angegebene Icon von einem anderen Modul (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_CopyImage ( $hImage [, $iType = 0 [, $iXDesiredPixels = 0 [, $iYDesiredPixels = 0 [, $iFlags = 0]]]] ) Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CopyRect ( $tRECT ) Copies the coordinates of one rectangle to another (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CopyStruct ( $tStruct [, $sStruct = ''] ) Creates a duplicate of a specified structure (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_CoTaskMemAlloc ( $iSize ) Weist einen Block des Aufgabenspeichers zu. (benoetigt: #include <WinAPICom.au3>)
_WinAPI_CoTaskMemFree ( $pMemory ) Gibt einen Block des Aufgabenspeichers frei (benoetigt: #include <WinAPICom.au3>)
_WinAPI_CoTaskMemRealloc ( $pMemory, $iSize ) Aendert die Groesse eines zuvor zugewiesenen Blocks des Aufgabenspeichers (benoetigt: #include <WinAPICom.au3>)
_WinAPI_CoUninitialize (  ) Schliesst die COM-Bibliothek fuer den aktuellen Prozess (benoetigt: #include <WinAPICom.au3>)
_WinAPI_Create32BitHBITMAP ( $hIcon [, $bDib = False [, $bDelete = False]] ) Creates a 32 bits-per-pixel bitmap from the specified icon (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_Create32BitHICON ( $hIcon [, $bDelete = False] ) Converts an icon to a 32 bits-per-pixel format and copies to the new icon (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_CreateANDBitmap ( $hBitmap ) Creates AND bitmask device-independent bitmap (DIB) from the specified bitmap (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateBitmap ( $iWidth, $iHeight [, $iPlanes = 1 [, $iBitsPerPel = 1 [, $pBits = 0]]] ) Erstellt eine Bitmap mit den angegebenen Daten fuer Breite, Hoehe und Farbformat (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateBitmapIndirect ( $tBITMAP ) Creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel) (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateBrushIndirect ( $iStyle, $iRGB [, $iHatch = 0] ) Creates a logical brush that has the specified style, color, and pattern (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateBuffer ( $iLength [, $pBuffer = 0 [, $bAbort = True]] ) Allocates a block of memory from the internal library heap (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_CreateBufferFromStruct ( $tStruct [, $pBuffer = 0 [, $bAbort = True]] ) Allocates a block of memory from the internal library heap and initializes it with the structure's data (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_CreateCaret ( $hWnd, $hBitmap [, $iWidth = 0 [, $iHeight = 0]] ) Creates a new shape for the system caret and assigns ownership of the caret to the specified window (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_CreateColorAdjustment ( [$iFlags = 0 [, $iIlluminant = 0 [, $iGammaR = 10000 [, $iGammaG = 10000 [, $iGammaB = 10000 [, $iBlack = 0 [, $iWhite = 10000 [, $iContrast = 0 [, $iBrightness = 0 [, $iColorfulness = 0 [, $iTint = 0]]]]]]]]]]] ) Creates $tagCOLORADJUSTMENT structure specifies the color adjustment (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateCompatibleBitmap ( $hDC, $iWidth, $iHeight ) Erstellt ein Bitmap, welches kompatibel mit der festgelegten Datenstruktur ist (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateCompatibleBitmapEx ( $hDC, $iWidth, $iHeight, $iRGB ) Creates a bitmap compatible with the device and fills it the specified color (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateCompatibleDC ( $hDC ) Erzeugt einen, mit dem angegebenen Geraetekontext kompatiblen, Speicherkontext (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_CreateDesktop ( $sName [, $iAccess = 0x0002 [, $iFlags = 0 [, $iHeap = 0 [, $tSecurity = 0]]]] ) Creates a new desktop, associates it with the current window station of the calling process (benoetigt: #include <WinAPISys.au3>)
_WinAPI_CreateDIB ( $iWidth, $iHeight [, $iBitsPerPel = 32 [, $tColorTable = 0 [, $iColorCount = 0]]] ) Erzeugt eine unkomprimierte geraeteunabhaengige Bitmap (DIB) mit der angegebenen Breite, Hoehe und Farbtiefe. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateDIBColorTable ( Const ByRef $aColorTable [, $iStart = 0 [, $iEnd = -1]] ) Erzeugt eine RGB Farbtabelle von dem gegebenen Array an Farben. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateDIBitmap ( $hDC, $tBITMAPINFO, $iUsage [, $pBits = 0] ) Erzeugt eine kompatible Bitmap (DDB) von einer DIB und setzt, optional, die Bitmapbits. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateDIBSection ( $hDC, $tBITMAPINFO, $iUsage, ByRef $pBits [, $hSection = 0 [, $iOffset = 0]] ) Erzeugt eine DIB in die Anwendungen direkt schreiben koennen. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateDirectory ( $sDir [, $tSecurity = 0] ) Erzeugt ein neues Verzeichnis. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_CreateDirectoryEx ( $sNewDir, $sTemplateDir [, $tSecurity = 0] ) Erzeugt ein neues Verzeichnis mit den Attributen eines gegebenen Vorlageverzeichnisses. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_CreateEllipticRgn ( $tRECT ) Erzeugt eine elliptische Region. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateEmptyIcon ( $iWidth, $iHeight [, $iBitsPerPel = 32] ) Erzeugt ein vollkommen transparentes Icon mit der angegebenen Laenge, Hoehe und Farbtiefe. (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_CreateEnhMetaFile ( [$hDC = 0 [, $tRECT = 0 [, $bPixels = False [, $sFilePath = '' [, $sDescription = '']]]]] ) Erzeugt einen Geraetekontext fuer eine Metadatei mit einem verbesserten Format. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateEvent ( [$tAttributes = 0 [, $bManualReset = True [, $bInitialState = True [, $sName = ""]]]] ) Erzeugt oder oeffnet ein benanntes oder unbenanntes Ereignis-Objekt (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_CreateFile ( $sFileName, $iCreation [, $iAccess = 4 [, $iShare = 0 [, $iAttributes = 0 [, $tSecurity = 0]]]] ) Erstellt oder oeffnet eine Datei oder ein anderes Geraet (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_CreateFileEx ( $sFilePath, $iCreation [, $iAccess = 0 [, $iShare = 0 [, $iFlagsAndAttributes = 0 [, $tSecurity = 0 [, $hTemplate = 0]]]]] ) Erzeugt oder oeffnet eine Datei oder ein I/O-Geraet (Eingabegeraet) (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_CreateFileMapping ( $hFile [, $iSize = 0 [, $sName = '' [, $iProtect = 0x0004 [, $tSecurity = 0]]]] ) Erzeugt oder oeffnet ein benanntes oder unbenanntes File-Mapping-Objekt fuer eine angegebene Datei. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_CreateFont ( $iHeight, $iWidth [, $iEscape = 0 [, $iOrientn = 0 [, $iWeight = $FW_NORMAL [, $bItalic = False [, $bUnderline = False [, $bStrikeout = False [, $iCharset = $DEFAULT_CHARSET [, $iOutputPrec = $OUT_DEFAULT_PRECIS [, $iClipPrec = $CLIP_DEFAULT_PRECIS [, $iQuality = $DEFAULT_QUALITY [, $iPitch = 0 [, $sFace = 'Arial']]]]]]]]]]]] ) Erstellt eine logische Schriftart mit der angegebenen Charakteristik (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateFontEx ( $iHeight [, $iWidth = 0 [, $iEscapement = 0 [, $iOrientation = 0 [, $iWeight = 400 [, $bItalic = False [, $bUnderline = False [, $bStrikeOut = False [, $iCharSet = 1 [, $iOutPrecision = 0 [, $iClipPrecision = 0 [, $iQuality = 0 [, $iPitchAndFamily = 0 [, $sFaceName = '' [, $iStyle = 0]]]]]]]]]]]]]] ) Erstellt eine logische Schriftart mit den angegebenen Charakteristiken. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateFontIndirect ( $tLogFont ) Erzeugt eine logische Schriftart mit spezifischen Eigenschaften (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateGUID (  ) Erstellt eine globale eindeutige Kennung (globally unique identifier GUID). (benoetigt: #include <WinAPICom.au3>)
_WinAPI_CreateHardLink ( $sNewFile, $sExistingFile ) Stellt einen Hardlink zwischen einer existierenden und einer neuen Datei her. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_CreateIcon ( $hInstance, $iWidth, $iHeight, $iPlanes, $iBitsPixel, $pANDBits, $pXORBits ) Erzeugt ein Icon mit der angegebenen Groesse, Farbe und Bitmuster. (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_CreateIconFromResourceEx ( $pData, $iSize [, $bIcon = True [, $iXDesiredPixels = 0 [, $iYDesiredPixels = 0 [, $iFlags = 0]]]] ) Erzeugt ein Icon oder einen Mauszeiger von den Ressourcenbits welche das Icon beschreiben. (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_CreateIconIndirect ( $hBitmap, $hMask [, $iXHotspot = 0 [, $iYHotspot = 0 [, $bIcon = True]]] ) Erzeugt ein Icon oder ein Mauszeiger mit der gegebenen Groesse, Farbe und Bitmustern. (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_CreateJobObject ( [$sName = '' [, $tSecurity = 0]] ) Erzeugt oder oeffnet ein Jobobjekt. (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_CreateMargins ( $iLeftWidth, $iRightWidth, $iTopHeight, $iBottomHeight ) Erzeugt eine $tagMARGINS Struktur mit der angegebenen linken, rechten, oberen und unteren Grenze. (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_CreateMRUList ( $hKey, $sSubKey [, $iMax = 26] ) Erzeugt eine neue kuerzlich verwendet (most recently used, MRU) Liste. (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_CreateMutex ( $sMutex [, $bInitial = True [, $tSecurity = 0]] ) Erzeugt oder oeffnet ein benanntes oder unbenanntes Mutex-Objekt. (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_CreateNullRgn (  ) Erzeugt eine leere Region. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateNumberFormatInfo ( $iNumDigits, $iLeadingZero, $iGrouping, $sDecimalSep, $sThousandSep, $iNegativeOrder ) Erzeugt eine $tagNUMBERFMT Struktur mit den angegebenen Nummerformattierungsinformationen. (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_CreateObjectID ( $sFilePath ) Erzeugt oder holt den Objektidentifizierer (ObjectID) fuer die angegebene Datei oder Verzeichnis. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_CreatePen ( $iPenStyle, $iWidth, $iColor ) Erstellt einen logischen Stift, der den angegebenen Stil, Breite und Farbe hat (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreatePoint ( $iX, $iY ) Erzeugt eine $tagPOINT Struktur mit den X- und Y-Koordinaten eines gegebenen Punktes. (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_CreatePolygonRgn ( Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1 [, $iMode = 1]]] ) Erzeugt eine polygonische Region. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateProcess ( $sAppName, $sCommand, $tSecurity, $tThread, $bInherit, $iFlags, $pEnviron, $sDir, $tStartupInfo, $tProcess ) Erzeugt einen neuen Prozess und seinen primaeren Thread (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_CreateProcessWithToken ( $sApp, $sCmd, $iFlags, $tStartupInfo, $tProcessInfo, $hToken [, $iLogon = 0 [, $pEnvironment = 0 [, $sDir = '']]] ) Erzeugt einen neuen Prozess und dessen primaeren Thread in dem Sicherheitskontext des angegebenen Tokens. (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_CreateRect ( $iLeft, $iTop, $iRight, $iBottom ) Erzeugt eine $tagRECT Struktur mit den Koordinaten des angegebenen Rechtecks. (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_CreateRectEx ( $iX, $iY, $iWidth, $iHeight ) Erzeugt eine $tagRECT Struktur mit den Koordinaten des angegebenen Rechtecks. (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_CreateRectRgn ( $iLeftRect, $iTopRect, $iRightRect, $iBottomRect ) Erstellt eine rechteckige Region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateRectRgnIndirect ( $tRECT ) Erzeugt eine rechteckige Region. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateRoundRectRgn ( $iLeftRect, $iTopRect, $iRightRect, $iBottomRect, $iWidthEllipse, $iHeightEllipse ) Erzeugt eine rechteckige Region mit abgerundeten Ecken (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateSemaphore ( $sSemaphore, $iInitial, $iMaximum [, $tSecurity = 0] ) Erzeugt oder oeffnet ein benanntes oder unbenanntes Semaphore-Objekt. (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_CreateSize ( $iWidth, $iHeight ) Erzeugt eine $tagSIZE Struktur mit der Breite und Hoehe eines angegebenen Rechtecks. (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_CreateSolidBitmap ( $hWnd, $iColor, $iWidth, $iHeight [, $bRGB = 1] ) Erstellt ein vollfarbiges Bitmap (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateSolidBrush ( $iColor ) Erzeugt ein logisches Fuellmuster in der angegebenen Vollfarbe (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateStreamOnHGlobal ( [$hGlobal = 0 [, $bDeleteOnRelease = True]] ) Erzeugt ein Streamobjekt welches ein Speicherhandle verwendet um die Inhalte des Streams zu speichern. (benoetigt: #include <WinAPICom.au3>)
_WinAPI_CreateString ( $sString [, $pString = 0 [, $iLength = -1 [, $bUnicode = True [, $bAbort = True]]]] ) Kopiert einen angegebenen String zu einem neu allokierten Speicherblock und gibt dessen Zeiger zurueck. (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_CreateSymbolicLink ( $sSymlink, $sTarget [, $bDirectory = False] ) Erzeugt einen symbolischen Link. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_CreateTransform ( [$nM11 = 1 [, $nM12 = 0 [, $nM21 = 0 [, $nM22 = 1 [, $nDX = 0 [, $nDY = 0]]]]]] ) Erzeugt eine $tagXFORM Struktur welche einen Weltplatz zu einem Seitenplatz transformiert. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_CreateWindowEx ( $iExStyle, $sClass, $sName, $iStyle, $iX, $iY, $iWidth, $iHeight, $hParent [, $hMenu = 0 [, $hInstance = 0 [, $pParam = 0]]] ) Erstellt ein ueberlappendes, Pop-up oder ein Child-Fenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_CreateWindowStation ( [$sName = '' [, $iAccess = 0 [, $iFlags = 0 [, $tSecurity = 0]]]] ) Erzeugt ein Fensterstationsobjekt assoziiert mit dem aufrufenden Prozess und weisst sie der aktuellen Sitzung zu. (benoetigt: #include <WinAPISys.au3>)
_WinAPI_DecompressBuffer ( $pUncompressedBuffer, $iUncompressedSize, $pCompressedBuffer, $iCompressedSize [, $iFormat = 0x0002] ) Dekomprimiere einen kompletten komprimierten Puffer. (benoetigt: #include <WinAPISys.au3>)
_WinAPI_DecryptFile ( $sFilePath ) Entschluesselt eine verschluesselte Datei oder Verzeichnis. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_DeferWindowPos ( $hInfo, $hWnd, $hAfter, $iX, $iY, $iWidth, $iHeight, $iFlags ) Aktualisiert die angegebene mehrere-Fenster-Position Struktur fuer ein angegebenes Fenster. (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_DefineDosDevice ( $sDevice, $iFlags [, $sFilePath = ''] ) Definiert, redefiniert, oder loescht MS-DOS Geraetenamen. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_DefRawInputProc ( $paRawInput, $iInput ) Ruft die standard Raw-Input-Prozedur um die Raw-Input-Nachrichten zu verarbeiten welche eine Anwendung nicht verarbeitet. (benoetigt: #include <WinAPISys.au3>)
_WinAPI_DefSubclassProc ( $hWnd, $iMsg, $wParam, $lParam ) Ruft den naechsten Handler in einer Fensterunterklassenkette auf. (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_DefWindowProc ( $hWnd, $iMsg, $wParam, $lParam ) Ruft die Standard Fenster-Prozedur auf, um eine korrekte Weiterverarbeitung der unbearbeiteten Nachrichten zu gewaehrleisten (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_DefWindowProcW ( $hWnd, $iMsg, $wParam, $lParam ) Ruft die Standardfensterprozedur auf um eine Standardverarbeitung fuer jegliche Fensternachrichten bereitzustellen. (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_DeleteDC ( $hDC ) Loescht den festgelegten Geraetekontext (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_DeleteEnhMetaFile ( $hEmf ) Loescht eine Metadatei mit einem erweiterten Format oder dessen Handle. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DeleteFile ( $sFilePath ) Loescht eine bereits existierende Datei. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_DeleteObject ( $hObject ) Loescht einen logischen Zeichenstift, Fuellmuster, Schrift, Bitmap, Region oder Palette (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_DeleteObjectID ( $sFilePath ) Entfernt den Objektidentifizierer von einer angegebenen Datei oder Verzeichnis. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_DeleteVolumeMountPoint ( $sMountedPath ) Loescht einen Laufwerksbuchstaben oder ein gemountetes Verzeichnis. (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_DeregisterShellHookWindow ( $hWnd ) Deregistriert ein gegebenes Shellfenster welches registriert wurde um Shellhooknachrichten zu erhalten. (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_DestroyCaret (  ) Zerstoert die aktuelle Form des Carets und gibt das Caret vom Fenster frei und loescht das Caret vom Bildschirm. (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_DestroyCursor ( $hCursor ) Zerstoert einen Mauszeiger und gibt jeglichen Speicher frei welcher vom Mauszeiger besetzt wurde (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_DestroyIcon ( $hIcon ) Loescht ein Icon und gibt den durch das Icon belegten Speicher wieder frei (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_DestroyWindow ( $hWnd ) Loescht das festgelegte Fenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_DeviceIoControl ( $hDevice, $iControlCode [, $pInBuffer = 0 [, $iInBufferSize = 0 [, $pOutBuffer = 0 [, $iOutBufferSize = 0]]]] ) Sendet einen Kontrollcode direkt zum angegeben Treiber (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_DisplayStruct ( $tStruct [, $sStruct = '' [, $sTitle = '' [, $iItem = 0 [, $iSubItem = 0 [, $iFlags = 0 [, $bTop = True [, $hParent = 0]]]]]]] ) Zeigt die Daten einer gegebenen Struktur oder Speicheradresse als Liste an (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_DllGetVersion ( $sFilePath ) Gibt die DLL-spezifische Versionsinformation zurueck (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_DllInstall ( $sFilePath ) Registriere OLE Controls wie z.B. DLL oder ActiveX Controls (OCX) Dateien (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_DllUninstall ( $sFilePath ) Entfernt OLE Controls wie z.B. DLL oder ActiveX Controls (OCX) Dateien (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_DPtoLP ( $hDC, ByRef $tPOINT [, $iCount = 1] ) Wandelt Geraetekoordinaten in logische Koordinaten um (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DragAcceptFiles ( $hWnd [, $bAccept = True] ) Registriert ob ein Fenster Dropdateien akzeptiert (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_DragFinish ( $hDrop ) Gibt den Speicher frei welches durch das System zugewiesen wurde um Dateinamen zur Anwendung zu schicken (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_DragQueryFileEx ( $hDrop [, $iFlag = 0] ) Gibt den Namen der Dropdateien einer erfolgreichen Drag-und-Drop Operation zurueck (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_DragQueryPoint ( $hDrop ) Gibt die Position des Mauszeigers zum Zeitpunkt des Loslassens der Datei waehrend einer Drag-und-Drop Operation zurueck (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_DrawAnimatedRects ( $hWnd, $tRectFrom, $tRectTo ) Animiert den Rahmen eines Fensters um das Oeffnen eines Icons, die Minimierung oder die Maximierung des Fensters anzudeuten (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DrawBitmap ( $hDC, $iX, $iY, $hBitmap [, $iRop = 0x00CC0020] ) Zeichenet eine Bitmap in den angegebenen Geraetekontext (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DrawEdge ( $hDC, $tRECT, $iEdgeType, $iFlags ) Zeichnet eine oder mehrere Kanten eines Rechtecks (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_DrawFocusRect ( $hDC, $tRECT ) Zeichnet ein Rechteck in den benutzten Stil um anzudeuten, dass das Rechteck den Fokus besitzt (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DrawFrameControl ( $hDC, $tRECT, $iType, $iState ) Zeichnet ein Rahmen-Control mit dem angegebenen Typus und Stil (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_DrawIcon ( $hDC, $iX, $iY, $hIcon ) Zeichnet ein Icon oder Cursor in den festgelegten Geraetekontext (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_DrawIconEx ( $hDC, $iX, $iY, $hIcon [, $iWidth = 0 [, $iHeight = 0 [, $iStep = 0 [, $hBrush = 0 [, $iFlags = 3]]]]] ) Zeichnet ein Icon oder Cursor in den angegebenen Geraetekontext (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_DrawLine ( $hDC, $iX1, $iY1, $iX2, $iY2 ) Zeichnet eine Linie (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DrawShadowText ( $hDC, $sText, $iRGBText, $iRGBShadow [, $iXOffset = 0 [, $iYOffset = 0 [, $tRECT = 0 [, $iFlags = 0]]]] ) Zeichnet einen formatierten Text in ein gegebenes Rechteck mit einem Dropschatten (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DrawText ( $hDC, $sText, ByRef $tRect, $iFlags ) Zeichnet formatierten Text in das angegebene Rechteck (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_DrawThemeBackground ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT [, $tCLIP = 0] ) Zeichnet den Rand und fuellt, definiert durch den visuellen Stil, den angegebenen Controlteil (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_DrawThemeEdge ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT, $iEdge, $iFlags [, $tAREA = 0] ) Zeichnet eine oder mehrere Kanten welche durch den visuellen Stil eines Rechtecks definiert sind (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_DrawThemeIcon ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT, $hIL, $iIndex ) Zeichnet ein Bild von einer Bilderliste mit dem Iconeffekt definiert durch den visuellen Stil (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_DrawThemeParentBackground ( $hWnd, $hDC [, $tRECT = 0] ) Zeichnet den Bereich des Parentcontrols welcher von einem semi-transparenten oder alpha-ueberblendeten Childcontrol ueberdeckt wird (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_DrawThemeText ( $hTheme, $iPartID, $iStateID, $hDC, $sText, $tRECT, $iFlags ) Zeichnet einen Text mit der Farbe und der Schriftart des gegebenen visuellen Stils (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_DrawThemeTextEx ( $hTheme, $iPartID, $iStateID, $hDC, $sText, $tRECT, $iFlags, $tDTTOPTS ) Zeichnet einen Text mit der Farbe und Schriftart des definierten visuellen Stils (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_DuplicateEncryptionInfoFile ( $sSrcFilePath, $sDestFilePath [, $iCreation = 2 [, $iAttributes = 0 [, $tSecurity = 0]]] ) Kopiert die EFS Metadaten einer Datei oder eines Verzeichnisses in eine andere Datei oder Verzeichnis (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_DuplicateHandle ( $hSourceProcessHandle, $hSourceHandle, $hTargetProcessHandle, $iDesiredAccess, $iInheritHandle, $iOptions ) Erstellt ein Duplikat eines Objekt-Handles (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_DuplicateTokenEx ( $hToken, $iAccess, $iLevel [, $iType = 1 [, $tSecurity = 0]] ) Erstellt einen neuen Primaer- oder Immitierungszugangstoken welcher einen bereits existieren Token dubliziert (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_DwmDefWindowProc ( $hWnd, $iMsg, $wParam, $lParam ) Die Standardfensterprozedur fuer den Desktop-Fenster-Manager (DWM) um im Nicht-Client-Bereich Treffer zu testen (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmEnableBlurBehindWindow ( $hWnd [, $bEnable = True [, $bTransition = False [, $hRgn = 0]]] ) Aktiviert den Verschwimmungseffekt eines angegebenen Fensters (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmEnableComposition ( $bEnable ) Akzeptiert die Desktop-Fenster-Manager-Komposition (DWM) (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmExtendFrameIntoClientArea ( $hWnd [, $tMARGINS = 0] ) Erweitert den Fensterrahmen hinter den Clientbereich (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmGetColorizationColor (  ) Gibt die aktuelle genutzte Farbe fuer den Desktop-Fenster-Manager-Glas-Komposition (DWM) zurueck (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmGetColorizationParameters (  ) Gibt die Faerbungsparameter zurueck welche fuer den Desktop-Fenster-Manager (DWM) verwendet werden (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmGetWindowAttribute ( $hWnd, $iAttribute ) Gibt den aktuellen Wert eines gegebenen Attributes, welches auf ein Fenster angewendet ist, zurueck (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmInvalidateIconicBitmaps ( $hWnd ) Deutet darauf hin, dass alle vorher bereitgestellen symbolischen Bitmaps eines Fensters, sowohl Vorschaubilder als auch Spitzenrepraesentation, aktualisiert werden sollten (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmIsCompositionEnabled (  ) Findet heraus ob die Desktop-Fenster-Manager-Komposition (DWM) aktiviert ist oder nicht (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmQueryThumbnailSourceSize ( $hThumbnail ) Gibt die Quellgroesse des Desktop-Fenster-Manager-Vorschaubildes zurueck (DWM) (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmRegisterThumbnail ( $hDestination, $hSource ) Erstellt eine Desktop-Fenster-Manager-Vorschaubildbeziehung (DWM) zwischen dem Ziel- und Quellfenster (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmSetColorizationParameters ( $tDWMCP ) Setzt die Faerbungsparameter des Desktop-Fenster-Managers (DWM) (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmSetIconicLivePreviewBitmap ( $hWnd, $hBitmap [, $bFrame = False [, $tClient = 0]] ) Setzt eine statische, symbolische Bitmap um sie waehrend einer Livevorschau eines Fensters oder Tabs zu zeigen (auch bekannt als Peek Preview) (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmSetIconicThumbnail ( $hWnd, $hBitmap [, $bFrame = False] ) Setzt eine statische, symbolische Bitmap eines Fensters oder Tabs um sie als Vorschaubildrepraesentation zu nutzen (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmSetWindowAttribute ( $hWnd, $iAttribute, $iData ) Setzt den Wert des gegebenen Attributs fuer das Nicht-Client-Rendern welche auf das Fenster angewendet werden sollen (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmUnregisterThumbnail ( $hThumbnail ) Entfernt eine Desktop-Fenster-Manager-Vorschaubildbeziehung (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DwmUpdateThumbnailProperties ( $hThumbnail [, $bVisible = True [, $bClientAreaOnly = False [, $iOpacity = 255 [, $tRectDest = 0 [, $tRectSrc = 0]]]]] ) Gibt die Desktop-Fenster-Manager-Vorschaubildeigenschaften (DWM) an (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_DWordToFloat ( $iValue ) Wandelt einen Wert des Typs DWORD zu einem Wert des Typs FLOAT um (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_DWordToInt ( $iValue ) Wandelt einen Wert des Typs DWORD zu einem Wert des Typs INT um (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_EjectMedia ( $sDrive ) Wird ein Medium von einem Geraet aus (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_Ellipse ( $hDC, $tRECT ) Zeichnet eine Ellipse (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_EmptyWorkingSet ( [$iPID = 0] ) Entfernt so viele wie Seiten wie moeglich von der Arbeitsmenge eines gegebenen Prozesses (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_EnableWindow ( $hWnd [, $bEnable = True] ) Aktiviert oder deaktiviert Maus- und Tastatureingaben im angegebenen Fenster oder Control (benoetigt: #include <WinAPISys.au3>)
_WinAPI_EncryptFile ( $sFilePath ) Verschluesselt eine Datei oder ein Verzeichnis (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_EncryptionDisable ( $sDir, $bDisable ) Deaktiviert oder Aktiviert die Verschluesselung des gegebenen Verzeichnisses und die darin enthaltenen Dateien (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_EndBufferedPaint ( $hBP [, $bUpdate = True] ) Schliesst eine gepufferte Zeichnenoperation ab und gibt das damit verbundenen gepufferten Zeichnenhandles frei (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_EndDeferWindowPos ( $hInfo ) Aktualisiert gleichzeitig die Position und Groesse eines oder mehrerer Fenster in einem einzelnen Anzeigeaktualisierungszyklus (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_EndPaint ( $hWnd, ByRef $tPAINTSTRUCT ) Markiert das Ende des Zeichnens in einem gegebenen Fenster (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_EndPath ( $hDC ) Closes a path bracket and selects the path defined by the bracket into the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_EndUpdateResource ( $hUpdate [, $bDiscard = False] ) Commits or discards a changes of the resources within module (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_EnumChildProcess ( [$iPID = 0] ) Enumerates a child processes that belong to the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_EnumChildWindows ( $hWnd [, $bVisible = True] ) Enumerates a child windows that belong to the specified parent window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_EnumDesktops ( $hStation ) Enumerates all desktops associated with the specified window station of the calling process (benoetigt: #include <WinAPISys.au3>)
_WinAPI_EnumDesktopWindows ( $hDesktop [, $bVisible = True] ) Enumerates all top-level windows associated with the specified desktop (benoetigt: #include <WinAPISys.au3>)
_WinAPI_EnumDeviceDrivers (  ) Retrieves the load address for each device driver in the system (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_EnumDisplayDevices ( $sDevice, $iDevNum ) Bezieht Informationen ueber die Anzeigegeraete in einem System (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_EnumDisplayMonitors ( [$hDC = 0 [, $tRECT = 0]] ) Enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_EnumDisplaySettings ( $sDevice, $iMode ) Retrieves information about one of the graphics modes for a display device (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_EnumDllProc ( $sFilePath [, $sMask = '' [, $iFlags = 0]] ) Enumerates an exported functions of the specified dynamic-link library (DLL) (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_EnumFiles ( $sDir [, $iFlag = 0 [, $sTemplate = '' [, $bExclude = False]]] ) Enumerates the files and subdirectories for the specified directory with a name that matches the template (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_EnumFileStreams ( $sFilePath ) Enumerates all streams with a ::$DATA stream type in the specified file or directory (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_EnumFontFamilies ( [$hDC = 0 [, $sFaceName = '' [, $iCharSet = 1 [, $iFontType = 0x07 [, $sPattern = '' [, $bExclude = False]]]]]] ) Enumerates all uniquely-named fonts in the system that match the specified font characteristics (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_EnumHardLinks ( $sFilePath ) Enumerates all the hard links to the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_EnumMRUList ( $hMRU, $iItem ) Enumerates the contents of the most recently used (MRU) list (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_EnumPageFiles (  ) Retrieves information for each installed pagefile in the system (benoetigt: #include <WinAPISys.au3>)
_WinAPI_EnumProcessHandles ( [$iPID = 0 [, $iType = 0]] ) Enumerates a handles that belong to the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_EnumProcessModules ( [$iPID = 0 [, $iFlag = 0]] ) Retrieves a handle and name for each module in the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_EnumProcessThreads ( [$iPID = 0] ) Enumerates a threads that belong to the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_EnumProcessWindows ( [$iPID = 0 [, $bVisible = True]] ) Enumerates a windows that belong to the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_EnumRawInputDevices (  ) Enumerates the raw input devices attached to the system (benoetigt: #include <WinAPISys.au3>)
_WinAPI_EnumResourceLanguages ( $hModule, $sType, $sName ) Enumerates a language-specific resources, of the specified type and name, associated with a binary module (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_EnumResourceNames ( $hModule, $sType ) Enumerates the resources of a specified type within a binary module (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_EnumResourceTypes ( $hModule ) Enumerates the resource types within a binary module (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_EnumSystemGeoID (  ) Enumerates the geographical location identifiers (GEOID) that are available on the operating system (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_EnumSystemLocales ( $iFlag ) Enumerates the locales that are either installed on or supported by an operating system (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_EnumUILanguages ( [$iFlag = 0] ) Enumerates the user interface languages that are available on the operating system (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_EnumWindows ( [$bVisible = True [, $hWnd = Default]] ) Listet alle Fenster auf (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_EnumWindowsPopup (  ) Listet alle Popup Fenster auf (Kontextmenues) (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_EnumWindowStations (  ) Enumerates all window stations in the current session (benoetigt: #include <WinAPISys.au3>)
_WinAPI_EnumWindowsTop (  ) Listet alle Top-Level Fenster auf (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_EqualMemory ( $pSource1, $pSource2, $iLength ) Compares two blocks of memory to determine whether the specified number of bytes are identical (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_EqualRect ( $tRECT1, $tRECT2 ) Determines whether the two specified rectangles are equal (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_EqualRgn ( $hRgn1, $hRgn2 ) Checks the two specified regions to determine whether they are identical (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ExcludeClipRect ( $hDC, $tRECT ) Creates a new clipping region that consists of the existing clipping region minus the specified rectangle (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ExpandEnvironmentStrings ( $sString ) Erweitert Strings von Umgebungsvariablen und ersetzt diese mit ihren definierten Werten (benoetigt: #include <WinAPISys.au3>)
_WinAPI_ExtCreatePen ( $iPenStyle, $iWidth, $iBrushStyle, $iRGB [, $iHatch = 0 [, $aUserStyle = 0 [, $iStart = 0 [, $iEnd = -1]]]] ) Creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ExtCreateRegion ( $tRGNDATA [, $tXFORM = 0] ) Creates a region from the specified region and transformation data (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ExtFloodFill ( $hDC, $iX, $iY, $iRGB [, $iType = 0] ) Fills an area of the display surface with the current brush (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ExtractIcon ( $sIcon, $iIndex [, $bSmall = False] ) Extracts an icon from the specified executable file, DLL, or icon file (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_ExtractIconEx ( $sFilePath, $iIndex, $paLarge, $paSmall, $iIcons ) Erstellt ein Array von Handles zu grossen oder kleinen Icons, die aus einer Datei extrahiert wurden (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_ExtSelectClipRgn ( $hDC, $hRgn [, $iMode = 5] ) Combines the specified region with the current clipping region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_FatalAppExit ( $sMessage ) Zeigt ein Nachrichtenfenster und beendet die Anwendung (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_FatalExit ( $iCode ) Transfers execution control to the debugger (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_FileEncryptionStatus ( $sFilePath ) Retrieves the encryption status of the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FileExists ( $sFilePath ) Tests whether the specified path is existing file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FileIconInit ( [$bRestore = True] ) Initializes or reinitializes the system image list (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_FileInUse ( $sFilePath ) Tests whether the specified file in use by another application (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FillMemory ( $pMemory, $iLength [, $iValue = 0] ) Fills a block of memory with the given value (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_FillPath ( $hDC ) Closes any open figures in the current path and fills the path's interior by using the current brush (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_FillRect ( $hDC, $tRECT, $hBrush ) Fuellt ein Rechteck mit dem festgelegten Fuellmuster (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_FillRgn ( $hDC, $hRgn, $hBrush ) Fills a region by using the specified brush (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_FindClose ( $hSearch ) Closes a file search handle (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FindCloseChangeNotification ( $hChange ) Stops change notification handle monitoring (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FindExecutable ( $sFileName [, $sDirectory = ""] ) Ermittelt den Namen der ausfuehrbaren Datei, welche mit dem angegebenen Dateinamen verknuepft ist (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_FindFirstChangeNotification ( $sDirectory, $iFlags [, $bSubtree = False] ) Creates a change notification handle and sets up initial change notification filter conditions (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FindFirstFile ( $sFilePath, $tData ) Searches a directory for a file or subdirectory with a name that matches a specific name (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FindFirstFileName ( $sFilePath, ByRef $sLink ) Creates an enumeration of all the hard links to the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FindFirstStream ( $sFilePath, $tData ) Enumerates the first stream with a ::$DATA stream type in the specified file or directory (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FindNextChangeNotification ( $hChange ) Requests that the operating system signal a change notification handle the next time it detects an appropriate change (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FindNextFile ( $hSearch, $tData ) Continues a file or directory search (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FindNextFileName ( $hSearch, ByRef $sLink ) Continues enumerating the hard links (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FindNextStream ( $hSearch, $tData ) Continues a stream search (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FindResource ( $hInstance, $sType, $sName ) Determines the location of a resource with the specified type and name in the specified module (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_FindResourceEx ( $hInstance, $sType, $sName, $iLanguage ) Determines the location of the resource with the specified type, name, and language in the specified module (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_FindTextDlg ( $hOwner [, $sFindWhat = '' [, $iFlags = 0 [, $pFindProc = 0 [, $lParam = 0]]]] ) Creates a system-defined modeless Find dialog box to search for text in a document (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_FindWindow ( $sClassName, $sWindowName ) Ermittelt das Handle zu dem Top-Level Fenster des entsprechenden Klassen- und Fensternamen (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_FlashWindow ( $hWnd [, $bInvert = True] ) Laesst das angegebene Fenster einmal aufblinken (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_FlashWindowEx ( $hWnd [, $iFlags = 3 [, $iCount = 3 [, $iTimeout = 0]]] ) Laesst das angegebene Fenster (mehrmalig) aufblinken (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_FlattenPath ( $hDC ) Transforms any curves in the path that is selected into the current DC, turning each curve into a sequence of lines (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_FloatToDWord ( $iValue ) Converts a value of type FLOAT to a value of type DWORD (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_FloatToInt ( $nFloat ) Gibt eine 4 Byte Gleitkommazahl als Integerwert zurueck (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_FlushFileBuffers ( $hFile ) Leert den (Speicher) Puffer einer bestimmten Datei und bewirkt, dass alle gepufferten Daten geschrieben werden  (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FlushFRBuffer (  ) Destroys the internal buffer that used the _WinAPI_FindTextDlg() and _WinAPI_ReplaceTextDlg() functions (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_FlushViewOfFile ( $pAddress [, $iBytes = 0] ) Writes to the disk a byte range within a mapped view of a file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_FormatDriveDlg ( $sDrive [, $iOption = 0 [, $hParent = 0]] ) Opens the Shell's Format dialog (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_FormatMessage ( $iFlags, $pSource, $iMessageID, $iLanguageID, ByRef $pBuffer, $iSize, $vArguments ) Formatiert einen Nachrichtenstring (benoetigt: #include <WinAPIError.au3>)
_WinAPI_FrameRect ( $hDC, $tRECT, $hBrush ) Zeichnet einen Rand um das festgelegte Rechteck unter Verwendung des angegebenen Fuellmusters (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_FrameRgn ( $hDC, $hRgn, $hBrush, $iWidth, $iHeight ) Draws a border around the specified region by using the specified brush (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_FreeLibrary ( $hModule ) Dekrementiert den Referenzzaehler der geladenen, dynamischen Bibliothek (DLL) (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_FreeMemory ( $pMemory ) Frees a memory block in the internal library heap (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_FreeMRUList ( $hMRU ) Frees the handle associated with the most recently used (MRU) list and writes cached data to the registry (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_FreeResource ( $hData ) Decrements (decreases by one) the reference count of a loaded resource (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_GdiComment ( $hDC, $pBuffer, $iSize ) Copies a comment from a buffer into a specified enhanced-format metafile (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetActiveWindow (  ) Retrieves the window handle to the active window attached to the calling process's message queue (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetAllUsersProfileDirectory (  ) Retrieves the path to the root of the directory that contains program data shared by all users (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_GetAncestor ( $hWnd [, $iFlags = 1] ) Ermittelt das Handle zum "Urvater" eines Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetApplicationRestartSettings ( [$iPID = 0] ) Retrieves the restart information registered for the specified process (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_GetArcDirection ( $hDC ) Retrieves the current arc direction for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetAsyncKeyState ( $iKey ) Ermittelt ob eine Tastaturtaste zur Zeit des Funktionsaufrufs gedrueckt ist oder nicht (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetBinaryType ( $sFilePath ) Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetBitmapBits ( $hBitmap, $iSize, $pBits ) Copies the bitmap bits of a specified device-dependent bitmap into a buffer (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetBitmapDimension ( $hBitmap ) Retrieves a dimension of the specified bitmap (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetBitmapDimensionEx ( $hBitmap ) Retrieves the dimensions of a compatible bitmap (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetBkColor ( $hDC ) Ruft die aktuelle Hintergrundfarbe fuer den angegebenen Geraetekontext ab (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetBkMode ( $hDC ) Liefert den aktuellen Hintergrund-Mischmodus fuer den angegebenen Geraetekontext (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_GetBoundsRect ( $hDC [, $iFlags = 0] ) Obtains the current accumulated bounding rectangle for a specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetBrushOrg ( $hDC ) Retrieves the current brush origin for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetBufferedPaintBits ( $hBP ) Retrieves a pointer to the buffer bitmap if the buffer is a device-independent bitmap (DIB) (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetBufferedPaintDC ( $hBP ) Gets the paint device context (DC) (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetBufferedPaintTargetDC ( $hBP ) Retrieves the target device context (DC) (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetBufferedPaintTargetRect ( $hBP ) Retrieves the target rectangle (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetBValue ( $iRGB ) Retrieves an intensity value for the blue component of a 32-bit RGB value (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetCaretBlinkTime (  ) Returns the time required to invert the caret's pixels (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_GetCaretPos (  ) Retrieves the caret's position (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_GetCDType ( $sDrive ) Retrieves a type of the media which is loaded into a specified CD-ROM device (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetClassInfoEx ( $sClass [, $hInstance = 0] ) Retrieves information about a window class (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetClassLongEx ( $hWnd, $iIndex ) Retrieves the specified value associated with the specified window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetClassName ( $hWnd ) Ermittelt den Namen der Klasse (Class) zu der das angegebene Fenster gehoert (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetClientHeight ( $hWnd ) Ermittelt die Hoehe des Anwendungsbereichs eines Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetClientRect ( $hWnd ) Ermittelt die Koordinaten einer Fensterflaeche (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetClientWidth ( $hWnd ) Ermittelt die Breite des Anwendungsbereichs eines Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetClipboardSequenceNumber (  ) Retrieves the clipboard sequence number for the current window station (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetClipBox ( $hDC, ByRef $tRECT ) Retrieves the dimensions of the bounding rectangle of the visible area (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetClipCursor (  ) Retrieves the screen coordinates of the rectangular area to which the cursor is confined (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_GetClipRgn ( $hDC ) Retrieves a handle identifying the current application-defined clipping region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetColorAdjustment ( $hDC ) Retrieves the color adjustment for the specified device context (DC) (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetCompressedFileSize ( $sFilePath ) Retrieves the actual number of bytes of disk storage used to store a specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetCompression ( $sFilePath ) Retrieves the current compression state of a file or directory (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetConnectedDlg ( $iDlg [, $iFlags = 0 [, $hParent = 0]] ) Launches the Get Connected wizard within the calling application to enable network connectivity (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_GetCurrentDirectory (  ) Retrieves the current directory for the current process (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetCurrentHwProfile (  ) Retrieves information about the current hardware profile for the local computer (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetCurrentObject ( $hDC, $iType ) Retrieves a handle to an object of the specified type that has been selected into the specified device context (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_GetCurrentPosition ( $hDC ) Ermittelt die aktuelle Position fuer den festgelegten Geraetekontext (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetCurrentProcess (  ) Gibt das Prozess-Handle des aufgerufenen Prozesses zurueck (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_GetCurrentProcessExplicitAppUserModelID (  ) Retrieves the application-defined, explicit Application User Model ID for the current process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetCurrentProcessID (  ) Gibt die Prozess ID des aufrufenden Prozesses zurueck (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetCurrentThemeName (  ) Retrieves the name of the current visual styles, color scheme name, and size name (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetCurrentThread (  ) Ermittelt ein Pseudo-Handle fuer den aufrufenden Prozess (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetCurrentThreadId (  ) Gibt den Thread-Identifizierer (ID) des aufrufenden Threads zurueck (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetCursor (  ) Retrieves a handle to the current cursor (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_GetCursorInfo (  ) Ermittelt Informationen ueber den globalen Cursor (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_GetDateFormat ( [$iLCID = 0 [, $tSYSTEMTIME = 0 [, $iFlags = 0 [, $sFormat = '']]]] ) Formats a date as a date string for a locale specified by the locale identifier (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetDC ( $hWnd ) Holt einen Handle zu einem Bildschirm-Geraetekontext fuer den Anwendungsbereich eines Fensters (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_GetDCEx ( $hWnd, $hRgn, $iFlags ) Retrieves a handle to a device context (DC) for the client area of a specified window (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_GetDefaultPrinter (  ) Ermittelt den Namen des Standarddruckers fuer den aktuellen Benutzer auf dem lokalen Computer (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetDefaultUserProfileDirectory (  ) Ermittelt den Pfad zum Stammverzeichnis des Standardbenutzerprofils  (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_GetDesktopWindow (  ) Ermittelt das Handle des Windows Desktop Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetDeviceCaps ( $hDC, $iIndex ) Ermittelt geraetespezifische Informationen ueber ein bestimmtes Geraet (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_GetDeviceDriverBaseName ( $pDriver ) Retrieves the base name of the specified device driver (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetDeviceDriverFileName ( $pDriver ) Retrieves the path available for the specified device driver (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetDeviceGammaRamp ( $hDC, ByRef $aRamp ) Gets the gamma ramp on direct color display boards that support downloadable gamma ramps in hardware (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetDIBColorTable ( $hBitmap ) Retrieves RGB color table from the DIB section bitmap (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetDIBits ( $hDC, $hBitmap, $iStartScan, $iScanLines, $pBits, $tBI, $iUsage ) Ermittelt die Bits einer bestimmten Bitmap und kopiert diese in einen Speicherpuffer als DIB (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetDiskFreeSpaceEx ( $sDrive ) Retrieves information about the amount of space that is available on a disk volume (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetDlgCtrlID ( $hWnd ) Gibt den Identifizierer des angegebenen Controls zurueck (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_GetDlgItem ( $hWnd, $iItemID ) Ermittelt das Handle des angegebenen Controls in einem Dialogfenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetDllDirectory (  ) Retrieves the application-specific portion of the search path used to locate DLLs for the application (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetDriveBusType ( $sDrive ) Retrieves a bus type for the specified drive (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetDriveGeometryEx ( $iDrive ) Retrieves extended information about the disk's geometry (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetDriveNumber ( $sDrive ) Retrieves a device type, device number, and partition number for the specified drive (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetDriveType ( [$sDrive = ''] ) Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetDurationFormat ( $iLCID, $iDuration [, $sFormat = ''] ) Formats a duration of time as a time string for a locale specified by identifier (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetEffectiveClientRect ( $hWnd, $aCtrl [, $iStart = 0 [, $iEnd = -1]] ) Calculates the dimensions of a rectangle in the client area that contains all the specified controls (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetEnhMetaFile ( $sFilePath ) Creates a handle that identifies the enhanced-format metafile stored in the specified file (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetEnhMetaFileBits ( $hEmf, ByRef $pBuffer ) Retrieves the contents of the specified enhanced-format metafile (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetEnhMetaFileDescription ( $hEmf ) Retrieves an optional text description from an enhanced-format metafile (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetEnhMetaFileDimension ( $hEmf ) Retrieves a dimension of the specified enhanced-format metafile (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetEnhMetaFileHeader ( $hEmf ) Retrieves the record containing the header for the specified enhanced-format metafile (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetErrorMessage ( $iCode [, $iLanguage = 0] ) Retrieves a text error message for the specified system error code (benoetigt: #include <WinAPIError.au3>)
_WinAPI_GetErrorMode (  ) Retrieves the error mode for the current process (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_GetExitCodeProcess ( $hProcess ) Retrieves the termination status of the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetExtended (  ) Retrieves the last extended function return value (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_GetFileAttributes ( $sFilePath ) Retrieves file system attributes for a specified file or directory (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFileID ( $hFile ) Retrieves the file system's 8-byte file reference number for a file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFileInformationByHandle ( $hFile ) Retrieves file information for the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFileInformationByHandleEx ( $hFile ) Retrieves file information for the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFilePointerEx ( $hFile ) Retrieves the file pointer of the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFileSizeEx ( $hFile ) Ermittelt die Groesse einer festgelegten Datei (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFileSizeOnDisk ( $sFilePath ) Retrieves the file allocation size on disk (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFileTitle ( $sFilePath ) Retrieves the name of the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFileType ( $hFile ) Retrieves the file type of the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFileVersionInfo ( $sFilePath, ByRef $pBuffer [, $iFlags = 0] ) Retrieves version information for the specified file (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_GetFinalPathNameByHandle ( $hFile ) Retrieves the final path of the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFinalPathNameByHandleEx ( $hFile [, $iFlags = 0] ) Retrieves the final path of the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetFocus (  ) Ermittelt das Handle des Fensters, welches den Tastaturfokus besitzt (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetFontMemoryResourceInfo ( $pMemory [, $iFlag = 1] ) Reads out font information from a TTF loaded into the memory (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetFontName ( $sFaceName [, $iStyle = 0 [, $iCharSet = 1]] ) Retrieves the unique name of the font based on its typeface name, character set, and style (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetFontResourceInfo ( $sFont [, $bForce = False [, $iFlag = Default]] ) Retrieves the fontname from the specified font resource file (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetForegroundWindow (  ) Gibt das Handle des Fensters im Vordergrund zurueck (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetFRBuffer (  ) Retrieves the current size of the internal buffer that used the _WinAPI_FindTextDlg() and _WinAPI_ReplaceTextDlg() functions (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_GetFullPathName ( $sFilePath ) Retrieves the full path and file name of the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetGeoInfo ( $iGEOID, $iType [, $iLanguage = 0] ) Retrieves information about a specified geographical location (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetGlyphOutline ( $hDC, $sChar, $iFormat, ByRef $pBuffer [, $tMAT2 = 0] ) Retrieves the outline or bitmap for a character in the TrueType font (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetGraphicsMode ( $hDC ) Retrieves the current graphics mode for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetGuiResources ( [$iFlag = 0 [, $hProcess = -1]] ) Ermittelt die Anzahl der Handles zu grafischen Benutzerschnittstellen-Objekten in Gebrauch vom angegebenen Prozess (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetGUIThreadInfo ( $iThreadId ) Retrieves information about the active window or a specified GUI thread (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetGValue ( $iRGB ) Retrieves an intensity value for the green component of a 32-bit RGB value (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetHandleInformation ( $hObject ) Retrieves certain properties of an object handle (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetHGlobalFromStream ( $pStream ) Ruft das globale Speicherhandle zu einem Stream ab (benoetigt: #include <WinAPICom.au3>)
_WinAPI_GetIconDimension ( $hIcon ) Retrieves a dimension of the specified icon (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_GetIconInfo ( $hIcon ) Ermittelt Informationen ueber das bestimmte Icon oder Cursor (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_GetIconInfoEx ( $hIcon ) Retrieves information about the specified icon or cursor (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_GetIdleTime (  ) Retrieves the time that has elapsed since the last input (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetKeyboardLayout ( $hWnd ) Retrieves the active input locale identifier for the specified window (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetKeyboardLayoutList (  ) Retrieves the all input locale identifiers corresponding to the current set of input locales in the system (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetKeyboardState (  ) Copies the status of the 256 virtual keys to the specified buffer (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetKeyboardType ( $iType ) Retrieves information about the current keyboard (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetKeyNameText ( $lParam ) Retrieves a string that represents the name of a key (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetKeyState ( $vKey ) Retrieves the status of the specified virtual key (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetLastActivePopup ( $hWnd ) Determines which pop-up window owned by the specified window was most recently active (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetLastError (  ) Gibt den letzten Fehlercode des aufrufenden Threads zurueck (benoetigt: #include <WinAPIError.au3>)
_WinAPI_GetLastErrorMessage (  ) Gibt die letzte Fehlermeldung des Aufrufenden Threads zurueck (benoetigt: #include <WinAPIError.au3>)
_WinAPI_GetLayeredWindowAttributes ( $hWnd, ByRef $iTransColor, ByRef $iTransGUI [, $bColorRef = False] ) Holt die Attribute mehrschichtiger Fenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetLocaleInfo ( $iLCID, $iType ) Retrieves information about a locale specified by identifier (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetLogicalDrives (  ) Retrieves a bitmask representing the currently available disk drives (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetMapMode ( $hDC ) Retrieves the current mapping mode (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetMemorySize ( $pMemory ) Retrieves the size of a memory block allocated from the internal library heap (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_GetMessageExtraInfo (  ) Retrieves the extra message information for the current thread (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetModuleFileNameEx ( $hProcess [, $hModule = 0] ) Retrieves the fully-qualified path for the file containing the specified module (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetModuleHandle ( $sModuleName ) Gibt ein Handle zu dem angegebenen Modul zurueck (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetModuleHandleEx ( $sModule [, $iFlags = 0] ) Retrieves a module handle for the specified module (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetModuleInformation ( $hProcess [, $hModule = 0] ) Retrieves information about the specified module (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetMonitorInfo ( $hMonitor ) Retrieves information about a display monitor (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetMousePos ( [$bToClient = False [, $hWnd = 0]] ) Gibt die derzeitige Mausposition zurueck (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_GetMousePosX ( [$bToClient = False [, $hWnd = 0]] ) Gibt die aktuelle X-Koordinate der Maus zurueck (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_GetMousePosY ( [$bToClient = False [, $hWnd = 0]] ) Gibt die aktuelle Y-Koordinate der Maus zurueck (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_GetMUILanguage (  ) Gets the language currently in use by the common controls for a particular process (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetNumberFormat ( $iLCID, $sNumber [, $tNUMBERFMT = 0] ) Formats a number string as a number string customized for a locale specified by identifier (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetObject ( $hObject, $iSize, $pObject ) Ermittelt Informationen ueber das angegebene Grafik-Objekt (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_GetObjectID ( $sFilePath ) Retrieves the object identifier for the specified file or directory (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetObjectInfoByHandle ( $hObject ) Retrieves information about a specified object (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_GetObjectNameByHandle ( $hObject ) Retrieves a name of the specified object (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_GetObjectType ( $hObject ) Retrieves the type of the specified object (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_GetOpenFileName ( [$sTitle = "" [, $sFilter = "All files (*.*)" [, $sInitalDir = "." [, $sDefaultFile = "" [, $sDefaultExt = "" [, $iFilterIndex = 1 [, $iFlags = 0 [, $iFlagsEx = 0 [, $hWndOwner = 0]]]]]]]]] ) Erzeugt ein "Oeffnen-Dialog-Fenster", welches dem Benutzer das Laufwerk, Verzeichnis und den Namen einer oder mehrerer zu oeffnenden Dateien bestimmen laesst (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_GetOutlineTextMetrics ( $hDC ) Retrieves text metrics for TrueType fonts (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetOverlappedResult ( $hFile, $tOverlapped, ByRef $iBytes [, $bWait = False] ) Ruft das Ergebnis einer ueberlappenden Operation ab (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetParent ( $hWnd ) Ermittelt das Handle vom Parentfenster des angegebenen Childfensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetParentProcess ( [$iPID = 0] ) Retrieves the PID of the parent process for the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetPerformanceInfo (  ) Retrieves the performance information (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetPEType ( $sFilePath ) Retrieves a type of the machine for the specified portable executable (PE) (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetPhysicallyInstalledSystemMemory (  ) Retrieves the amount of RAM that is physically installed on the computer (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetPixel ( $hDC, $iX, $iY ) Retrieves the color value of the pixel at the specified coordinates (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetPolyFillMode ( $hDC ) Retrieves the current polygon fill mode (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetPosFromRect ( $tRECT ) Interprets the coordinates of the rectangle as offset and position coordinates (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetPriorityClass ( [$iPID = 0] ) Retrieves the priority class for the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcAddress ( $hModule, $vName ) Retrieves the address of an exported function or variable from the specified module (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetProcessAffinityMask ( $hProcess ) Bezieht die "Affinity Mask" fuer den Prozess und das System (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcessCommandLine ( [$iPID = 0] ) Retrieves the command-line string for the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcessFileName ( [$iPID = 0] ) Retrieves the fully-qualified path of the executable file for the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcessHandleCount ( [$iPID = 0] ) Retrieves the number of open handles that belong to the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcessID ( $hProcess ) Ermittelt die Prozess-ID des festgelegten Prozesses (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcessIoCounters ( [$iPID = 0] ) Retrieves accounting information for all I/O operations performed by the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcessMemoryInfo ( [$iPID = 0] ) Retrieves information about the memory usage of the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcessName ( [$iPID = 0] ) Retrieves the name for the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcessShutdownParameters (  ) Retrieves the shutdown parameters for the currently calling process (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetProcessTimes ( [$iPID = 0] ) Retrieves timing information for the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcessUser ( [$iPID = 0] ) Retrieves the user and domain name for the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProcessWindowStation (  ) Retrieves a handle to the current window station for the calling process (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetProcessWorkingDirectory ( [$iPID = 0] ) Retrieves the current working directory for the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetProfilesDirectory (  ) Retrieves the path to the root directory where user profiles are stored (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetPwrCapabilities (  ) Retrieves information about the system power capabilities (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetRawInputBuffer ( $pBuffer, $iLength ) Performs a buffered read of the raw input data (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetRawInputBufferLength (  ) Retrieves the required buffer size to call the _WinAPI_GetRawInputBuffer() function (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetRawInputData ( $hRawInput, $pBuffer, $iLength, $iFlag ) Retrieves the raw input from the specified device (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetRawInputDeviceInfo ( $hDevice, $pBuffer, $iLength, $iFlag ) Retrieves information about the raw input device (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetRegionData ( $hRgn, ByRef $tRGNDATA ) Fills the specified buffer with data describing a region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetRegisteredRawInputDevices ( $pBuffer, $iLength ) Retrieves the information about the raw input devices for the current application (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetRegKeyNameByHandle ( $hKey ) Retrieves a name of the specified registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_GetRgnBox ( $hRgn, ByRef $tRECT ) Retrieves the bounding rectangle of the specified region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetROP2 ( $hDC ) Retrieves the foreground mix mode of the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetRValue ( $iRGB ) Retrieves an intensity value for the red component of a 32-bit RGB value (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetSaveFileName ( [$sTitle = "" [, $sFilter = "All files (*.*)" [, $sInitalDir = "." [, $sDefaultFile = "" [, $sDefaultExt = "" [, $iFilterIndex = 1 [, $iFlags = 0 [, $iFlagsEx = 0 [, $hWndOwner = 0]]]]]]]]] ) Erzeugt ein "Oeffnen-Dialog-Fenster", welches dem Benutzer das Laufwerk, Verzeichnis und den Namen einer oder mehrerer zu speichernden Dateien bestimmen laesst (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_GetShellWindow (  ) Retrieves a handle to the Shell's desktop window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetStartupInfo (  ) Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetStdHandle ( $iStdHandle ) Ermittelt ein Handle fuer das Standard Eingabe-, Ausgabe- oder Fehlerausgabegeraet (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_GetStockObject ( $iObject ) Ermittelt ein Handle zu einem der vordefinierten Zeichenstifte, Fuellmuster, Schriften oder Paletten des Systems (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_GetStretchBltMode ( $hDC ) Retrieves the current stretching mode (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetString ( $pString [, $bUnicode = True] ) Returns a string located at the specified memory address (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_GetSysColor ( $iIndex ) Gibt die aktuelle Farbe des angegebenen Anzeigeelements zurueck (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetSysColorBrush ( $iIndex ) Ermittelt ein Handle welches einen logisches Fuellmuster identifiziert, das einem festgelegten Farbindex entspricht (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetSystemDefaultLangID (  ) Returns the language identifier for the system locale (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetSystemDefaultLCID (  ) Returns the locale identifier (LCID) for the system locale (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetSystemDefaultUILanguage (  ) Retrieves the language identifier for the system default UI language of the operating system (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetSystemDEPPolicy (  ) Gets the data execution prevention (DEP) policy setting for the system (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetSystemInfo (  ) Retrieves information about the current system (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetSystemMetrics ( $iIndex ) Ruft das angegebene Koordinatensystem oder die Konfigurationseinstellung auf (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetSystemPowerStatus (  ) Retrieves the power status of the system (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetSystemTimes (  ) Retrieves system timing information (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetSystemWow64Directory (  ) Retrieves the path of the system directory used by WOW64 (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetTabbedTextExtent ( $hDC, $sText [, $aTab = 0 [, $iStart = 0 [, $iEnd = -1]]] ) Computes the width and height of a character string which may contain one or more tab characters (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetTempFileName ( $sFilePath [, $sPrefix = ''] ) Erstellt einen Namen fuer eine temporaere Datei (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetTextAlign ( $hDC ) Retrieves the text-alignment setting for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetTextCharacterExtra ( $hDC ) Retrieves the current intercharacter spacing for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetTextColor ( $hDC ) Retrieves the current text color for the specified device context (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_GetTextExtentPoint32 ( $hDC, $sText ) Errechnet die Breite und Hoehe des festgelegten Textstring (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetTextFace ( $hDC ) Retrieves the typeface name of the font that is selected into the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetTextMetrics ( $hDC ) Erfasst grundlegende Informationen ueber die momentan ausgewaehlte Schriftart (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetThemeAppProperties (  ) Retrieves the property flags that control how visual styles are applied in the current application (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeBackgroundContentRect ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT ) Retrieves the size of the content area for the background defined by the visual style (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeBackgroundExtent ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT ) Calculates the size and location of the background, defined by the visual style, given the content area (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeBackgroundRegion ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT ) Computes the region for a regular or partially transparent background that is bounded by a specified rectangle (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeBitmap ( $hTheme, $iPartID, $iStateID, $iPropID [, $iFlag = 0x01] ) Retrieves the bitmap associated with a particular theme, part, state, and property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeBool ( $hTheme, $iPartID, $iStateID, $iPropID ) Retrieves the value of a BOOL property from the SysMetrics section of theme data (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeColor ( $hTheme, $iPartID, $iStateID, $iPropID ) Retrieves the value of a color property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeDocumentationProperty ( $sFilePath, $sProperty ) Retrieves the value for a theme property from the documentation section of the specified theme file (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeEnumValue ( $hTheme, $iPartID, $iStateID, $iPropID ) Retrieves the value of an enumerated type property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeFilename ( $hTheme, $iPartID, $iStateID, $iPropID ) Retrieves the value of a filename property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeFont ( $hTheme, $iPartID, $iStateID, $iPropID [, $hDC = 0] ) Retrieves the value of a font property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeInt ( $hTheme, $iPartID, $iStateID, $iPropID ) Retrieves the value of an INT property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeMargins ( $hTheme, $iPartID, $iStateID, $iPropID, $hDC, $tRECT ) Retrieves the value of a margins property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeMetric ( $hTheme, $iPartID, $iStateID, $iPropID [, $hDC = 0] ) Retrieves the value of a metric property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemePartSize ( $hTheme, $iPartID, $iStateID, $hDC, $tRECT, $iType ) Calculates the original size of the part defined by a visual style (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemePosition ( $hTheme, $iPartID, $iStateID, $iPropID ) Retrieves the value of a position property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemePropertyOrigin ( $hTheme, $iPartID, $iStateID, $iPropID ) Retrieves the location of the theme property definition for a property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeRect ( $hTheme, $iPartID, $iStateID, $iPropID ) Retrieves the value of a RECT property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeString ( $hTheme, $iPartID, $iStateID, $iPropID ) Retrieves the value of a string property (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysBool ( $hTheme, $iBoolID ) Retrieves the Boolean value of a system metric (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysColor ( $hTheme, $iColorID ) Retrieves the value of a system color (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysColorBrush ( $hTheme, $iColorID ) Retrieves a system color brush (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysFont ( $hTheme, $iFontID ) Retrieves the font information of a system font (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysInt ( $hTheme, $iIntID ) Retrieves the value of a system INT (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysSize ( $hTheme, $iSizeID ) Retrieves the value of a system size metric from theme data (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeSysString ( $hTheme, $iStringID ) Retrieves the value of a system string (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeTextExtent ( $hTheme, $iPartID, $iStateID, $hDC, $sText, $tRECT, $iFlags ) Calculates the size and location of the specified text when rendered in the visual style font (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeTextMetrics ( $hTheme, $iPartID, $iStateID [, $hDC = 0] ) Retrieves information about the font specified by a visual style for a particular part (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThemeTransitionDuration ( $hTheme, $iPartID, $iStateIDFrom, $iStateIDTo, $iPropID ) Gets the duration for the specified transition (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetThreadDesktop ( $iThreadId ) Retrieves a handle to the desktop assigned to the specified thread (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetThreadErrorMode (  ) Retrieves the error mode for the calling thread (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetThreadLocale (  ) Retrieves the locale identifier of the current locale for the calling thread (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetThreadUILanguage (  ) Retrieves the language identifier of the first user interface language for the current thread (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetTickCount (  ) Retrieves the number of milliseconds that have elapsed since the system was started (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetTickCount64 (  ) Retrieves the number of milliseconds that have elapsed since the system was started (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetTimeFormat ( [$iLCID = 0 [, $tSYSTEMTIME = 0 [, $iFlags = 0 [, $sFormat = '']]]] ) Formats time as a time string for a locale specified by identifier (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetTopWindow ( $hWnd ) Retrieves a handle to the child window at the top of the Z order (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetUDFColorMode (  ) Retrieves the current color mode for WinAPIEx UDF library (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetUpdateRect ( $hWnd [, $bErase = True] ) Retrieves the coordinates of the rectangle that completely encloses the update region of the specified window (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetUpdateRgn ( $hWnd, $hRgn [, $bErase = True] ) Retrieves the update region of a window by copying it into the specified region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetUserDefaultLangID (  ) Returns the language identifier for the current user locale (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetUserDefaultLCID (  ) Returns the locale identifier (LCID) for the user default locale (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetUserDefaultUILanguage (  ) Returns the language identifier for the user UI language for the current user (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetUserGeoID (  ) Retrieves information about the geographical location of the user (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_GetUserObjectInformation ( $hObject, $iIndex ) Retrieves information about the specified window station or desktop object (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetVersion (  ) Ermittelt die Version des aktuellen Betriebssystems (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetVersionEx (  ) Retrieves information about the current operating system (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetVolumeInformation ( [$sRoot = ''] ) Retrieves information about the file system and volume associated with the specified root directory (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetVolumeInformationByHandle ( $hFile ) Retrieves information about the file system and volume associated with the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetVolumeNameForVolumeMountPoint ( $sMountedPath ) Retrieves a volume GUID path for the volume that is associated with the specified volume mount point (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_GetWindow ( $hWnd, $iCmd ) Ermittelt das Handle eines Fensters, das ein bestimmtes Verhaeltnis (Z-Anordnung oder Besitzer) zu dem angegebenen Fenster hat (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetWindowDC ( $hWnd ) Holt einen Geraetekontext (DC) fuer das gesamte Fenster (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_GetWindowDisplayAffinity ( $hWnd ) Retrieves the current display affinity setting, from any process, for a given window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetWindowExt ( $hDC ) Retrieves the x-extent and y-extent of the window for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetWindowFileName ( $hWnd ) Retrieves the fully-qualified path of the module associated with the specified window handle (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_GetWindowHeight ( $hWnd ) Gibt die Hoehe des Fensters zurueck (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetWindowInfo ( $hWnd ) Ermittelt Informationen ueber das angegebene Fenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetWindowLong ( $hWnd, $iIndex ) Ermittelt Informationen ueber das angegebene Fenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetWindowOrg ( $hDC ) Retrieves the x-coordinates and y-coordinates of the window origin for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetWindowPlacement ( $hWnd ) Ermittelt die minimale, maximale und normale Position des Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetWindowRect ( $hWnd ) Ermittelt die Abmessungen des begrenzenden Rechtecks des festgelegten Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetWindowRgn ( $hWnd, $hRgn ) Bezieht eine Kopie der Fensteregion eines Fensters (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetWindowRgnBox ( $hWnd, ByRef $tRECT ) Retrieves the dimensions of the tightest bounding rectangle for the window region of a window (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass ) Retrieves the reference data for the specified window subclass callback (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_GetWindowText ( $hWnd ) Ermittelt den Text in der festgelegten Fenstertitelzeile (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetWindowTheme ( $hWnd ) Retrieves a theme handle to a window that has visual styles applied (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_GetWindowThreadProcessId ( $hWnd, ByRef $iPID ) Ermittelt die ID des Threads der in dem festgelegten Fenster erstellt wurde (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetWindowWidth ( $hWnd ) Gibt die Breite des Fensters zurueck (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_GetWorkArea (  ) Retrieves the size of the working area on the primary display monitor (benoetigt: #include <WinAPISys.au3>)
_WinAPI_GetWorldTransform ( $hDC ) Retrieves the current world-space to page-space transformation (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GetXYFromPoint ( ByRef $tPoint, ByRef $iX, ByRef $iY ) Gibt die X/Y Werte von einer $tagPOINT Struktur zurueck (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_GlobalMemoryStatus (  ) Ermittelt Informationen ueber den aktuell verfuegbaren Speicher (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_GradientFill ( $hDC, Const ByRef $aVertex [, $iStart = 0 [, $iEnd = -1 [, $bRotate = False]]] ) Fills rectangle or triangle gradient (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_GUIDFromString ( $sGUID ) Konvertiert den String einer GUID in die binaere Form (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_GUIDFromStringEx ( $sGUID, $tGUID ) Konvertiert den String einer GUID in die binaere Form (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_HashData ( $pMemory, $iSize [, $iLength = 32] ) Hashes a memory block (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_HashString ( $sString [, $bCaseSensitive = True [, $iLength = 32]] ) Hashes a string (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_HiByte ( $iValue ) Returns the high BYTE of a 16-bit (2 bytes) value (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_HideCaret ( $hWnd ) Removes the caret from the screen (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_HiDWord ( $iValue ) Returns the high DWORD of a 64-bit (8 bytes) value (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_HiWord ( $iLong ) Gibt das hoeherwertige Wort eines Longword-Werts zurueck (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_InflateRect ( ByRef $tRECT, $iDX, $iDY ) Increases or decreases the width and height of the specified rectangle (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_InitMUILanguage ( $iLanguage ) Enables an application to specify a language to be used with the common controls that is different from the system language (benoetigt: #include <WinAPISys.au3>)
_WinAPI_InProcess ( $hWnd, ByRef $hLastWnd ) Bestimmt ob ein Fenster zu dem aktuellen Prozess gehoert (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_IntersectClipRect ( $hDC, $tRECT ) Creates a new clipping region from the intersection of the current clipping region and the specified rectangle (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_IntersectRect ( $tRECT1, $tRECT2 ) Creates the intersection of two rectangles (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_IntToDWord ( $iValue ) Converts a value of type INT to a value of type DWORD (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_IntToFloat ( $iInt ) Gibt ein 4 Byte Integer als eine Gleitkommazahl zurueck (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_InvalidateRect ( $hWnd [, $tRECT = 0 [, $bErase = True]] ) Fuegt ein Rechteck der zu aktualisierenden Region eines Fensters hinzu (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_InvalidateRgn ( $hWnd [, $hRgn = 0 [, $bErase = True]] ) Adds a region to the specified window's update region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_InvertANDBitmap ( $hBitmap [, $bDelete = False] ) Inverts the specified AND bitmask bitmap by performing a logical NOT operation (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_InvertColor ( $iColor ) Invertiert (negativiert) die festgelegte Farbe. (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_InvertRect ( $hDC, $tRECT ) Inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_InvertRgn ( $hDC, $hRgn ) Inverts the colors in the specified region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_IOCTL ( $iDeviceType, $iFunction, $iMethod, $iAccess ) Create a unique system I/O control code (IOCTL) (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_IsAlphaBitmap ( $hBitmap ) Determines whether the specified bitmap has an alpha channel (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_IsBadCodePtr ( $pAddress ) Determines whether the calling process has read access to the memory at the specified address (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_IsBadReadPtr ( $pAddress, $iLength ) Verifies that the calling process has read access to the specified range of memory (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_IsBadStringPtr ( $pAddress, $iLength ) Verifies that the calling process has read access to the specified range of memory (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_IsBadWritePtr ( $pAddress, $iLength ) Verifies that the calling process has write access to the specified range of memory (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_IsChild ( $hWnd, $hWndParent ) Tests whether a window is a child window of a specified parent window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_IsClassName ( $hWnd, $sClassName ) Wrapper um den Klassennamen eines Fensters zu pruefen (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_IsDoorOpen ( $sDrive ) Prueft, ob ein CD (DVD) Fach geoeffnet ist (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_IsElevated (  ) Determines whether the current process is elevated (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_IsHungAppWindow ( $hWnd ) Determines whether the specified application is not responding (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_IsIconic ( $hWnd ) Determines whether the specified window is minimized (iconic) (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_IsInternetConnected (  ) Prueft, ob der aktuelle Benutzer mit dem Internet verbunden ist (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_IsLoadKBLayout ( $iLanguage ) Determines whether the specified input locale loaded into the system (benoetigt: #include <WinAPISys.au3>)
_WinAPI_IsMemory ( $pMemory ) Determines whether the specified pointer points to the memory block in the internal library heap (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_IsNameInExpression ( $sString, $sPattern [, $bCaseSensitive = False] ) Determines whether a string matches the specified pattern (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_IsNetworkAlive (  ) Determines whether or not a local system is connected to a network, and identifies the type of network connection (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_IsPathShared ( $sFilePath ) Determines whether the path is shared (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_IsProcessInJob ( $hProcess [, $hJob = 0] ) Determines whether the process is running in the specified job (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_IsProcessorFeaturePresent ( $iFeature ) Determines whether the specified processor feature is supported by the current computer (benoetigt: #include <WinAPISys.au3>)
_WinAPI_IsRectEmpty ( $tRECT ) Determines whether the specified rectangle is empty (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_IsThemeActive (  ) Tests if a visual style for the current application is active (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_IsThemeBackgroundPartiallyTransparent ( $hTheme, $iPartID, $iStateID ) Retrieves whether the background specified by the visual style has transparent pieces or alpha-blended pieces (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_IsThemePartDefined ( $hTheme, $iPartID ) Retrieves whether a visual style has defined parameters for the specified part (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_IsValidLocale ( $iLCID [, $iFlag = 0] ) Determines if the specified locale is installed or supported on the operating system (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_IsWindow ( $hWnd ) Ermittelt, ob das festgelegte Fensterhandle ein existierendes Fenster identifiziert (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_IsWindowEnabled ( $hWnd ) Bestimmt, ob das angegebene Fenster fuer Maus- und Tastatureingabe aktiviert ist (benoetigt: #include <WinAPISys.au3>)
_WinAPI_IsWindowUnicode ( $hWnd ) Determines whether the specified window is a native Unicode window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_IsWindowVisible ( $hWnd ) Ermittelt den Sichtbarkeitsstatus des angegebenen Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_IsWow64Process ( [$iPID = 0] ) Prueft, ob der angegebene Prozess unter WOW64 ausgefuehrt wird (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_IsWritable ( $sDrive ) Determines whether a disk is writable (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_IsZoomed ( $hWnd ) Determines whether a window is maximized (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_Keybd_Event ( $vKey, $iFlags [, $iScanCode = 0 [, $iExtraInfo = 0]] ) Synthesizes a keystroke (benoetigt: #include <WinAPISys.au3>)
_WinAPI_KillTimer ( $hWnd, $iTimerID ) Destroys the specified timer (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_LineDDA ( $iX1, $iY1, $iX2, $iY2, $pLineProc [, $pData = 0] ) Determines which pixels should be highlighted for a line (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_LineTo ( $hDC, $iX, $iY ) Zeichnet eine Linie von der aktuellen Position bis zum angegebenen Punkt, aber ohne den Punkt selbst (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_LoadBitmap ( $hInstance, $sBitmap ) Laedt die angegebene Bitmap-Ressource von einem Modul einer ausfuehrbaren Datei (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LoadCursor ( $hInstance, $sName ) Loads the specified cursor resource from the executable (.exe) file (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LoadCursorFromFile ( $sFilePath ) Creates a cursor based on data contained in a file (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LoadIcon ( $hInstance, $sName ) Loads the specified icon resource from the executable (.exe) file associated with an application instance (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_LoadIconMetric ( $hInstance, $sName, $iMetric ) Loads a specified icon resource with a client-specified system metric (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_LoadIconWithScaleDown ( $hInstance, $sName, $iWidth, $iHeight ) Loads an icon and scales down a larger image instead of scaling up a smaller image (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_LoadImage ( $hInstance, $sImage, $iType, $iXDesired, $iYDesired, $iLoad ) Laedt ein Icon, Cursor oder Bitmap (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LoadIndirectString ( $sStrIn ) Extracts the string from the specified resource when given an indirect string (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LoadKeyboardLayout ( $iLanguage [, $iFlag = 0] ) Loads a new input locale identifier into the system (benoetigt: #include <WinAPISys.au3>)
_WinAPI_LoadLibrary ( $sFileName ) Mapped ein bestimmtes ausfuehrbares Modul in den Adressraum des aufrufenden Prozesses (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LoadLibraryEx ( $sFileName [, $iFlags = 0] ) Mapped ein bestimmtes ausfuehrbares Modul in den Adressraum des aufrufenden Prozesses (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LoadMedia ( $sDrive ) Loads media into a device (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_LoadResource ( $hInstance, $hResource ) Loads the specified resource into global memory (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LoadShell32Icon ( $iIconID ) Extrahiert ein Icon aus der shell32.dll (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_LoadString ( $hInstance, $iStringId ) Laedt eine String Ressource von der ausfuehrbaren Datei die mit einem bestimmten Modul verknuepft ist (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LoadStringEx ( $hModule, $iID [, $iLanguage = $LOCALE_USER_DEFAULT] ) Loads a string resource for the specified language from the specified module (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LoByte ( $iValue ) Returns the low BYTE of a 16-bit (2 bytes) value (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_LocalFree ( $hMemory ) Gibt das festgelegte lokale Speicherobjekt frei und setzt dessen Handle ausser Kraft (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_LockDevice ( $sDrive, $bLock ) Enables or disables the mechanism that ejects media, for those devices possessing that locking capability (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_LockFile ( $hFile, $iOffset, $iLength ) Locks the specified file for exclusive access by the calling process (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_LockResource ( $hData ) Locks the specified resource in memory (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_LockWindowUpdate ( $hWnd ) Disables or enables drawing in the specified window (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_LockWorkStation (  ) Locks the workstation's display (benoetigt: #include <WinAPISys.au3>)
_WinAPI_LoDWord ( $iValue ) Returns the low DWORD of a 64-bit (8 bytes) value (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_LongMid ( $iValue, $iStart, $iCount ) Extracts a number of bits from a DWORD (32-bit) value (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_LookupIconIdFromDirectoryEx ( $pData [, $bIcon = True [, $iXDesiredPixels = 0 [, $iYDesiredPixels = 0 [, $iFlags = 0]]]] ) Searches through icon or cursor data for the icon or cursor that best fits the current display device (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_LoWord ( $iLong ) Gibt das niederwertige Wort eines Longword-Wertes zurueck (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_LPtoDP ( $hDC, ByRef $tPOINT [, $iCount = 1] ) Converts a logical coordinates into device coordinates (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_MAKELANGID ( $iLngIDPrimary, $iLngIDSub ) Erstellt eine Sprach-ID von einer Primaer-Sprach-ID und einer Sub-Sprach-ID (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_MAKELCID ( $iLngID, $iSortID ) Erstellt eine Lokal-ID von einer Sprach-ID und eine Sort-ID (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_MakeLong ( $iLo, $iHi ) Gibt einen long int Wert von zwei int Werten zurueck (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_MakeQWord ( $iLoDWORD, $iHiDWORD ) Gibt einen QWORD Wert aus zwei int Werten zurueck (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_MakeWord ( $iLo, $iHi ) Returns a WORD (16-bit) value from two BYTE (8-bit) values (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_MapViewOfFile ( $hMapping [, $iOffset = 0 [, $iBytes = 0 [, $iAccess = 0x0006]]] ) Maps a view of a file mapping into the address space of a calling process (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_MapVirtualKey ( $iCode, $iType [, $hLocale = 0] ) Translates a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code (benoetigt: #include <WinAPISys.au3>)
_WinAPI_MaskBlt ( $hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $hMask, $iXMask, $iYMask, $iRop ) Combines the color data for the source and destination bitmaps using the specified mask and raster operation (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_MessageBeep ( [$iType = 1] ) Spielt eine WAV-Datei ab (benoetigt: #include <WinAPIError.au3>)
_WinAPI_MessageBoxCheck ( $iType, $sTitle, $sText, $sRegVal [, $iDefault = -1 [, $hParent = 0]] ) Displays a message box that gives the user the option of suppressing further occurrences (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_MessageBoxIndirect ( $tMSGBOXPARAMS ) Creates, displays, and operates a message box (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_MirrorIcon ( $hIcon [, $bDelete = False] ) Reverses (mirrors) icons so that they are displayed correctly on a mirrored device context (benoetigt: #include <WinAPIIcons.au3>)
_WinAPI_ModifyWorldTransform ( $hDC, $tXFORM, $iMode ) Changes the world transformation for a device context using the specified mode (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_MonitorFromPoint ( $tPOINT [, $iFlag = 1] ) Ermittelt ein Handle zu der Monitornummer welcher den festgelegten Punkt enthaelt (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_MonitorFromRect ( $tRECT [, $iFlag = 1] ) Ermittelt ein Handle zu der Monitornummer welcher den groessten Anteil eines festgelegten Rechtecks enthaelt (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_MonitorFromWindow ( $hWnd [, $iFlag = 1] ) Ermittelt ein Handle zu der Monitornummer welcher den groessten Anteil eines festgelegten Fensters enthaelt (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_Mouse_Event ( $iFlags [, $iX = 0 [, $iY = 0 [, $iData = 0 [, $iExtraInfo = 0]]]] ) Synthetisiert Mausklicks und -bewegungen (benoetigt: #include <WinAPISys.au3>)
_WinAPI_MoveFileEx ( $sExistingFile, $sNewFile [, $iFlags = 0 [, $pProgressProc = 0 [, $pData = 0]]] ) Moves a file or directory, notifying the application of its progress through a callback function (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_MoveMemory ( $pDestination, $pSource, $iLength ) Moves a block of memory from one location to another (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_MoveTo ( $hDC, $iX, $iY ) Veraendert die aktuelle Position auf den angegebenen Punkt (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_MoveToEx ( $hDC, $iX, $iY ) Updates the current position to the specified point (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_MoveWindow ( $hWnd, $iX, $iY, $iWidth, $iHeight [, $bRepaint = True] ) Aendert die Position und Groesse des angegebenen Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_MsgBox ( $iFlags, $sTitle, $sText ) Zeigt ein Nachrichtenfenster mit groesseren Raendern als das Original an (benoetigt: #include <WinAPIError.au3>)
_WinAPI_MulDiv ( $iNumber, $iNumerator, $iDenominator ) Multipliziert zwei 32-bit Werte und teilt dann das 64-bit Ergebnis durch einen dritten 32-bit Wert (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_MultiByteToWideChar ( $vText [, $iCodePage = 0 [, $iFlags = 0 [, $bRetString = False]]] ) Wandelt einen ANSI-String in einen Unicode-String um (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_MultiByteToWideCharEx ( $sText, $pText [, $iCodePage = 0 [, $iFlags = 0]] ) Wandelt einen ANSI-String in einen Unicode-String um (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_NtStatusToDosError ( $iStatus ) Converts the specified NTSTATUS error code to its equivalent system error code (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_OemToChar ( $sStr ) Converts a string from the OEM-defined character set into either an ANSI string (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_OffsetClipRgn ( $hDC, $iXOffset, $iYOffset ) Moves the clipping region of a device context by the specified offsets (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_OffsetPoints ( ByRef $aPoint, $iXOffset, $iYOffset [, $iStart = 0 [, $iEnd = -1]] ) Moves a points from the array by the specified offsets (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_OffsetRect ( ByRef $tRECT, $iDX, $iDY ) Moves the specified rectangle by the specified offsets (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_OffsetRgn ( $hRgn, $iXOffset, $iYOffset ) Moves a region by the specified offsets (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_OffsetWindowOrg ( $hDC, $iXOffset, $iYOffset ) Modifies the window origin for a device context using the specified horizontal and vertical offsets (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_OpenDesktop ( $sName [, $iAccess = 0 [, $iFlags = 0 [, $bInherit = False]]] ) Opens the specified desktop object (benoetigt: #include <WinAPISys.au3>)
_WinAPI_OpenFileById ( $hFile, $vID [, $iAccess = 0 [, $iShare = 0 [, $iFlags = 0]]] ) Opens the file that matches the specified object identifier (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_OpenFileDlg ( [$sTitle = '' [, $sInitDir = '' [, $sFilters = '' [, $iDefaultFilter = 0 [, $sDefaultFilePath = '' [, $sDefaultExt = '' [, $iFlags = 0 [, $iFlagsEx = 0 [, $pOFNProc = 0 [, $pData = 0 [, $hParent = 0]]]]]]]]]]] ) Creates a dialog box that lets the user specify the drive, directory, and the name of a file or set of files to be opened (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_OpenFileMapping ( $sName [, $iAccess = 0x0006 [, $bInherit = False]] ) Opens a named file mapping object (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_OpenIcon ( $hWnd ) Restores a minimized (iconic) window to its previous size and position and activates the window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_OpenInputDesktop ( [$iAccess = 0 [, $iFlags = 0 [, $bInherit = False]]] ) Opens the desktop that receives user input (benoetigt: #include <WinAPISys.au3>)
_WinAPI_OpenJobObject ( $sName [, $iAccess = $JOB_OBJECT_ALL_ACCESS [, $bInherit = False]] ) Opens an existing job object (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_OpenMutex ( $sMutex [, $iAccess = $MUTEX_ALL_ACCESS [, $bInherit = False]] ) Opens an existing named mutex object (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_OpenProcess ( $iAccess, $bInherit, $iPID [, $bDebugPriv = False] ) Gibt ein Handle eines existierenden Prozessobjekts zurueck (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_OpenProcessToken ( $iAccess [, $hProcess = 0] ) Opens the access token associated with a process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_OpenSemaphore ( $sSemaphore [, $iAccess = 0x001F0003 [, $bInherit = False]] ) Opens an existing named semaphore object (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_OpenThemeData ( $hWnd, $sClass ) Opens the theme data for a window and its associated class (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_OpenWindowStation ( $sName [, $iAccess = 0 [, $bInherit = False]] ) Opens the specified window station (benoetigt: #include <WinAPISys.au3>)
_WinAPI_PageSetupDlg ( ByRef $tPAGESETUPDLG ) Creates a Page Setup dialog box that enables the user to specify the attributes of a printed page (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_PaintDesktop ( $hDC ) Fills the clipping region in the specified device context with the desktop pattern or wallpaper (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PaintRgn ( $hDC, $hRgn ) Paints the specified region by using the brush currently selected into the device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ParseURL ( $sUrl ) Performs rudimentary parsing of a URL (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_ParseUserName ( $sUser ) Extracts the domain and user account name from a fully qualified user name (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PatBlt ( $hDC, $iX, $iY, $iWidth, $iHeight, $iRop ) Paints the specified rectangle using the brush that is currently selected into the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PathAddBackslash ( $sFilePath ) Fuegt einen Backslash am Ende eines Strings hinzu, um die korrekte Syntax fuer einen Pfad zu erstellen (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathAddExtension ( $sFilePath [, $sExt = ''] ) Fuegt einem Pfad eine Dateinamenerweiterung hinzu (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathAppend ( $sFilePath, $sMore ) Appends one path to the end of another (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathBuildRoot ( $iDrive ) Erstellt den Stammpfad fuer eine gegebene Laufwerksnummer (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathCanonicalize ( $sFilePath ) Removes elements of a file path according to special strings inserted into that path (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathCommonPrefix ( $sPath1, $sPath2 ) Compares two paths to determine if they share a common prefix (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathCompactPath ( $hWnd, $sFilePath [, $iWidth = 0] ) Truncates a file path to fit within a given pixel width by replacing path components with ellipses (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathCompactPathEx ( $sFilePath, $iMax ) Truncates a path to fit within a certain number of characters by replacing path components with ellipses (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathCreateFromUrl ( $sUrl ) Converts a file URL to a Microsoft MS-DOS path (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathFindExtension ( $sFilePath ) Ermittelt in einem Pfad die Erweiterung (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathFindFileName ( $sFilePath ) Sucht in einem Pfad nach einem Dateinamen (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathFindNextComponent ( $sFilePath ) Parses a path and returns the portion of that path that follows the first backslash (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathFindOnPath ( $sFilePath [, $aExtraPaths = "" [, $sPathDelimiter = @LF]] ) Sucht eine Datei in den Standard-Systempfaden (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathGetArgs ( $sFilePath ) Findet die Befehlszeilenargumente innerhalb eines gegebenen Pfades (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathGetCharType ( $sChar ) Determines the type of character in relation to a path (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathGetDriveNumber ( $sFilePath ) Durchsucht einen Pfad nach einem Laufwerksbuchstaben im Bereich von 'A' bis 'Z' und gibt den entsprechenden Laufwerksbuchstaben zurueck (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsContentType ( $sFilePath, $sType ) Determines if a file's registered content type matches the specified content type (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsDirectory ( $sFilePath ) Ueberprueft, ob ein Pfad ein gueltiges Verzeichnis ist (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_PathIsDirectoryEmpty ( $sFilePath ) Prueft, ob ein angegebener Pfad ein leeres Verzeichnis ist (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_PathIsExe ( $sFilePath ) Prueft anhand der Dateierweiterung, ob eine Datei ausfuehrbar ist (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsFileSpec ( $sFilePath ) Durchsucht einen Pfad nach Pfadtrennzeichen (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsLFNFileSpec ( $sFilePath ) Determines whether a file name is in long format (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsRelative ( $sFilePath ) Durchsucht einen Pfad und ermittelt, ob es sich um einen relativen Pfad handelt (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsRoot ( $sFilePath ) Analysiert einen Pfad, um festzustellen, ob es sich um das Stammverzeichnis handelt (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsSameRoot ( $sPath1, $sPath2 ) Vergleicht zwei Pfade, um festzustellen, ob sie das gleiche Stammverzeichnis haben (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsSystemFolder ( $sFilePath ) Bestimmt, ob ein existierender Ordner die Attribute eines Systemordners erhaelt (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsUNC ( $sFilePath ) Determines if the string is a valid Universal Naming Convention (UNC) for a server and share path (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsUNCServer ( $sFilePath ) Determines if a string is a valid Universal Naming Convention (UNC) for a server path only (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathIsUNCServerShare ( $sFilePath ) Determines if a string is a valid Universal Naming Convention (UNC) share path (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathMakeSystemFolder ( $sFilePath ) Weist einem existierenden Ordner die Attribute zu, so dass dieser ein Systemordner wird (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathMatchSpec ( $sFilePath, $sSpec ) Searches a string using a Microsoft MS-DOS wild card match type (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathParseIconLocation ( $sFilePath ) Trennt einen String in dessen Pfad und Symbolindex auf (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathRelativePathTo ( $sPathFrom, $bDirFrom, $sPathTo, $bDirTo ) Creates a relative path from one file or folder to another (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathRemoveArgs ( $sFilePath ) Entfernt alle Argumente aus einem Pfad (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathRemoveBackslash ( $sFilePath ) Entfernt den abschliessenden Backslash von einem Pfad (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathRemoveExtension ( $sFilePath ) Entfernt die Dateiendung einer Datei von einem Pfad, falls eine existiert (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathRemoveFileSpec ( $sFilePath ) Entfernt den Dateinamen und den abschliessenden Backslash von einem Pfad, falls diese existieren (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathRenameExtension ( $sFilePath, $sExt ) Ersetzt die Endung einer Datei mit einer neuen Endung (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathSearchAndQualify ( $sFilePath [, $bExists = False] ) Formatiert einen Pfad in die korrekte Schreibweise (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathSkipRoot ( $sFilePath ) Gibt einen Pfad ohne den Laufwerksbuchstaben oder UNC-Server / Freigabe zurueck (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathStripPath ( $sFilePath ) Entfernt den Pfadabschnitt eines vollstaendigen Pfads und einer Datei (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathStripToRoot ( $sFilePath ) Entfernt in einem Pfad alles ausser dem Laufwerksbuchstaben (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathToRegion ( $hDC ) Creates a region from the path that is selected into the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PathUndecorate ( $sFilePath ) Entfernt die Aufzaehlungen auf einem Pfad (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathUnExpandEnvStrings ( $sFilePath ) Replaces folder names in a fully-qualified path with their associated environment string (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathUnmakeSystemFolder ( $sFilePath ) Entfernt die Attribute von einem Ordner, welche ihn zu einem Systemordner gemacht haben (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathUnquoteSpaces ( $sFilePath ) Entfernt die Anfuehrungszeichen am Anfang und Ende eines Pfades (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PathYetAnotherMakeUniqueName ( $sFilePath ) Erstellt einen eindeutigen Dateinamen basierend auf einem existierenden Dateinamen (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_PickIconDlg ( [$sIcon = '' [, $iIndex = 0 [, $hParent = 0]]] ) Displays a dialog box that allows the user to choose an icon (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_PlayEnhMetaFile ( $hDC, $hEmf, $tRECT ) Displays the picture stored in the specified enhanced-format metafile (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PlaySound ( $sSound [, $iFlags = $SND_SYSTEM_NOSTOP [, $hInstance = 0]] ) Plays a sound specified by the given file name, resource, or system event (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_PlgBlt ( $hDestDC, Const ByRef $aPoint, $hSrcDC, $iXSrc, $iYSrc, $iWidth, $iHeight [, $hMask = 0 [, $iXMask = 0 [, $iYMask = 0]]] ) Performs a bit-block transfer of color data from the specified rectangle in the source DC to the specified parallelogram in the DC context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PointFromRect ( ByRef $tRECT [, $bCenter = True] ) Gibt die obere und linken Koordinate einer $tagRECT Struktur als eine $tagPOINT Struktur zurueck (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_PolyBezier ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] ) Draws one or more Bezier curves (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PolyBezierTo ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] ) Draws one or more Bezier curves (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PolyDraw ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] ) Draws a set of line segments and Bezier curves (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_Polygon ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] ) Draws a polygon consisting of two or more vertices connected by straight lines (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PostMessage ( $hWnd, $iMsg, $wParam, $lParam ) Platziert eine Nachricht in die Nachrichten-Warteschlange und kehrt umgehend zurueck (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_PrimaryLangId ( $iLngID ) Extrahiert die primaere Sprach-ID von einer Sprach-ID (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_PrintDlg ( ByRef $tPRINTDLG ) Displays a Print dialog box (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_PrintDlgEx ( ByRef $tPRINTDLGEX ) Displays a Print property sheet that enables the user to specify the properties of a particular print job (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_PrintWindow ( $hWnd, $hDC [, $bClient = False] ) Copies a visual window into the specified device context (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_ProgIDFromCLSID ( $sCLSID ) Ruft die ProgID fuer eine bestimmte CLSID ab (benoetigt: #include <WinAPICom.au3>)
_WinAPI_PtInRect ( ByRef $tRect, ByRef $tPoint ) Ermittelt, ob der festgelegte Punkt innerhalb des festgelegten Rechtecks liegt (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PtInRectEx ( $iX, $iY, $iLeft, $iTop, $iRight, $iBottom ) Determines whether the specified point lies within the specified rectangle (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PtInRegion ( $hRgn, $iX, $iY ) Determines whether the specified point is inside the specified region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_PtVisible ( $hDC, $iX, $iY ) Determines whether the specified point is within the clipping region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_QueryDosDevice ( $sDevice ) Retrieves the current mapping for a particular MS-DOS device name (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_QueryInformationJobObject ( $hJob, $iJobObjectInfoClass, ByRef $tJobObjectInfo ) Retrieves limit and job state information from the job object (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_QueryPerformanceCounter (  ) Retrieves the current value of the high-resolution performance counter (benoetigt: #include <WinAPISys.au3>)
_WinAPI_QueryPerformanceFrequency (  ) Retrieves the frequency of the high-resolution performance counter (benoetigt: #include <WinAPISys.au3>)
_WinAPI_RadialGradientFill ( $hDC, $iX, $iY, $iRadius, $iRGB1, $iRGB2 [, $fAngleStart = 0 [, $fAngleEnd = 360 [, $fStep = 5]]] ) Fills radial gradient (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ReadDirectoryChanges ( $hDirectory, $iFilter, $pBuffer, $iLength [, $bSubtree = 0] ) Retrieves information that describes the changes within the specified directory (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_ReadFile ( $hFile, $pBuffer, $iToRead, ByRef $iRead [, $tOverlapped = 0] ) Liest Daten von einer Datei (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_ReadProcessMemory ( $hProcess, $pBaseAddress, $pBuffer, $iSize, ByRef $iRead ) Liest den Speicher in einem bestimmten Prozess (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_Rectangle ( $hDC, $tRECT ) Draws a rectangle (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_RectInRegion ( $hRgn, $tRECT ) Determines whether any part of the specified rectangle is within the boundaries of a region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_RectIsEmpty ( ByRef $tRect ) Ermittelt, ob ein Rechteck leer ist (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_RectVisible ( $hDC, $tRECT ) Determines whether any part of the specified rectangle lies within the clipping region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_RedrawWindow ( $hWnd [, $tRECT = 0 [, $hRegion = 0 [, $iFlags = 5]]] ) Aktualisiert das angegebene Rechteck oder Region im Anwendungsbereich eines Fensters (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_RegCloseKey ( $hKey [, $bFlush = False] ) Closes a handle to the specified registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegConnectRegistry ( $sComputer, $hKey ) Establishes a connection to a predefined registry key on another computer (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegCopyTree ( $hSrcKey, $sSrcSubKey, $hDestKey ) Recursively copies the subkeys and values of the source subkey to the destination key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegCopyTreeEx ( $hSrcKey, $sSrcSubKey, $hDestKey ) Copies the specified registry key, along with its values and subkeys, to the specified destination key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegCreateKey ( $hKey [, $sSubKey = '' [, $iAccess = $KEY_ALL_ACCESS [, $iOptions = 0 [, $tSecurity = 0]]]] ) Creates the specified registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteEmptyKey ( $hKey [, $sSubKey = ''] ) Deletes an empty key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteKey ( $hKey [, $sSubKey = ''] ) Deletes a subkey and its values (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteKeyValue ( $hKey, $sSubKey, $sValueName ) Removes the specified value from the specified registry key and subkey (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteTree ( $hKey [, $sSubKey = ''] ) Deletes a subkey and all its descendants (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteTreeEx ( $hKey [, $sSubKey = 0] ) Deletes the subkeys and values of the specified key recursively (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegDeleteValue ( $hKey, $sValueName ) Removes a named value from the specified registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegDisableReflectionKey ( $hKey ) Disables registry reflection for the specified key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegDuplicateHKey ( $hKey ) Duplicates a registry key's handle (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegEnableReflectionKey ( $hKey ) Restores registry reflection for the specified disabled key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegEnumKey ( $hKey, $iIndex ) Enumerates the subkeys of the specified open registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegEnumValue ( $hKey, $iIndex ) Enumerates the values for the specified open registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegFlushKey ( $hKey ) Writes all the attributes of the specified open registry key into the registry (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegisterApplicationRestart ( [$iFlags = 0 [, $sCmd = '']] ) Registers the active instance of an application for restart (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_RegisterClass ( $tWNDCLASS ) Registers a window class (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_RegisterClassEx ( $tWNDCLASSEX ) Registers a window class (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_RegisterHotKey ( $hWnd, $iID, $iModifiers, $vKey ) Defines a system-wide hot key (benoetigt: #include <WinAPISys.au3>)
_WinAPI_RegisterPowerSettingNotification ( $hWnd, $sGUID ) Registers the application to receive power setting notifications for the specific power setting event (benoetigt: #include <WinAPISys.au3>)
_WinAPI_RegisterRawInputDevices ( $paDevice [, $iCount = 1] ) Registers the devices that supply the raw input data (benoetigt: #include <WinAPISys.au3>)
_WinAPI_RegisterShellHookWindow ( $hWnd ) Registers a specified Shell window to receive certain messages for events or notifications (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_RegisterWindowMessage ( $sMessage ) Definiert eine neue Fensternachricht, welche garantiert einzigartig im System ist (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_RegLoadMUIString ( $hKey, $sValueName [, $sDirectory = ''] ) Loads the specified string from the specified key and subkey (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegNotifyChangeKeyValue ( $hKey, $iFilter [, $bSubtree = False [, $bAsync = False [, $hEvent = 0]]] ) Notifies the caller about changes to the attributes or contents of a specified registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegOpenKey ( $hKey [, $sSubKey = '' [, $iAccess = 0x000F003F]] ) Opens the specified registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegQueryInfoKey ( $hKey ) Retrieves information about the specified registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegQueryLastWriteTime ( $hKey ) Retrieves information about the last write time to the specified registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegQueryMultipleValues ( $hKey, ByRef $aValent, ByRef $pBuffer [, $iStart = 0 [, $iEnd = -1]] ) Retrieves the type and data for a list of value names associated with an open registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegQueryReflectionKey ( $hKey ) Determines whether reflection has been disabled or enabled for the specified key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegQueryValue ( $hKey, $sValueName, ByRef $tValueData ) Retrieves the type and data for the specified value name associated with an open registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegRestoreKey ( $hKey, $sFilePath ) Reads the registry information in a specified file and copies it over the specified key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegSaveKey ( $hKey, $sFilePath [, $bReplace = False [, $tSecurity = 0]] ) Saves the specified key and all of its subkeys and values to a new file, in the standard format (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_RegSetValue ( $hKey, $sValueName, $iType, $tValueData, $iBytes ) Sets the data and type of a specified value under a registry key (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_ReleaseCapture (  ) Gibt den Einfang der Maus von Fenster im derzeitigen Thread wieder frei und stellt die normale Verarbeitung von Mauseingaben wieder her (benoetigt: #include <WinAPISys.au3>)
_WinAPI_ReleaseDC ( $hWnd, $hDC ) Gibt einen Geraetekontext wieder frei (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_ReleaseMutex ( $hMutex ) Releases ownership of the specified mutex object (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_ReleaseSemaphore ( $hSemaphore [, $iIncrease = 1] ) Increases the count of the specified semaphore object by a specified amount (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_ReleaseStream ( $pStream ) Gibt ein Stream-Objekt frei (benoetigt: #include <WinAPICom.au3>)
_WinAPI_RemoveClipboardFormatListener ( $hWnd ) Removes the given window from the system-maintained clipboard format listener list (benoetigt: #include <WinAPISys.au3>)
_WinAPI_RemoveDirectory ( $sDirPath ) Loescht ein existierendes leeres Verzeichnis (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_RemoveFontMemResourceEx ( $hFont ) Removes the fonts added from a memory image (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_RemoveFontResourceEx ( $sFont [, $iFlag = 0 [, $bNotify = False]] ) Removes the fonts in the specified file from the system font table (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_RemoveWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass ) Removes a subclass callback from a window (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ReOpenFile ( $hFile, $iAccess, $iShare [, $iFlags = 0] ) Reopens the specified file system object with different access rights, sharing mode, and flags (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_ReplaceFile ( $sReplacedFile, $sReplacementFile [, $sBackupFile = '' [, $iFlags = 0]] ) Replaces one file with another file, and creates a backup copy of the original file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_ReplaceTextDlg ( $hOwner [, $sFindWhat = '' [, $sReplaceWith = '' [, $iFlags = 0 [, $pReplaceProc = 0 [, $lParam = 0]]]]] ) Creates a system-defined modeless dialog box that lets the user specify a string to search for and a replacement string (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_ResetEvent ( $hEvent ) Sets the specified event object to the nonsignaled state (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_RestartDlg ( [$sText = '' [, $iFlags = 2 [, $hParent = 0]]] ) Displays a dialog box that prompts the user to restart Microsoft Windows (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_RestoreDC ( $hDC, $iID ) Restores a device context (DC) to the specified state (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_RGB ( $iRed, $iGreen, $iBlue ) Creates a RGB color value based on red, green, and blue components (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_RotatePoints ( ByRef $aPoint, $iXC, $iYC, $fAngle [, $iStart = 0 [, $iEnd = -1]] ) Rotates a points from the array by the specified angle (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_RoundRect ( $hDC, $tRECT, $iWidth, $iHeight ) Draws a rectangle with rounded corners (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SaveDC ( $hDC ) Saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes to a context stack (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_SaveFileDlg ( [$sTitle = "" [, $sInitDir = "" [, $sFilters = "" [, $iDefaultFilter = 0 [, $sDefaultFilePath = "" [, $sDefaultExt = "" [, $iFlags = 0 [, $iFlagsEx = 0 [, $pOFNProc = 0 [, $pData = 0 [, $hParent = 0]]]]]]]]]]] ) Creates a dialog box that lets the user specify the drive, directory, and name of a file to save (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_SaveHBITMAPToFile ( $sFilePath, $hBitmap [, $iXPelsPerMeter = Default [, $iYPelsPerMeter = Default]] ) Saves a specified bitmap to the specified bitmap (.bmp) file (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SaveHICONToFile ( $sFilePath, Const ByRef $vIcon [, $bCompress = 0 [, $iStart = 0 [, $iEnd = -1]]] ) Saves a specified single or multiple icon (HICON) to the specified icon (.ico) file (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ScaleWindowExt ( $hDC, $iXNum, $iXDenom, $iYNum, $iYDenom ) Modifies the window for a device context using the ratios formed by the specified multiplicands and divisors (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ScreenToClient ( $hWnd, ByRef $tPoint ) Konvertiert die Bildschirmkoordinaten eines bestimmten Punktes auf dem Bildschirm zu den Koordinaten des Anwendungsbereichs eines Fensters (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_SearchPath ( $sFilePath [, $sSearchPath = ''] ) Searches for a specified file in a specified path (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SelectClipPath ( $hDC [, $iMode = 5] ) Selects the current path as a clipping region, combining the new region with any existing clipping region (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SelectClipRgn ( $hDC, $hRgn ) Selects a region as the current clipping region for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SelectObject ( $hDC, $hGDIObj ) Waehlt ein Objekt in dem festgelegten Geraetekontext aus (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_SendMessageTimeout ( $hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iTimeout = 1000 [, $iFlags = 0]]]] ) Sends the specified message to one of more windows (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetActiveWindow ( $hWnd ) Activates the specified window (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetArcDirection ( $hDC, $iDirection ) Sets the drawing arc direction (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetBitmapBits ( $hBitmap, $iSize, $pBits ) Sets the bits of color data for a bitmap to the specified values (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetBitmapDimensionEx ( $hBitmap, $iWidth, $iHeight ) Assigns preferred dimensions to a compatible bitmap (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetBkColor ( $hDC, $iColor ) Setzt die aktuelle Hintergrundfarbe auf den festgelegten Farbwert (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_SetBkMode ( $hDC, $iBkMode ) Setzt den Hintergrund-Mischmodus fuer den angegebenen Geraetekontext (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_SetBoundsRect ( $hDC, $iFlags [, $tRECT = 0] ) Controls the accumulation of bounding rectangle information for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetBrushOrg ( $hDC, $iX, $iY ) Sets the brush origin that GDI assigns to the next brush an application selects into the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetCapture ( $hWnd ) Setzt den Mausfang zu dem angegebenen Fenster, welches zum gegenwaertigen Thread gehoert (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetCaretBlinkTime ( $iDuration ) Sets the caret blink time (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_SetCaretPos ( $iX, $iY ) Moves the caret to the specified coordinates (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_SetClassLongEx ( $hWnd, $iIndex, $iNewLong ) Replaces the specified value into the specified window belongs (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetColorAdjustment ( $hDC, $tAdjustment ) Sets the color adjustment for a device context (DC) (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetCompression ( $sFilePath, $iCompression ) Sets the compression state of a file or directory (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetCurrentDirectory ( $sDir ) Changes the current directory for the current process (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetCurrentProcessExplicitAppUserModelID ( $sAppID ) Specifies a unique application-defined Application User Model ID that identifies the current process to the taskbar (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_SetCursor ( $hCursor ) Setzt eine Cursorform (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_SetDCBrushColor ( $hDC, $iRGB ) Sets the current device context (DC) brush color to the specified color value (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetDCPenColor ( $hDC, $iRGB ) Sets the current device context (DC) pen color to the specified color value (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetDefaultPrinter ( $sPrinter ) Setzt den Standarddrucker fuer den aktuellen Benutzer auf dem lokalen Computer (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetDeviceGammaRamp ( $hDC, Const ByRef $aRamp ) Sets the gamma ramp on direct color display boards that support downloadable gamma ramps in hardware (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetDIBColorTable ( $hBitmap, $tColorTable, $iColorCount ) Sets RGB color table in the DIB section bitmap (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetDIBits ( $hDC, $hBitmap, $iStartScan, $iScanLines, $pBits, $tBMI [, $iColorUse = 0] ) Setzt die Pixel in einer kompatiblen Bitmap mit den Farbdaten aus einer DIB (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetDIBitsToDevice ( $hDC, $iXDest, $iYDest, $iWidth, $iHeight, $iXSrc, $iYSrc, $iStartScan, $iScanLines, $tBITMAPINFO, $iUsage, $pBits ) Sets the pixels in the specified rectangle on the device (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetDllDirectory ( [$sDirPath = Default] ) Adds a directory to the search path used to locate DLLs for the application (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetEndOfFile ( $hFile ) Setzt die physische Dateigroesse der angegebenen Datei auf die aktuelle Position des Dateizeigers (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetEnhMetaFileBits ( $pData, $iLength ) Creates a memory-based enhanced-format metafile from the specified data (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetErrorMode ( $iMode ) Controls whether the system will handle the specified types of serious errors or whether the process will handle them (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_SetEvent ( $hEvent ) Setzt das angegebene Ereignisobjekt in den signalisierten Status (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_SetFileAttributes ( $sFilePath, $iAttributes ) Sets the attributes for a file or directory (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetFileInformationByHandleEx ( $hFile, $tFILEINFO ) Sets the file information for the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetFilePointer ( $hFile, $iPos [, $iMethod = 0] ) Verschiebt den Dateizeiger der angegebenen Datei (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetFilePointerEx ( $hFile, $iPos [, $iMethod = 0] ) Moves the file pointer of the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetFileShortName ( $hFile, $sShortName ) Sets the short name for the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetFileValidData ( $hFile, $iLength ) Sets the valid data length of the specified file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetFocus ( $hWnd ) Setzt den Fokus der Tastatur auf das angegebenen Fenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetFont ( $hWnd, $hFont [, $bRedraw = True] ) Setzt einen Schrift-Typ fuer ein Fenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetForegroundWindow ( $hWnd ) Puts the specified window into the foreground and activates its (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetFRBuffer ( $iChars ) Sets the size of the internal buffer that used the _WinAPI_FindTextDlg() and _WinAPI_ReplaceTextDlg() functions (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_SetGraphicsMode ( $hDC, $iMode ) Sets the graphics mode for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetHandleInformation ( $hObject, $iMask, $iFlags ) Setzt bestimmte Eigenschaften eines Objekthandles (benoetigt: #include <WinAPIHObj.au3>)
_WinAPI_SetInformationJobObject ( $hJob, $iJobObjectInfoClass, $tJobObjectInfo ) Sets limits for a job object (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_SetKeyboardLayout ( $hWnd, $iLanguage [, $iFlags = 0] ) Sets an input locale identifier to the specified window (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetKeyboardState ( $tState ) Copies a 256-byte array of keyboard key states into the calling process's keyboard input-state table (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetLastError ( $iErrorCode ) Setzt den letzten Fehlercode fuer den aufgerufenen Thread (benoetigt: #include <WinAPIError.au3>)
_WinAPI_SetLayeredWindowAttributes ( $hWnd, $iTransColor [, $iTransGUI = 255 [, $iFlags = 0x03 [, $bColorRef = False]]] ) Setzt die Attribute fuer ein mehrschichtiges Fenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetLocaleInfo ( $iLCID, $iType, $sData ) Sets an item of information in the user override portion of the current locale (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_SetMapMode ( $hDC, $iMode ) Sets the mapping mode of the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetMessageExtraInfo ( $lParam ) Sets the extra message information for the current thread (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetParent ( $hWndChild, $hWndParent ) Aendert das Parent-Fenster des angegebenen Child-Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetPixel ( $hDC, $iX, $iY, $iRGB ) Sets the pixel at the specified coordinates to the specified color (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetPolyFillMode ( $hDC [, $iMode = 1] ) Sets the polygon fill mode for functions that fill polygons (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetPriorityClass ( $iPriority [, $iPID = 0] ) Sets the priority class for the specified process (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_SetProcessAffinityMask ( $hProcess, $iMask ) Setzt eine "Process Affinity Mask" fuer die Threads eines bestimmten Prozesses (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_SetProcessShutdownParameters ( $iLevel [, $bDialog = False] ) Sets a shutdown order for a process relative to the other processes in the system (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetProcessWindowStation ( $hStation ) Assigns the specified window station to the calling process (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetRectRgn ( $hRgn, $tRECT ) Converts a region into a rectangular region with the specified coordinates (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetROP2 ( $hDC, $iMode ) Retrieves the foreground mix mode of the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetSearchPathMode ( $iFlags ) Sets the per-process mode that the _WinAPI_SearchPath() function uses when locating files (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetStretchBltMode ( $hDC, $iMode ) Sets the bitmap stretching mode in the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetSysColors ( $vElements, $vColors ) Setzt Informationen ueber die angezeigten Geraete in einem System (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetSystemCursor ( $hCursor, $iID [, $bCopy = False] ) Enables an application to customize the system cursors (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_SetTextAlign ( $hDC [, $iMode = 0] ) Sets the text-alignment flags for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetTextCharacterExtra ( $hDC, $iCharExtra ) Sets the intercharacter spacing for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetTextColor ( $hDC, $iColor ) Aendert die aktuelle Textfarbe in den festgelegten Farbwert (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_SetTextJustification ( $hDC, $iBreakExtra, $iBreakCount ) Specifies the amount of space the system should add to the break characters in a string of text (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetThemeAppProperties ( $iFlags ) Sets the flags that determine how visual styles are implemented in the calling application (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_SetThreadDesktop ( $hDesktop ) Assigns the specified desktop to the calling thread (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_SetThreadErrorMode ( $iMode ) Controls whether the system will handle the specified types of serious errors or whether the calling thread will handle them (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_SetThreadExecutionState ( $iFlags ) Prevents the system from entering sleep or turning off the display while the current application is running (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_SetThreadLocale ( $iLCID ) Sets the current locale of the calling thread (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_SetThreadUILanguage ( $iLanguage ) Sets the user interface language for the current thread (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_SetTimer ( $hWnd, $iTimerID, $iElapse, $pTimerFunc ) Creates a timer with the specified time-out value (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetUDFColorMode ( $iMode ) Sets the color mode for the WinAPIEx library (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetUserGeoID ( $iGEOID ) Sets the geographical location identifier for the user (benoetigt: #include <WinAPILocale.au3>)
_WinAPI_SetUserObjectInformation ( $hObject, $iIndex, $tData ) Sets information about the specified window station or desktop object (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetVolumeMountPoint ( $sFilePath, $sGUID ) Associates a volume with a drive letter or a directory on another volume (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SetWindowDisplayAffinity ( $hWnd, $iAffinity ) Stores the display affinity setting in kernel mode on the specified window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetWindowExt ( $hDC, $iXExtent, $iYExtent ) Sets the horizontal and vertical extents of the window for a device context by using the specified values (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetWindowLong ( $hWnd, $iIndex, $iValue ) Setzt Informationen ueber das angegebene Fenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetWindowOrg ( $hDC, $iX, $iY ) Specifies which window point maps to the viewport origin (0,0) (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetWindowPlacement ( $hWnd, $tWindowPlacement ) Setzt die minimale, maximale und normale Position des Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetWindowPos ( $hWnd, $hAfter, $iX, $iY, $iCX, $iCY, $iFlags ) Aendert die Groesse, Position und Z-Order eines Child-, Popup- oder Top-Level-Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetWindowRgn ( $hWnd, $hRgn [, $bRedraw = True] ) Setzt die Fensterregion eines Fensters (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SetWindowsHookEx ( $iHook, $pProc, $hDll [, $iThreadId = 0] ) Fuegt einen von der Anwendung erstellten Hook in die Hook-Kette ein (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass [, $pData = 0] ) Installs or updates a window subclass callback (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_SetWindowText ( $hWnd, $sText ) Aendert den Text in der Titelleiste des angegebenen Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SetWindowTheme ( $hWnd [, $sName = Default [, $sList = Default]] ) Causes a window to use a different set of visual style information than its class normally uses (benoetigt: #include <WinAPITheme.au3>)
_WinAPI_SetWinEventHook ( $iEventMin, $iEventMax, $pEventProc [, $iPID = 0 [, $iThreadId = 0 [, $iFlags = 0]]] ) Sets an event hook function for a range of events (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SetWorldTransform ( $hDC, $tXFORM ) Sets a two-dimensional linear transformation between world space and page space for the specified device context (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SfcIsFileProtected ( $sFilePath ) Determines whether the specified file is protected (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_SfcIsKeyProtected ( $hKey [, $sSubKey = Default [, $iFlag = 0]] ) Determines whether the specified registry key is protected (benoetigt: #include <WinAPIReg.au3>)
_WinAPI_ShellAboutDlg ( $sTitle, $sName, $sText [, $hIcon = 0 [, $hParent = 0]] ) Displays a Windows About dialog box (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_ShellAddToRecentDocs ( $sFilePath ) Adds a file to the most recently and frequently item list (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellChangeNotify ( $iEvent, $iFlags [, $iItem1 = 0 [, $iItem2 = 0]] ) Notifies the system of an event that an application has performed (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellChangeNotifyDeregister ( $iID ) Unregisters the client's window (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellChangeNotifyRegister ( $hWnd, $iMsg, $iEvents, $iSources, $aPaths [, $bRecursive = False] ) Registers a window to receive notifications from the file system or Shell (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellCreateDirectory ( $sFilePath [, $hParent = 0 [, $tSecurity = 0]] ) Creates a new file system folder (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellEmptyRecycleBin ( [$sRoot = '' [, $iFlags = 0 [, $hParent = 0]]] ) Empties the Recycle Bin on the specified drive (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellExecute ( $sFilePath [, $sArgs = '' [, $sDir = '' [, $sVerb = '' [, $iShow = 1 [, $hParent = 0]]]]] ) Performs an operation on a specified file (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellExecuteEx ( ByRef $tSHEXINFO ) Performs an operation on a specified file (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellExtractAssociatedIcon ( $sFilePath [, $bSmall = False] ) Returns a handle to the icon that associated with the specified file's (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellExtractIcon ( $sIcon, $iIndex, $iWidth, $iHeight ) Extrahiert das Icon mit den festgelegten Abmessungen von der festgelegten Datei (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellFileOperation ( $sFrom, $sTo, $iFunc, $iFlags [, $sTitle = '' [, $hParent = 0]] ) Copies, moves, renames, or deletes a file system object (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellFlushSFCache (  ) Flushes the special folder cache (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetFileInfo ( $sFilePath, $iFlags, $iAttributes, ByRef $tSHFILEINFO ) Retrieves information about an object in the file system (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetIconOverlayIndex ( $sIcon, $iIndex ) Retrieves the index of the overlay icon in the system image list (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetImageList ( [$bSmall = False] ) Retrieves the system image list for small or large icons (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_ShellGetKnownFolderIDList ( $sGUID [, $iFlags = 0 [, $hToken = 0]] ) Retrieves the path of a known folder as an ITEMIDLIST structure (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetKnownFolderPath ( $sGUID [, $iFlags = 0 [, $hToken = 0]] ) Retrieves the full path of a known folder identified (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetLocalizedName ( $sFilePath ) Retrieves the localized name of a file in a Shell folder (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetPathFromIDList ( $pPIDL ) Converts an item identifier list to a file system path (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetSetFolderCustomSettings ( $sFilePath, $iFlag, ByRef $tSHFCS ) Sets or retrieves custom folder settings (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetSettings ( $iFlags ) Retrieves Shell state settings (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetSpecialFolderLocation ( $iCSIDL ) Retrieves a pointer to the ITEMIDLIST structure (PIDL) of a special folder (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetSpecialFolderPath ( $iCSIDL [, $bCreate = False] ) Retrieves the path of a special folder (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellGetStockIconInfo ( $iSIID, $iFlags ) Retrieves information about system-defined Shell icons (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellILCreateFromPath ( $sFilePath ) Creates a pointer to an item identifier list (PIDL) from a path (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellNotifyIcon ( $iMessage, $tNOTIFYICONDATA ) Sends a message to the taskbar's status area (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellNotifyIconGetRect ( $hWnd, $iID [, $tGUID = 0] ) Gets the screen coordinates of the bounding rectangle of a notification icon (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellObjectProperties ( $sFilePath [, $iType = 2 [, $sProperty = '' [, $hParent = 0]]] ) Invokes the Properties context menu command on a Shell object (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellOpenFolderAndSelectItems ( $sFilePath [, $aNames = 0 [, $iStart = 0 [, $iEnd = -1 [, $iFlags = 0]]]] ) Opens a Windows Explorer window with specified items in a particular folder selected (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellOpenWithDlg ( $sFilePath [, $iFlags = 0 [, $hParent = 0]] ) Displays the Open With dialog box (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_ShellQueryRecycleBin ( [$sRoot = ''] ) Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellQueryUserNotificationState (  ) Checks the state of the computer for the current user (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellRemoveLocalizedName ( $sFilePath ) Removes the localized name of a file in a Shell folder (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellRestricted ( $iRestriction ) Determines whether a specified administrator policy is in effect (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellSetKnownFolderPath ( $sGUID, $sFilePath [, $iFlags = 0 [, $hToken = 0]] ) Redirects a known folder to a new location (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellSetLocalizedName ( $sFilePath, $sModule, $iResID ) Sets the localized name of a file in a Shell folder (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellSetSettings ( $iFlags, $bSet ) Sets Shell state settings (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellStartNetConnectionDlg ( [$sRemote = '' [, $iFlags = 0 [, $hParent = 0]]] ) Displays a general browsing dialog box for a network resource connection (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_ShellUpdateImage ( $sIcon, $iIndex, $iImage [, $iFlags = 0] ) Notifies the Shell that an image in the system image list has changed (benoetigt: #include <WinAPIShellEx.au3>)
_WinAPI_ShellUserAuthenticationDlg ( $sCaption, $sMessage, $sUser, $sPassword, $sTarget [, $iFlags = 0 [, $iError = 0 [, $bSave = False [, $hBitmap = 0 [, $hParent = 0]]]]] ) Creates and displays a configurable dialog box that accepts credentials information from a user (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_ShellUserAuthenticationDlgEx ( $sCaption, $sMessage, $sUser, $sPassword [, $iFlags = 0 [, $iAuthError = 0 [, $bSave = False [, $iPackage = 0 [, $hParent = 0]]]]] ) Creates and displays a configurable dialog box that accepts credentials information from a user (benoetigt: #include <WinAPIDlg.au3>)
_WinAPI_ShortToWord ( $iValue ) Converts a value of type SHORT to a value of type WORD (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_ShowCaret ( $hWnd ) Makes the caret visible on the screen at the caret's current position (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_ShowCursor ( $bShow ) Zeigt oder versteckt den Cursor (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_ShowError ( $sText [, $bExit = True] ) Zeigt eine "Error" MessageBox an mit optionalem Programmende (benoetigt: #include <WinAPIError.au3>)
_WinAPI_ShowLastError ( [$sText = '' [, $bAbort = False [, $iLanguage = 0]]] ) Shows the last error code and message (benoetigt: #include <WinAPIError.au3>)
_WinAPI_ShowMsg ( $sText ) Zeigt eine "Information" MessageBox an (benoetigt: #include <WinAPIError.au3>)
_WinAPI_ShowOwnedPopups ( $hWnd, $bShow ) Shows or hides all pop-up windows owned by the specified window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_ShowWindow ( $hWnd [, $iCmdShow = 5] ) Setzt den Anzeigestatus des angegebenen Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_ShutdownBlockReasonCreate ( $hWnd, $sText ) Indicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated (benoetigt: #include <WinAPISys.au3>)
_WinAPI_ShutdownBlockReasonDestroy ( $hWnd ) Indicates that the system can be shut down and frees the reason string (benoetigt: #include <WinAPISys.au3>)
_WinAPI_ShutdownBlockReasonQuery ( $hWnd ) Retrieves the reason string set by the _WinAPI_ShutdownBlockReasonCreate() function (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SizeOfResource ( $hInstance, $hResource ) Returns the size, in bytes, of the specified resource (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_StretchBlt ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRop ) Copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_StretchDIBits ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $tBITMAPINFO, $iUsage, $pBits, $iRop ) Copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified destination rectangle, stretching or compressing the rows and columns by using the specified raster operation (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_StrFormatByteSize ( $iSize ) Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_StrFormatByteSizeEx ( $iSize ) Converts a numeric value into a string that represents the number expressed as separated groups of digits to the left of the decimal (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_StrFormatKBSize ( $iSize ) Converts a numeric value into a string that represents the number expressed as a size value in kilobytes (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_StrFromTimeInterval ( $iTime [, $iDigits = 7] ) Converts a time interval to a string (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_StringFromGUID ( $tGUID ) Konvertiert eine binaere GUID in einen String (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_StringLenA ( Const ByRef $tString ) Berechnet die Laenge eines ANSI-Strings (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_StringLenW ( Const ByRef $tString ) Berechnet die Laenge eines Wide Character Strings (WChar) (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_StrLen ( $pString [, $bUnicode = True] ) Returns the length of the specified string (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_StrokeAndFillPath ( $hDC ) Closes any open figures in a path, strokes the outline of the path, and fills its interior (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_StrokePath ( $hDC ) Renders the specified path by using the current pen (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_StructToArray ( $tStruct [, $iItems = 0] ) Converts the structure to the array of strings (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_SubLangId ( $iLngID ) Extrahiert die Subsprach-ID von einer Sprach-ID (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_SubtractRect ( $tRECT1, $tRECT2 ) Determines the coordinates of a rectangle formed by subtracting one rectangle from another (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SwapDWord ( $iValue ) Converts a ULONG from little-endian to big-endian, and vice versa (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_SwapQWord ( $iValue ) Converts a ULONGLONG from little-endian to big-endian, and vice versa (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_SwapWord ( $iValue ) Converts a USHORT from little-endian to big-endian, and vice versa (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_SwitchColor ( $iColor ) Converts a color from BGR to RGB and vice versa (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_SwitchDesktop ( $hDesktop ) Makes the specified desktop visible and activates it (benoetigt: #include <WinAPISys.au3>)
_WinAPI_SwitchToThisWindow ( $hWnd [, $bAltTab = False] ) Switches the focus to a specified window and bring it to the foreground (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_SystemParametersInfo ( $iAction [, $iParam = 0 [, $vParam = 0 [, $iWinIni = 0]]] ) Ermittelt oder setzt den Wert von einem der Systemweiten Parameter (benoetigt: #include <WinAPISys.au3>)
_WinAPI_TabbedTextOut ( $hDC, $iX, $iY, $sText [, $aTab = 0 [, $iStart = 0 [, $iEnd = -1 [, $iOrigin = 0]]]] ) Writes a character string at a specified location and expanding tabs to the specified tab-stop positions (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_TerminateJobObject ( $hJob [, $iExitCode = 0] ) Terminates all processes currently associated with the job (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_TerminateProcess ( $hProcess [, $iExitCode = 0] ) Terminates the specified process and all of its threads (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_TextOut ( $hDC, $iX, $iY, $sText ) Writes a string at the specified location, using the currently selected font, background color, and text color (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_TileWindows ( $aWnds [, $tRECT = 0 [, $hParent = 0 [, $iFlags = 0 [, $iStart = 0 [, $iEnd = -1]]]]] ) Tiles the specified child windows of the specified parent window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_TrackMouseEvent ( $hWnd, $iFlags [, $iTime = -1] ) Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time (benoetigt: #include <WinAPISys.au3>)
_WinAPI_TransparentBlt ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRGB ) Performs a bit-block transfer of the color data corresponding to a rectangle of pixels (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_TwipsPerPixelX (  ) Gibt die Breite eines Pixels in Twips zurueck (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_TwipsPerPixelY (  ) Gibt die Hoehe eines Pixels in Twips zurueck (benoetigt: #include <WinAPIGdiDC.au3>)
_WinAPI_UnhookWindowsHookEx ( $hHook ) Entfernt eine "Hook"-Prozedur die durch eine "Hook"-Kette durch die _WinAPI_SetWindowsHookEx installiert wurde (benoetigt: #include <WinAPISys.au3>)
_WinAPI_UnhookWinEvent ( $hEventHook ) Removes an event hook function (benoetigt: #include <WinAPISys.au3>)
_WinAPI_UnionRect ( $tRECT1, $tRECT2 ) Creates the union of two rectangles (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_UnionStruct ( $tStruct1, $tStruct2 [, $sStruct = ''] ) Creates the structure of two structures (benoetigt: #include <WinAPIMisc.au3>)
_WinAPI_UniqueHardwareID ( [$iFlags = 0] ) Generates a unique hardware identifier (ID) for local computer (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_UnloadKeyboardLayout ( $hLocale ) Unloads an input locale identifier (benoetigt: #include <WinAPISys.au3>)
_WinAPI_UnlockFile ( $hFile, $iOffset, $iLength ) Unlocks a region in an open file (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_UnmapViewOfFile ( $pAddress ) Unmaps a mapped view of a file from the calling process's address space (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_UnregisterApplicationRestart (  ) Removes the active instance of an application from the restart list (benoetigt: #include <WinAPIDiag.au3>)
_WinAPI_UnregisterClass ( $sClass [, $hInstance = 0] ) Unregisters a window class, freeing the memory required for the class (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_UnregisterHotKey ( $hWnd, $iID ) Frees a hot key previously registered by the calling thread (benoetigt: #include <WinAPISys.au3>)
_WinAPI_UnregisterPowerSettingNotification ( $hNotify ) Unregisters the power setting notification (benoetigt: #include <WinAPISys.au3>)
_WinAPI_UpdateLayeredWindow ( $hWnd, $hDestDC, $tPTDest, $tSize, $hSrcDC, $tPTSrce, $iRGB, $tBlend, $iFlags ) Aktualisiert die Position, Groesse, Umriss, Inhalt und Durchscheinbarkeit (Opazitaet) eines mehrschichtigen Fensters (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_UpdateLayeredWindowEx ( $hWnd, $iX, $iY, $hBitmap [, $iOpacity = 255 [, $bDelete = False]] ) Updates a bitmap translucency of a layered window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_UpdateLayeredWindowIndirect ( $hWnd, $tULWINFO ) Updates the position, size, shape, content, and translucency of a layered window (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_UpdateResource ( $hUpdate, $sType, $sName, $iLanguage, $pData, $iSize ) Adds, deletes, or replaces a resource in a portable executable (PE) file (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_UpdateWindow ( $hWnd ) Aktualisiert die Fensterflaeche durch das Senden einer WM_PAINT Nachricht an das Fenster (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_UrlApplyScheme ( $sUrl [, $iFlags = 1] ) Determines a scheme for a specified URL string, and returns a string with an appropriate prefix (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_UrlCanonicalize ( $sUrl, $iFlags ) Converts a URL string into canonical form (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_UrlCombine ( $sUrl, $sPart [, $iFlags = 0] ) Combines the base an relative URLs in canonical form (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_UrlCompare ( $sUrl1, $sUrl2 [, $bIgnoreSlash = False] ) Makes a case-sensitive comparison of two URL strings (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_UrlCreateFromPath ( $sFilePath ) Converts a Microsoft MS-DOS path to a canonicalized URL (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_UrlFixup ( $sUrl ) Attempts to correct a URL whose protocol identifier is incorrect (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_UrlGetPart ( $sUrl, $iPart ) Retrieves a specified part from the URL (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_UrlHash ( $sUrl [, $iLength = 32] ) Hashes a URL string (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_UrlIs ( $sUrl [, $iType = 0] ) Tests whether or not a URL is a specified type (benoetigt: #include <WinAPIShPath.au3>)
_WinAPI_UserHandleGrantAccess ( $hObject, $hJob, $bGrant ) Grants or denies access to a handle to a User object to a job that has a user-interface restriction (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_ValidateRect ( $hWnd [, $tRECT = 0] ) Removes a rectangle from the current update region of the specified window (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_ValidateRgn ( $hWnd [, $hRgn = 0] ) Removes a region from the current update region of the specified window (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_VerQueryRoot ( $pData ) Retrieves the fixed version information from the specified version-information resource (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_VerQueryValue ( $pData [, $sValues = ''] ) Retrieves the non-fixed (strings) version information from the specified version-information resource (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_VerQueryValueEx ( $hModule [, $sValues = '' [, $iLanguage = 0x0400]] ) Retrieves the text information from the version-information resource of the specified binary module (benoetigt: #include <WinAPIRes.au3>)
_WinAPI_WaitForInputIdle ( $hProcess [, $iTimeout = -1] ) Wartet, waehrend ein Prozess auf Benutzereingaben ohne bevorstehende Eingabe oder Zeitlimit wartet (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_WaitForMultipleObjects ( $iCount, $paHandles [, $bWaitAll = False [, $iTimeout = -1]] ) Wartet bis eines oder alle angegebenen Objekte in dem signalisierten Status sind (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_WaitForSingleObject ( $hHandle [, $iTimeout = -1] ) Wartet bis das angegebene Objekt in dem signalisierten Status ist (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_WideCharToMultiByte ( $vUnicode [, $iCodePage = 0 [, $bRetNoStruct = True [, $bRetBinary = False]]] ) Konvertiert einen UTF-16 (Wide Character) -String in einen Multibyte-String (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_WidenPath ( $hDC ) Redefines the current path as the area that would be painted if the path were stroked (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_WindowFromDC ( $hDC ) Retrieves a handle to the window associated with the specified display device context (DC) (benoetigt: #include <WinAPIGdi.au3>)
_WinAPI_WindowFromPoint ( ByRef $tPoint ) Ermittelt das Handle des Fensters welches den festgelegten Punkt enthaelt (benoetigt: #include <WinAPISysWin.au3>)
_WinAPI_WordToShort ( $iValue ) Converts a value of type WORD to a value of type SHORT (benoetigt: #include <WinAPIConv.au3>)
_WinAPI_Wow64EnableWow64FsRedirection ( $bEnable ) Enables or disables file system redirection for the calling thread (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_WriteConsole ( $hConsole, $sText ) Schreibt einen String in einen Konsolen-Bildschirmpuffer (benoetigt: #include <WinAPIProc.au3>)
_WinAPI_WriteFile ( $hFile, $pBuffer, $iToWrite, ByRef $iWritten [, $tOverlapped = 0] ) Schreibt Daten in eine bestimmte Datei oder Eingabe/Ausgabe (I/O) Geraet, an eine Position, festgelegt durch den Datei-Zeiger (benoetigt: #include <WinAPIFiles.au3>)
_WinAPI_WriteProcessMemory ( $hProcess, $pBaseAddress, $pBuffer, $iSize, ByRef $iWritten [, $sBuffer = "ptr"] ) Schreibt Speicherinhalt in einen bestimmten Prozess (benoetigt: #include <WinAPIMem.au3>)
_WinAPI_ZeroMemory ( $pMemory, $iLength ) Fills a block of memory with zeros (benoetigt: #include <WinAPIMem.au3>)
_WinNet_AddConnection ( $sLocalName, $sRemoteName [, $sPassword = 0] ) Verbindet ein lokales Laufwerk mit einer Netzwerk Ressource (benoetigt: #include <WinNet.au3>)
_WinNet_AddConnection2 ( $sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]] ) Verbindet ein lokales Laufwerk mit einer Netzwerk Ressource (benoetigt: #include <WinNet.au3>)
_WinNet_AddConnection3 ( $hWnd, $sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]] ) Verbindet ein lokales Laufwerk mit einer Netzwerk Ressource (benoetigt: #include <WinNet.au3>)
_WinNet_CancelConnection ( $sName [, $bForce = True] ) Beendet eine bestehende Netzwerkverbindung (benoetigt: #include <WinNet.au3>)
_WinNet_CancelConnection2 ( $sName [, $bUpdate = True [, $bForce = True]] ) Beendet eine bestehende Netzwerkverbindung (benoetigt: #include <WinNet.au3>)
_WinNet_CloseEnum ( $hEnum ) Beendet die Auflistung der Netzwerk-Ressourcen, die mit durch Aufrufen der Funktion _WinNet_OpenEnum() begonnen wurde (benoetigt: #include <WinNet.au3>)
_WinNet_ConnectionDialog ( $hWnd ) Startet eine allgemeine Browsing-Dialog-Box, zum verbinden zu Netzwerk Ressourcen (benoetigt: #include <WinNet.au3>)
_WinNet_ConnectionDialog1 ( $hWnd [, $sRemoteName = "" [, $iFlags = 2]] ) Startet eine allgemeine Browsing-Dialog-Box fuer das Verbinden zu Netzwerk-Ressourcen (benoetigt: #include <WinNet.au3>)
_WinNet_DisconnectDialog ( $hWnd ) Startet eine allgemeine Browsing-Dialog-Box, um sich von Netzwerk-Ressourcen zu trennen (benoetigt: #include <WinNet.au3>)
_WinNet_DisconnectDialog1 ( $hWnd, $sLocalName [, $sRemoteName = "" [, $iFlags = 1]] ) Startet eine allgemeine Browsing-Dialog-Box fuer das Trennen von Netzwerk-Ressourcen (benoetigt: #include <WinNet.au3>)
_WinNet_EnumResource ( $hEnum, ByRef $iCount, $pBuffer, ByRef $iBufSize ) Setzt die Auflistung der Netzwerk-Ressourcen fort (benoetigt: #include <WinNet.au3>)
_WinNet_GetConnection ( $sLocalName ) Ermittelt den Namen einer Netzwerkressource, mit der ein lokales Geraet verbunden ist (benoetigt: #include <WinNet.au3>)
_WinNet_GetConnectionPerformance ( $sLocalName, $sRemoteName ) Liefert Informationen ueber den Durchsatz einer Netzwerkverbindung (benoetigt: #include <WinNet.au3>)
_WinNet_GetLastError ( ByRef $iError, ByRef $sError, ByRef $sName ) Gibt den letzten erweiterten Fehler zurueck (benoetigt: #include <WinNet.au3>)
_WinNet_GetNetworkInformation ( $sName ) Gibt erweiterte Informationen zu einem bestimmten Netzwerk-Provider (benoetigt: #include <WinNet.au3>)
_WinNet_GetProviderName ( $iType ) Ermittelt den Providernamen fuer einen angegebenen Typ der Netzwerkverbindung (benoetigt: #include <WinNet.au3>)
_WinNet_GetResourceInformation ( $sRemoteName [, $sProvider = "" [, $iType = 0]] ) Gibt den Besitzer einer Netzwerkressource zurueck (benoetigt: #include <WinNet.au3>)
_WinNet_GetResourceParent ( $sRemoteName, $sProvider [, $iType = 0] ) Gibt den Vorgaenger einer Netzwerkressource innerhalb der Netzwerkhierarchie zurueck (benoetigt: #include <WinNet.au3>)
_WinNet_GetUniversalName ( $sLocalPath ) Konvertiert laufwerksbasierte Pfade in die universelle Form (benoetigt: #include <WinNet.au3>)
_WinNet_GetUser ( $sName ) Ermittelt den Standard Benutzernamen, oder den Benutzernamen, mit dem eine Verbindung hergestellt wurde (benoetigt: #include <WinNet.au3>)
_WinNet_OpenEnum ( $iScope, $iType, $iUsage, $tResource, ByRef $hEnum ) Startet eine Auflistung der Netzwerkressourcen oder existierender Verbindungen (benoetigt: #include <WinNet.au3>)
_WinNet_RestoreConnection ( [$sDevice = "" [, $hWnd = 0 [, $bUseUI = True]]] ) Stellt die Verbindung zu einer Netzwerkressource wieder her (benoetigt: #include <WinNet.au3>)
_WinNet_UseConnection ( $hWnd, $sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]] ) Verbindet ein lokales Geraet mit einer Netzwerkressource (benoetigt: #include <WinNet.au3>)
_Word_Create ( [$bVisible = True [, $bForceNew = False]] ) Verbindet sich mit einer bestehenden Word Instanz oder erstellt eine neue (benoetigt: #include <Word.au3>)
_Word_DocAdd ( $oAppl [, $iDocumentType = $WdNewBlankDocument [, $sDocumentTemplate = "" [, $bNewTemplate = False]]] ) Fuegt ein neues oder leeres Dokument zur angegebenen Word Anwendung hinzu (benoetigt: #include <Word.au3>)
_Word_DocAttach ( $oAppl, $sString [, $sMode = "FilePath" [, $iCase = 0]] ) Verbindet sich mit der ersten Instanz eines Word Dokumentes mit dem passenden Suchargument (abhaengig vom ausgewaehlten Modus) (benoetigt: #include <Word.au3>)
_Word_DocClose ( $oDoc [, $iSaveChanges = $WdDoNotSaveChanges [, $iOriginalFormat = $WdOriginalDocumentFormat]] ) Schliesst das angegebene Word Dokument (benoetigt: #include <Word.au3>)
_Word_DocExport ( $oDoc, $sFileName [, $iFormat = $WdExportFormatPDF [, $iRange = $WdExportAllDocument [, $iFrom = Default [, $iTo = Default [, $bOpenAfterExport = False [, $bIncludeProperties = True [, $iCreateBookmarks = Default [, $bUseISO19005 = False]]]]]]]] ) Exports the document or a range as PDF or XPS (benoetigt: #include <Word.au3>)
_Word_DocFind ( $oDoc [, $sFindText = "" [, $vSearchRange = 0 [, $oFindRange = Default [, $bForward = True [, $bMatchCase = False [, $bMatchWholeWord = False [, $bMatchWildcards = False [, $bMatchSoundsLike = False [, $bMatchAllWordForms = False [, $bFormat = False]]]]]]]]]] ) Fuehrt die angegebene Suchfunktion durh oder wiederholt sie (benoetigt: #include <Word.au3>)
_Word_DocFindReplace ( $oDoc [, $sFindText = "" [, $sReplaceWith = "" [, $iReplace = $WdReplaceAll [, $vSearchRange = 0 [, $bMatchCase = False [, $bMatchWholeWord = False [, $bMatchWildcards = False [, $bMatchSoundsLike = False [, $bMatchAllWordForms = False [, $bForward = True [, $iWrap = $WdFindContinue [, $bFormat = False]]]]]]]]]]]] ) Fuehrt die angegebene "suchen und ersetzen" Funktion aus (benoetigt: #include <Word.au3>)
_Word_DocGet ( $oAppl [, $vIndex = -1] ) Gibt eine Zusammenstellung aller Dokumente oder das Objekt eines einzelnen Dokumentes zurueck (benoetigt: #include <Word.au3>)
_Word_DocLinkAdd ( $oDoc [, $oAnchor = Default [, $sAddress = Default [, $sSubAddress = Default [, $sScreenTip = Default [, $sTextToDisplay = Default [, $sTarget = Default]]]]]] ) Fuegt einen Hyperlink in das Dokument ein (benoetigt: #include <Word.au3>)
_Word_DocLinkGet ( $oDoc [, $iIndex = Default] ) Gibt eine Sammlung (Collection) aller Links des Dokumentes oder einen einzelnen Link zurueck (benoetigt: #include <Word.au3>)
_Word_DocOpen ( $oAppl, $sFilePath [, $bConfirmConversions = False [, $iFormat = $WdOpenFormatAuto [, $bReadOnly = False [, $bRevert = False [, $bAddToRecentFiles = False [, $sOpenPassword = "" [, $sWritePassword = ""]]]]]]] ) Oeffnet ein Word Dokument (benoetigt: #include <Word.au3>)
_Word_DocPictureAdd ( $oDoc, $sFilePath [, $bLinkToFile = False [, $bSaveWithDocument = False [, $oRange = 0]]] ) Fuegt ein Bild in das DOkument ein (benoetigt: #include <Word.au3>)
_Word_DocPrint ( $oDoc [, $bBackground = False [, $iCopies = 1 [, $iOrientation = -1 [, $bCollate = True [, $sPrinter = "" [, $iRange = $WdPrintAllDocument [, $vFrom = 0 [, $vTo = 0 [, $sPages = "" [, $iPageType = $WdPrintAllPages [, $iItem = $WdPrintDocumentContent]]]]]]]]]]] ) Druckt das gesamte oder Teile des Dokumentes (benoetigt: #include <Word.au3>)
_Word_DocRangeSet ( $oDoc, $vRange [, $iStartUnit = Default [, $iStartCount = Default [, $iEndUnit = Default [, $iEndCount = Default]]]] ) Setzt oder aendert eine Bereichs-Definition (Range) im Dokument (benoetigt: #include <Word.au3>)
_Word_DocSave ( $oDoc ) Sichert das angegebene Dokument (benoetigt: #include <Word.au3>)
_Word_DocSaveAs ( $oDoc [, $sFileName = Default [, $iFileFormat = $WdFormatDocument [, $bReadOnlyRecommended = False [, $bAddToRecentFiles = True [, $sPassword = "" [, $sWritePassword = ""]]]]]] ) Sichert das angegebene Dokument mit einem (neuen) Namen oder einem unterschiedlichen Format (benoetigt: #include <Word.au3>)
_Word_DocTableRead ( $oDoc, $vTable [, $iIndexBase = Default [, $sDelimiter = Default]] ) Liest eine Word Tabelle und gibt sie als 2-dimensionalen Array zurueck (benoetigt: #include <Word.au3>)
_Word_DocTableWrite ( $oRange, ByRef $aArray [, $iIndexBase = Default [, $sDelimiter = Default]] ) Schreibt einen ein- oder zwei-dimensionalen Array in eine Word Tabelle (benoetigt: #include <Word.au3>)
_Word_Quit ( $oAppl [, $iSaveChanges = $WdDoNotSaveChanges [, $iOriginalFormat = $WdWordDocument [, $bForceClose = False]]] ) Schliesst alle Dokumente sowie die Word Anwendung (benoetigt: #include <Word.au3>)
