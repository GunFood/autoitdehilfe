<!DOCTYPE html>
<html>
<head>
<title>Keyword $tagNMTVCUSTOMDRAW</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>

<body>
<h1 class="small">Keyword Reference</h1>
<hr style="height:0px">
<div class="top"><h1>$tagNMTVCUSTOMDRAW</h1><div>
<div id="flagtext">Show description in</div>
<div id="flaglink"> <a href="../libfunctions/$tagNMTVCUSTOMDRAW.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"><img src="../images/Flagge_de.png" height="29" width="36" border=0 hspace=10/></a></div>
<div ><input id="toggleButton" type="image" onclick="Themes.toggleTheme()" src="../images/dark.png" height ="36" width="36" alt="Toggle Theme"></div><br />
<br style="clear: both;">
<p style="margin:2px 0 0 0;" class="funcdesc">Contains information specific to an NM_CUSTOMDRAW (tree view) notification message sent by a tree-view control<br /></p>
<p class="codeheader">
Global Const $tagNMTVCUSTOMDRAW = "struct;" & $tagNMHDR & ";dword DrawStage;handle HDC;" & $tagRECT & _<br />
	";dword_ptr ItemSpec;uint ItemState;lparam ItemParam; endstruct" & _<br />
	";dword ClrText;dword ClrTextBk;int Level"<br />
</p>

<h2>Parameters</h2>
<table>
<tr>
<td style="width:15%">$tagNMHDR</td>
<td style="width:85%">Contains information about a notification message</td>
</tr>
<tr>
<td>DrawStage</td>
<td>Current drawing stage. This value is one of the following:<br />
Global Values:<br />
&nbsp;&nbsp;&nbsp; $CDDS_POSTERASE - After the erasing cycle is complete<br />
&nbsp;&nbsp;&nbsp; $CDDS_POSTPAINT - After the painting cycle is complete<br />
&nbsp;&nbsp;&nbsp; $CDDS_PREERASE - Before the erasing cycle begins<br />
&nbsp;&nbsp;&nbsp; $CDDS_PREPAINT - Before the painting cycle begins<br />
Item-specific Values:<br />
&nbsp;&nbsp;&nbsp; $CDDS_ITEM - Indicates that the ItemSpec, ItemState, and ItemParam members are valid<br />
&nbsp;&nbsp;&nbsp; $CDDS_ITEMPOSTERASE - After an item has been erased<br />
&nbsp;&nbsp;&nbsp; $CDDS_ITEMPOSTPAINT - After an item has been drawn<br />
&nbsp;&nbsp;&nbsp; $CDDS_ITEMPREERASE - Before an item is erased<br />
&nbsp;&nbsp;&nbsp; $CDDS_ITEMPREPAINT - Before an item is drawn<br />
&nbsp;&nbsp;&nbsp; $CDDS_SUBITEM - Flag combined with $CDDS_ITEMPREPAINT or $CDDS_ITEMPOSTPAINT if a subitem is being drawn</td>
</tr>
<tr>
<td>HDC</td>
<td>Handle to the control's device context</td>
</tr>
<tr>
<td>$tagRECT</td>
<td>Left   - X coordinate of upper left corner of bounding rectangle being drawn<br />
Top    - Y coordinate of upper left corner of bounding rectangle being drawn<br />
Right  - X coordinate of lower right corner of bounding rectangle being drawn<br />
Bottom - Y coordinate of lower right corner of bounding rectangle being drawn</td>
</tr>
<tr>
<td>ItemSpec</td>
<td>Item number</td>
</tr>
<tr>
<td>ItemState</td>
<td>Current item state. This value is a combination of the following:<br />
&nbsp;&nbsp;&nbsp; $CDIS_CHECKED - The item is checked<br />
&nbsp;&nbsp;&nbsp; $CDIS_DEFAULT - The item is in its default state<br />
&nbsp;&nbsp;&nbsp; $CDIS_DISABLED - The item is disabled<br />
&nbsp;&nbsp;&nbsp; $CDIS_FOCUS - The item is in focus<br />
&nbsp;&nbsp;&nbsp; $CDIS_GRAYED - The item is grayed<br />
&nbsp;&nbsp;&nbsp; $CDIS_HOT - The item is currently under the pointer<br />
&nbsp;&nbsp;&nbsp; $CDIS_INDETERMINATE - The item is in an indeterminate state<br />
&nbsp;&nbsp;&nbsp; $CDIS_MARKED - The item is marked<br />
&nbsp;&nbsp;&nbsp; $CDIS_SELECTED - The item is selected<br />
&nbsp;&nbsp;&nbsp; $CDIS_SHOWKEYBOARDCUES - The item is a keyboard cue</td>
</tr>
<tr>
<td>ItemParam</td>
<td>Application defined item data</td>
</tr>
<tr>
<td>ClrText</td>
<td>The color that will be used to display text foreground in the control</td>
</tr>
<tr>
<td>ClrTextBk</td>
<td>The color that will be used to display text background in the control</td>
</tr>
<tr>
<td>Level</td>
<td>0-based level of the item being drawn</td>
</tr>
</table>

<h2>Remarks</h2>
<p>$CDxx_ constants require #include &lt;WindowsConstants.au3&gt;<br />
</p>

</body>
</html>
