<!DOCTYPE html>
<html>
<head>
<title>Funktion DllStructSetData</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet">
</head>

<body>
<h1 class="small">Funktionreferenz</h1>
<hr style="height:0px">
<div class="top"><h1>DllStructSetData</h1><div>
<div id="flagtext">Beschreibung anzeigen in</div>
<div id="flaglink"> <a href="../functions_en/DllStructSetData.htm"><img src="../images/Flagge_en.png" height="29" width="36" border=0 hspace=10/></a></div>
<br style="clear: both;">
<p style="margin:2px 0 0 0;" class="funcdesc">Setzt Daten in einem Element der Struktur.<br /></p>
<p class="codeheader">
DllStructSetData ( Struct, Element, value [, index] )<br />
</p>

<h2>Parameter</h2>
<table>
<tr>
<td style="width:15%">Struct</td>
<td style="width:85%">Struktur, zur&uuml;ckgegeben von <a href="DllStructCreate.htm">DllStructCreate()</a>.</td>
</tr>
<tr>
<td>Element</td>
<td>Das Element in der Struktur, auf das man zugreifen m&ouml;chte (beginnend bei 1) oder der Elementname, wie er mit <a href="DllStructCreate.htm">DllStructCreate()</a> festgelegt wurde.</td>
</tr>
<tr>
<td>value</td>
<td>Der neue Wert, der in das Struktur-Element geschrieben werden soll.</td>
</tr>
<tr>
<td>index</td>
<td><strong>[optional]</strong> Befinden sich die Elemente in einem Array, so legt dies den 1-basierenden Index des zu erneuernenden Arrays fest. Falls dies nicht angegeben wird oder das Schl&uuml;sselwort Default verwendet wird, so wird bei Index 1 angefangen (n&uuml;tzlich f&uuml;r String die schnell erneuert werden sollten). <strong>Nicht f&uuml;r nicht-Array Elemente.</strong></td>
</tr>
</table>

<h2>R&uuml;ckgabewert</h2>
<table class="noborder">
<tr>
<td style="width:10%" class="valign-top">Erfolg:</td>
<td style="width:90%">Der gesetzte Wert, der aus der Struktur zur&uuml;ckgelesen wird.</td>
</tr>
<tr>
<td class="valign-top">Fehler:</td>
<td>0.</td>
</tr>
<tr>
<td class="valign-top">@Error:</td>
<td>1 = Struct ist keine g&uuml;ltige Struktur wie von <a href="DllStructCreate.htm">DllStructCreate()</a> zur&uuml;ckgegeben.<br />
2&nbsp;= Element nicht im zul&auml;ssigen Bereich oder unbekannt.<br />
3&nbsp;= Index nicht im zul&auml;ssigen Bereich<br />
4&nbsp;= Element Datentyp unbekannt<br />
5&nbsp;= Index &lt;= 0.</td>
</tr>
</table>

<h2>Bemerkungen</h2>
<p>Wenn das Element ein char[n], wchar[n] oder byte[n] ist, kann der Datentyp ein String sein. byte[n] akzeptiert auch Bein&auml;rdaten.<br />
Sonst haben die Daten entweder einen AutoIt kompatiblen Typ mit dem Elementtyp oder eine Zahl welche in den ben&ouml;tigten Typ konveriert wird.<br />
Native AutoIt-Strings werden implizit in ANSI vor der Kopie in ein char[n] oder byte[n] Element konvertiert.<br />
Man muss native Unicode-Strings in UTF8 konvertieren, wenn das Element diese Codierung erwartet (z. B. in DllCall).<br />
</p>

<h2>Verwandte Funktionen</h2>
<p><a href="DllStructCreate.htm">DllStructCreate</a>, <a href="DllStructGetData.htm">DllStructGetData</a>, <a href="DllStructGetSize.htm">DllStructGetSize</a></p>

<h2 class="bottom">Beispiel</h2>
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
function copyToClipboard(section) {
if (window.clipboardData && clipboardData.setData) {
clipboardData.setData("text", section + "\r\n");
alert("Das Beispiel wurde in die Zwischenablage kopiert");
}
}
</script>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\DllStructCreate.au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext1\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext1">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;MsgBoxConstants.au3&gt;</span>

<span class="S0">Example</span><span class="S8">()</span>

<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Func</span></a><span class="S0"> Example</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S11">#cs</span><span class="S2"> Comments:</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp; Erstellen Sie die folgende Struktur (C-Sprache)::</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp; struct {</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int var1;</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned char var2;</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned int var3;</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char var4[128];</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp; };</span>

<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp; Schema:</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp; ------------------------------------</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp; \ int &nbsp;&nbsp;&nbsp;\ byte &nbsp;&nbsp;\ uint &nbsp;&nbsp;\ char &nbsp;&nbsp;\</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp;  \ &nbsp;&nbsp;var1 \ &nbsp;&nbsp;var2 \ &nbsp;&nbsp;var3 \ &nbsp;&nbsp;var4 \</span>
<span class="S2">&nbsp; &nbsp; &nbsp; &nbsp;  &nbsp;------------------------------------</span>
<span class="S2">&nbsp; &nbsp; </span><span class="S11">#ce</span><span class="S2"> Comments:</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Weist einer lokalen konstanten Variablen die Definition einer Struktur zu (man sollte die Bemerkungen zu DllStructCreate sorgf&auml;ltig durchlesen).</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Const</span></a><span class="S0"> </span><a class="codeSnippetLink" href="$tagSTRUCT1.htm"><span class="S9">$tagSTRUCT1</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"struct;int var1;byte var2;uint var3;char var4[128];endstruct"</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Hinweis: Die Tag-Variable wird als Konstante deklariert, da sich ihr Wert bei keiner Skriptausf&uuml;hrung &auml;ndern wird.</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Weist der Struktur eine lokale Variable zu.</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$tSTRUCT1</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/DllStructCreate.htm"><span class="S4">DllStructCreate</span></a><span class="S8">(</span><a class="codeSnippetLink" href="$tagSTRUCT1.htm"><span class="S9">$tagSTRUCT1</span></a><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Wenn ein Fehler aufgetreten ist, den Fehlercode anzeigen und False zur&uuml;ckgeben.</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/If.htm"><span class="S5">If</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@error"><span class="S6">@error</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Then</span></a>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">""</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Error in DllStructCreate, Code: "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@error"><span class="S6">@error</span></a><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Return</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/Booleans.htm"><span class="S5">False</span></a>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">EndIf</span></a>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Setzt die Daten des Elements var1 (int) in $tSTRUCT1.</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/DllStructSetData.htm"><span class="S4">DllStructSetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"var1"</span><span class="S8">,</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; Oder 1 statt „var1“.</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Setz die Daten des Elements var2 (Byte) in $tSTRUCT1.</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/DllStructSetData.htm"><span class="S4">DllStructSetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S3">2</span><span class="S8">,</span><span class="S0"> </span><span class="S3">255</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; Oder „var2“ anstelle von 2.</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Setzt die Daten des Elements var3 (uint) in $tSTRUCT1.</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/DllStructSetData.htm"><span class="S4">DllStructSetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"var3"</span><span class="S8">,</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; Der Wert -1 (signed int) wird in unsigned int umgewandelt.</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Oder 3 statt „var3“.</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Setzt die Daten des Elements var4 (Zeichen) in $tSTRUCT1.</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/DllStructSetData.htm"><span class="S4">DllStructSetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"var4"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Hallo"</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; Oder 4 statt „var4“.</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Hinweis: Dieses Element kann bis zu 128 Zeichen enthalten.</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; &Auml;ndert die Daten des Elements var4 (Zeichen) in $tSTRUCT1 am Index 1 des Zeichen-Arrays (Index beginnt bei 1).</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/DllStructSetData.htm"><span class="S4">DllStructSetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"var4"</span><span class="S8">,</span><span class="S0"> </span><a class="codeSnippetLink" href="../functions/Asc.htm"><span class="S4">Asc</span></a><span class="S8">(</span><span class="S7">"h"</span><span class="S8">),</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Zeigt die Ergebnisse an.</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">""</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Struct Size: "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../functions/DllStructGetSize.htm"><span class="S4">DllStructGetSize</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S8">_</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S7">"Struct pointer: "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../functions/DllStructGetPtr.htm"><span class="S4">DllStructGetPtr</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S8">_</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S7">"Data:"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S8">_</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/DllStructGetData.htm"><span class="S4">DllStructGetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S8">_</span><span class="S0"> </span><span class="S1">; Oder „var1“ anstelle von 1.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/DllStructGetData.htm"><span class="S4">DllStructGetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"var2"</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S8">_</span><span class="S0"> </span><span class="S1">; Oder 2 statt „var2“.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/DllStructGetData.htm"><span class="S4">DllStructGetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S8">_</span><span class="S0"> </span><span class="S1">; Oder „var3“ anstelle von 3.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/DllStructGetData.htm"><span class="S4">DllStructGetData</span></a><span class="S8">(</span><span class="S9">$tSTRUCT1</span><span class="S8">,</span><span class="S0"> </span><span class="S3">4</span><span class="S8">))</span><span class="S0"> </span><span class="S1">; Oder „var4“ anstelle von 4.</span>

<span class="S0">&nbsp; &nbsp; </span><span class="S1">; Gibt die von der Struktur verwendeten Ressourcen frei.</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S9">$tSTRUCT1</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">EndFunc</span></a><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Example</span>
<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
</body>
</html>
