<!DOCTYPE html>
<html>
<head>
<title>Keyword $tagMENUITEMINFO</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>

<body>
<h1 class="small">Keyword Reference</h1>
<hr style="height:0px">
<div class="top"><h1>$tagMENUITEMINFO</h1><div>
<div id="flagtext">Show description in</div>
<div id="flaglink"> <a href="../libfunctions/$tagMENUITEMINFO.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"><img src="../images/Flagge_de.png" height="29" width="36" border=0 hspace=10/></a></div>
<div ><input id="toggleButton" type="image" onclick="Themes.toggleTheme()" src="../images/dark.png" height ="36" width="36" alt="Toggle Theme"></div><br />
<br style="clear: both;">
<p style="margin:2px 0 0 0;" class="funcdesc">Contains information about a menu item<br /></p>
<p class="codeheader">
Global Const $tagMENUITEMINFO = "int Size;int Mask;int Type;int State;int ID;int SubMenu;int BmpChecked;int BmpUnchecked;" & _<br />
	"int ItemData;ptr TypeData;int CCH;int BmpItem"<br />
</p>

<h2>Parameters</h2>
<table>
<tr>
<td style="width:15%">Size</td>
<td style="width:85%">Specifies the size, in bytes, of the structure</td>
</tr>
<tr>
<td>Mask</td>
<td>Members to retrieve or set. This member can be one or more of these values:<br />
&nbsp;&nbsp;&nbsp; $MIIM_BITMAP - Retrieves or sets the BmpItem member<br />
&nbsp;&nbsp;&nbsp; $MIIM_CHECKMARKS - Retrieves or sets the BmpChecked and BmpUnchecked members<br />
&nbsp;&nbsp;&nbsp; $MIIM_DATA - Retrieves or sets the ItemData member<br />
&nbsp;&nbsp;&nbsp; $MIIM_FTYPE - Retrieves or sets the Type member<br />
&nbsp;&nbsp;&nbsp; $MIIM_ID - Retrieves or sets the ID member<br />
&nbsp;&nbsp;&nbsp; $MIIM_STATE - Retrieves or sets the State member<br />
&nbsp;&nbsp;&nbsp; $MIIM_STRING - Retrieves or sets the TypeData member<br />
&nbsp;&nbsp;&nbsp; $MIIM_SUBMENU - Retrieves or sets the SubMenu member<br />
&nbsp;&nbsp;&nbsp; $MIIM_TYPE - Retrieves or sets the Type and TypeData members</td>
</tr>
<tr>
<td>Type</td>
<td>Menu item type. This member can be one or more of the following values:<br />
&nbsp;&nbsp;&nbsp; $MFT_BITMAP - Displays the menu item using a bitmap<br />
&nbsp;&nbsp;&nbsp; $MFT_MENUBARBREAK - Places the menu item on a new line or in a new column<br />
&nbsp;&nbsp;&nbsp; $MFT_MENUBREAK - Places the menu item on a new line or in a new column<br />
&nbsp;&nbsp;&nbsp; $MFT_OWNERDRAW - Assigns responsibility for drawing the menu item to the menu owner<br />
&nbsp;&nbsp;&nbsp; $MFT_RADIOCHECK - Displays selected menu items using a radio button mark<br />
&nbsp;&nbsp;&nbsp; $MFT_RIGHTJUSTIFY - Right justifies the menu item and any subsequent items<br />
&nbsp;&nbsp;&nbsp; $MFT_RIGHTORDER - Specifies that menus cascade right to left<br />
&nbsp;&nbsp;&nbsp; $MFT_SEPARATOR - Specifies that the menu item is a separator</td>
</tr>
<tr>
<td>State</td>
<td>Menu item state. This member can be one or more of these values:<br />
&nbsp;&nbsp;&nbsp; $MFS_CHECKED - Checks the menu item<br />
&nbsp;&nbsp;&nbsp; $MFS_DEFAULT - Specifies that the menu item is the default<br />
&nbsp;&nbsp;&nbsp; $MFS_DISABLED - Disables the menu item and grays it so that it cannot be selected<br />
&nbsp;&nbsp;&nbsp; $MFS_ENABLED - Enables the menu item so that it can be selected<br />
&nbsp;&nbsp;&nbsp; $MFS_GRAYED - Disables the menu item and grays it so that it cannot be selected<br />
&nbsp;&nbsp;&nbsp; $MFS_HILITE - Highlights the menu item</td>
</tr>
<tr>
<td>ID</td>
<td>Application-defined 16-bit value that identifies the menu item</td>
</tr>
<tr>
<td>SubMenu</td>
<td>Handle to the drop down menu or submenu associated with the menu item</td>
</tr>
<tr>
<td>BmpChecked</td>
<td>Handle to the bitmap to display next to the item if it is selected</td>
</tr>
<tr>
<td>BmpUnchecked</td>
<td>Handle to the bitmap to display next to the item if it is not selected</td>
</tr>
<tr>
<td>ItemData</td>
<td>Application-defined value associated with the menu item</td>
</tr>
<tr>
<td>TypeData</td>
<td>Content of the menu item</td>
</tr>
<tr>
<td>CCH</td>
<td>Length of the menu item text</td>
</tr>
<tr>
<td>BmpItem</td>
<td>Handle to the bitmap to be displayed</td>
</tr>
</table>

</body>
</html>
