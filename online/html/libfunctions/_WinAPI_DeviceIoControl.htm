<!DOCTYPE html>
<html>
<head>
<title>Funktion _WinAPI_DeviceIoControl</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>

<body>
<h1 class="small">Funktionreferenz</h1>
<hr style="height:0px">
<div class="top"><h1>_WinAPI_DeviceIoControl</h1><div>
<div id="flagtext">Beschreibung anzeigen in</div>
<div id="flaglink"> <a href="../libfunctions_en/_WinAPI_DeviceIoControl.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"><img src="../images/Flagge_en.png" height="29" width="36" border=0 hspace=10/></a></div>
<div ><input id="toggleButton" type="image" onclick="Themes.toggleTheme()" src="../images/dark.png" height ="36" width="36" alt="Toggle Theme"></div><br />
<br style="clear: both;">
<p style="margin:2px 0 0 0;" class="funcdesc">Sendet einen Kontrollcode direkt zum angegeben Treiber<br /></p>
<p class="codeheader">
#include &lt;WinAPIFiles.au3&gt;<br />
_WinAPI_DeviceIoControl ( $hDevice, $iControlCode [, $pInBuffer = 0 [, $iInBufferSize = 0 [, $pOutBuffer = 0 [, $iOutBufferSize = 0]]]] )<br />
</p>

<h2>Parameter</h2>
<table>
<tr>
<td style="width:15%">$hDevice</td>
<td style="width:85%">Das Handel zum Ger&auml;te auf welchem die Operation ausgef&uuml;hrt werden soll.<br />
Das Ger&auml;t ist normalerweise ein Laufwerk, ein Verzeichnis, eine Datei oder ein Stream.<br />
Um das Ger&auml;tehandle zu erhalten, sollte man die <a href="_WinAPI_CreateFileEx.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_CreateFileEx()</a> Funktion verwende.<br />
Um einen Ger&auml;tenamen anzugeben sollte das folgende Format verwendet werden.<br />
&nbsp;&nbsp;&nbsp; <a href="_WinAPI_CreateFileEx.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_CreateFileEx</a>("\\.\Ger&auml;tename", ...)</td>
</tr>
<tr>
<td>$iControlCode</td>
<td>Der Kontrollcode f&uuml;r die Operation.<br />
Dieser Wert identifiziert die genaue Operation sowie den Typ des Ger&auml;tes auf welchem sie ausgef&uuml;hrt werden soll.</td>
</tr>
<tr>
<td>$pInBuffer</td>
<td><strong>[optional]</strong> Ein Zeiger zu dem Inputpuffer welcher die Daten enth&auml;lt um diese Operation auszuf&uuml;hren.</td>
</tr>
<tr>
<td>$iInBufferSize</td>
<td><strong>[optional]</strong> Die Gr&ouml;&szlig;e des Inputpuffers in Bytes. Standardm&auml;&szlig;ig liegt diese bei 0.</td>
</tr>
<tr>
<td>$pOutBuffer</td>
<td><strong>[optional]</strong> Ein Zeiger zu dem Ausgabepuffer um die Daten zu erhalten die von der Operation zur&uuml;ckgegeben wurden.</td>
</tr>
<tr>
<td>$iOutBufferSize</td>
<td><strong>[optional]</strong> Die Gr&ouml;&szlig;e des Ausgabepuffers in Bytes. Standardm&auml;&szlig;ig liegt diese bei 0.</td>
</tr>
</table>

<h2>R&uuml;ckgabewert</h2>
<table class="noborder">
<tr>
<td style="width:10%" class="valign-top">Erfolg:</td>
<td style="width:90%">True und @extended beinhaltet die Gr&ouml;&szlig;e der Daten in Bytes welche im Ausgabepuffer gespeicher sind.</td>
</tr>
<tr>
<td class="valign-top">Fehler:</td>
<td>False. Es ist <a href="_WinAPI_GetLastError.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_GetLastError()</a> aufzurufen um erweiterte Fehlerinformationen zu erhalten.</td>
</tr>
</table>

<h2>Verwandte Funktionen</h2>
<p><a href="_WinAPI_CreateFileEx.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_CreateFileEx</a></p>

<h2>Siehe auch</h2>
<p>Suche nach <a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&l=EN-US&k=k(DeviceIoControl);k(DevLang-C);k(TargetOS-WINDOWS)&rd=true">DeviceIoControl</a> in der MSDN Bibliothek.
</p>

</body>
</html>
