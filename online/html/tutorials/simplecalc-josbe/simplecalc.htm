<!DOCTYPE html>
<html>
<head>
  <title>Tutorial - Simple calculator (Part I)</title>
  <meta charset="utf-8">
  <link href="../../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../../css/' + this.theme);
				document.getElementById('toggleButton').src = '../../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
  <style type="text/css">
span.c1 {text-decoration: underline}
  </style>
</head>
<body>
  <h1>Tutorial - Creating to GUI Calculator - (Dialog Creation)</h1>
  <p>In this tutorial we will try to guide him to create a basic calculator, just as that of MS-Windows. Using the <a href="../../guiref/GUIRef.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUI's AutoIt</a> features.<br />
  It is assumed that you are already familiar with creating and running AutoIt scripts as shown in the &nbsp;<object id="hhctrl-bottom" type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
    <param name="Command" value="ShortCut">
    <param name="Text" value="Text:GUI MsgBox">
    <param name="Font" value=",10pt">
    <param name="Item1" value=",Examples\GUI\simple\msgbox_messageloop.au3,">
  </object>&nbsp; example.</p>
  <p><br />
  <strong>Creation of the GUI dialog - (Design)<br /></strong><br />
  In this part we will begin with the creation of GUI dialog. It's good to have the idea of the design based on the utility of our program.<br />
  That is to say, how many and that type of controls will need. In this case we will use the same design that Windows Calc.<br />
  In the <strong><em>Fig. 1</em></strong>, we can see how our calculator will be finished in this part.</p>
  <p><strong>Fig. 1</strong> <img src="dialog1.png" align="center" alt=""></p>
  <p>To begin the creation of our dialog, we will begin including some libraries which declare constants we use in our dialog box. These constants contain numeric values of <a href="../../appendix/GUIStyles.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">styles</a> and parameters that define the
  appearance of each <a href="../../intro/controls.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">control</a>, as well as you value for <a href="../../functions/GUIGetMsg.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">events</a> and <a href="../../functions/GUICtrlSetState.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"#StateTable>states</a>. (Usually,
  <em>"GUIConstantsEx.au3"</em> already comes included and it resides in the <a href="../../intro/installdir.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">AutoIt's folder installer</a>). Later on we will see how to apply them, for the time being we will make the inclusion of this library
  writing in our script the following lines:</p>
@@SyntaxHighlighting@@
#include <EditConstants.au3>
#include <GUIConstantsEx.au3>
#include <StaticConstants.au3>
#include <WindowsConstants.au3>
@@End@@
<br />
  How it could it turns in the <a href="../../guiref/GUIRef_MessageLoopMode.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">basic tutorial</a>, to begin the creation of our dialog we begin defining the window, as the title, size and position with <a href="../../functions/GUICreate.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUICreate()</a>. The
  values of the window will be the following ones:<br />
  <strong>Title</strong> = "Calculator"<br />
  <strong>Width</strong> = 260<br />
  <strong>Height</strong> = 230<br />
  Therefore, the following lines of our code would be:
@@SyntaxHighlighting@@
GUICreate("Calculator", 260, 230)
@@End@@
<br />
  <strong>To store the identifier (ID) of each control</strong><br />
  In the definition part, we will be ahead to the assignment of variables for each button that we make. When making this assignment, the variable stores the <a href="../../intro/controls.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">control ID</a> that it allows us to use it to be able to to
  manipulate "their action" in run-time. See &nbsp;<object id="hhctrl-bottom" type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
    <param name="Command" value="ShortCut">
    <param name="Text" value="Text:MsgBox messageloop">
    <param name="Font" value=",10pt">
    <param name="Item1" value=",Examples\GUI\simple\msgbox_messageloop.au3,">
  </object>&nbsp; example.<br />
  <br />
  <em>Variable naming</em><br />
  The naming of each variable is a personal matter, but it's important to be clear to the one to assign name for the easy understanding of what represents in the certain code control. As it looks in the next example, this syntax used: $idBtn1 that
  means "<em>TO GUI Control - It's a button, Digit #1"</em>, the parameters for this button's example are the following ones:<br />
  <strong>Text</strong> ="1", <strong>Left</strong> = 54, <strong>Top</strong> = 138, <strong>Width</strong> = 36, <strong>Height</strong> = 29<br />
@@SyntaxHighlighting@@
$idBtn1 = GUICtrlCreateButton("1", 54, 138, 36, 29)
@@End@@
As I mentioned before, this makes that the code to be clearer.<br />
  <br />
  <strong>Creation of each control</strong><br />
  As we can it looks in the <strong><em>Fig.1</em></strong>, we needs to create several buttons, which we will define with <a href="../../functions/GUICtrlCreateButton.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUICtrlCreateButton()</a>. The buttons that we will define will be: the digits of 0
  up to 9, the operators, memory's buttons as such Memory Clear ("MC"), Memory Restore ("MR"), etc.<br />
  You can copy the code shown below and to <span class="c1"><em>add to your script</em></span>:
@@SyntaxHighlighting@@
; Digit's buttons
Local $idBtn0 = GUICtrlCreateButton("0", 54, 171, 36, 29)
Local $idBtn1 = GUICtrlCreateButton("1", 54, 138, 36, 29)
Local $idBtn2 = GUICtrlCreateButton("2", 93, 138, 36, 29)
Local $idBtn3 = GUICtrlCreateButton("3", 132, 138, 36, 29)
Local $idBtn4 = GUICtrlCreateButton("4", 54, 106, 36, 29)
Local $idBtn5 = GUICtrlCreateButton("5", 93, 106, 36, 29)
Local $idBtn6 = GUICtrlCreateButton("6", 132, 106, 36, 29)
Local $idBtn7 = GUICtrlCreateButton("7", 54, 73, 36, 29)
Local $idBtn8 = GUICtrlCreateButton("8", 93, 73, 36, 29)
Local $idBtn9 = GUICtrlCreateButton("9", 132, 73, 36, 29)
Local $idBtnPeriod = GUICtrlCreateButton(".", 132, 171, 36, 29)

; Memory's buttons
Local $idBtnMClear = GUICtrlCreateButton("MC", 8, 73, 36, 29)
Local $idBtnMRestore = GUICtrlCreateButton("MR", 8, 106, 36, 29)
Local $idBtnMStore = GUICtrlCreateButton("MS", 8, 138, 36, 29)
Local $idBtnMAdd = GUICtrlCreateButton("M+", 8, 171, 36, 29)

; Operators
Local $idBtnChangeSign = GUICtrlCreateButton("+/-", 93, 171, 36, 29)
Local $idBtnDivision = GUICtrlCreateButton("/", 171, 73, 36, 29)
Local $idBtnMultiplication = GUICtrlCreateButton("*", 171, 106, 36, 29)
Local $idBtnSubtract = GUICtrlCreateButton("-", 171, 138, 36, 29)
Local $idBtnAdd = GUICtrlCreateButton("+", 171, 171, 36, 29)
Local $idBtnAnswer = GUICtrlCreateButton("=", 210, 171, 36, 29)
Local $idBtnInverse = GUICtrlCreateButton("1/x", 210, 138, 36, 29)
Local $idBtnSqrt = GUICtrlCreateButton("Sqrt", 210, 73, 36, 29)
Local $idBtnPercentage = GUICtrlCreateButton("%", 210, 106, 36, 29)
Local $idBtnBackspace = GUICtrlCreateButton("Backspace", 54, 37, 63, 29)
Local $idBtnClearE = GUICtrlCreateButton("CE", 120, 37, 62, 29)
Local $idBtnClear = GUICtrlCreateButton("C", 185, 37, 62, 29)

Local $idEdtScreen = GUICtrlCreateEdit("0.", 8, 2, 239, 23)
Local $idLblMemory = GUICtrlCreateLabel("", 12, 39, 27, 26)
@@End@@
<br />
  Already defined the creation of each control, is important to <em>add the line following</em> to show our dialog box, using <a href="../../functions/GUISetState.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUISetState()</a>.
@@SyntaxHighlighting@@
GUISetState()
@@End@@
<br />
  <strong>Messages loop</strong><br />
  As he/she could it turns in the one &nbsp;<object id="hhctrl-bottom" type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
    <param name="Command" value="ShortCut">
    <param name="Text" value="Text:tutorial of MsgBox">
    <param name="Font" value=",10pt">
    <param name="Item1" value=",Examples\GUI\simple\msgbox_messageloop.au3,">
  </object>&nbsp; , the function <a href="../../functions/GUIGetMsg.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUIGetMsg()</a> gives as output a value of an event in the dialog box, and this it is received by the variable in this case, $msg that is evaluated every time that <a href=
  "../../keywords/Do.htm">Do.. Until</a> loop, repeats. For this part we will only add the one simpler event, which repeats in an infinite cycle until the event similar to the constant $GUI_EVENT_CLOSE (equal to -3) it's presented, and it will make that
  close the window and finish the script. So the following lines for our script will be:
@@SyntaxHighlighting@@
Local $msg
Do
	$msg = GUIGetMsg()

Until $msg = $GUI_EVENT_CLOSE
@@End@@
<br />
  <strong>Application of styles</strong><br />
  Until this point, we have already been able to conclude the design of our dialog box. You can already execute the script and it will see almost ended the calculator, now observe that the calculator shows something not foreseen in the design. The
  EDIT control that represents the screen of digits not displayed correctly, which needs that we apply certain styles of appearance (to see the <strong><em>Fig. 2</em></strong>). For to correct this appearance, we will make use of <a href=
  "../../appendix/GUIStyles.htm#Edit">EDIT styles</a>:
  <p><strong>Fig. 2</strong> <img src="dialog2.png" align="center" alt=""></p>
  <p>For this part, we only need to modify two lines of our code.<br />
  <br />
  <strong>First modification:</strong> in the first addition, we will add in the line of the variable $idEdtScreen, a definition for the control (Edit) that is of reading ($ES_READONLY) and that it is justified to the right ($ES_RIGHT), for we join
  these two variables with the function <a href="../../functions/BitOR.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">BitOR()</a> like it is presented in the line of code below. We will also add <strong>$WS_EX_STATICEDGE</strong> to the parameter of <a href=
  "../../functions/GUICreate.htm#Extended%20Style%20Table">extended style</a> (exStyle) to give the sunken appearance to the border. For more reference of the styles table for EDIT control, <a href="../../appendix/GUIStyles.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"#Edit>click here.</a> (for
  a detailed explanation of each style).</p>
@@SyntaxHighlighting@@
Local $idEdtScreen = GUICtrlCreateEdit("0.", 8, 2, 239, 23, BitOR($ES_READONLY, $ES_RIGHT), $WS_EX_STATICEDGE)
@@End@@
<br />
  <strong>Second modification:</strong> the second addition we will add to the line of the variable $idLblMemory, that it contains a LABEL control in which will show us the state of storage in memory that we will see in the second part. We will
  define that this control (Label) will have a sunken ($SS_SUNKEN) like it is presented in the line of the code. For reference of styles table for LABEL control, <a href="../../appendix/GUIStyles.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"#Label>click here.</a><br />
@@SyntaxHighlighting@@
Local $idLblMemory = GUICtrlCreateLabel("", 12, 39, 27, 26, $SS_SUNKEN)
@@End@@
<br />
  <p>After making these changes try to execute the script. The changes affects the appearance shown in the <strong><em>Fig. 3</em></strong>, now our calculator it looks as the <em><strong>Fig. 1</strong></em>, shown at the beginning. You can also look at
  the &nbsp;<object id="hhctrl-bottom" type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
    <param name="Command" value="ShortCut">
    <param name="Text" value="Text:completed script">
    <param name="Font" value=",10pt">
    <param name="Item1" value=",Examples\GUI\simple\simplecalc.au3,">
  </object>&nbsp; for reference.</p>
  <p><strong>Fig. 3</strong> <img src="dialog3.png" align="center" alt=""></p>
  <p>&nbsp;</p>
  <p>As an exercise for the reader, try adding $BS_FLAT to style parameter in some button, you will look a flat style in the appearance.</p>
</body>
</html>
