<!DOCTYPE html>
<html>
<head>
  <title>COM Reference</title>
  <meta charset="utf-8">
  <link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
  <style type="text/css">
td.c2 {width:85%}
  td.c1 {width:15%}
  </style>
</head>
<body>
  <h1>COM Extensions to AutoIt</h1>
  <p>A short introduction</p>
  <h2>What is COM?</h2>
  <p>COM stands for "Component Object Model". It is the Microsoft way to interconnect software using a common interface. These interfaces are defined in a COM Object.</p>
  <p>Before COM, you had to know the exact implementation of a program before you could 'interface' with it. Using COM, you can now "talk" to its defined Object(s). The only things you have to know are the names of the Objects that are used and which
  'properties' or 'methods' they have.</p>
  <h2>What are (Object) properties or methods?</h2>
  <p>These are the two basic characteristics of an Object. You can see a 'property' as the data storage of an Object. A 'method' can be seen as an internal function call to do something with the data.</p>
  <h2>Do I need COM in my AutoIt script?</h2>
  <p>It just depends. AutoIt has a lot of built-in functions and a huge library of UDF's. You can do most of your programming with these. However if you need special 'interfacing' to other applications, using COM might save you some lines of script.
  Scripters have to be aware that the existence of COM Objects depend HEAVILY on the Operating System AND the installed software. The examples below have all been tested under a 'plain' Windows XP professional version with Microsoft Office 2000.</p>
  <h1>An example usage of COM in AutoIt</h1>
  <p>Let's say you want to minimize all open windows. You could do this using regular AutoIt functions like WinList and WinSetState. However, two lines of COM-code can give you the same result:</p>
@@SyntaxHighlighting@@
Local $oShell = ObjCreate("shell.application")

$oShell.MinimizeAll
@@End@@

  <p>Side note: The example is no longer the shortest way to minimize all windows after the introduction of the WinMinimizeAll() function in AutoIt.</p>
  <p>&nbsp;</p>
  <p>On the first line we create a new object called <span>"shell.application"</span>. This is an internal Windows object, defined in <span>shell32.dll</span>. The pointer to this new object is assigned to the variable $oShell. $oShell is from now on an
  Object variable.</p>
  <p>On the second line, we use a Method called <span>"MinimizeAll"</span> to the oShell object. This will minimize all windows.</p>
  <p>All Windows versions have a huge amount of internal Objects for various purposes. And applications like Excel or Word have also their own set of Objects.</p>
  <p>However, it is sometimes difficult to get a list of all existing Objects defined on your system with their corresponding properties and methods. Searching at Microsoft.com or Google.com might give you some clues about the Object 'X' you want to
  use.</p>
  <p>For instance, you can find information about the <span>"shell.application"</span> object at:<br />
  <a href="http://msdn.microsoft.com/en-us/library/bb774094.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb774094.aspx</a></p>
  <p><br />
  To get a peek on all objects currently installed on your system, the <span>"<strong>OLE/COM Object Viewer</strong>"</span> is a very helpful tool. This tool will be explained in a separate section below.</p>
  <p>Let's do another example. We would like to get a HTML source code from a certain web page. You could use the internal InetGet() function to save the result to a file and retrieve it back again with FileRead(). But these lines of code do the
  same:</p>
@@SyntaxHighlighting@@
Local $oHTTP = ObjCreate("winhttp.winhttprequest.5.1")
$oHTTP.Open("GET", "http://www.AutoItScript.com")
$oHTTP.Send()
$HTMLSource = $oHTTP.Responsetext
@@End@@

  <p>The (string) variable $HTMLSource now contains the complete HTML code of the AutoItScript.com home page (that is, the top HTML-Frame).</p>
  <p>(Information about the <span>"winhttp.winhttprequest"</span> object can be found at:<br />
  <a href="http://msdn.microsoft.com/en-us/library/aa384106.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/aa384106.aspx</a> )</p>
  <p>&nbsp;</p>
  <p><strong>Please mind this:</strong> The existence of Objects depend on the computer's operating system and installed programs. For example, the <span>winhttp.winhttprequest.5.1</span> object only exists on computers that have at least Internet
  Explorer version 5 installed. When you are sharing scripts that use COM objects, be sure the objects exist on all computers.</p>
  <p>Object variables behave a bit different than other types of AutoIt variables. An Object is not a real value, but a 'pointer' to something outside the script. So you can't perform arithmetic's, nor equations on Object variables. When you assign an
  Object variable a different value, the 'pointer' will automatically be released. You can, for instance, force deletion of an Object by assigning it any number or any text value.</p>
@@SyntaxHighlighting@@
Local $oHTTP = ObjCreate("winhttp.winhttprequest.5.1") ; Object is created
$oHTTP = 0 ; Object is deleted
@@End@@

  <p>You don't <strong>need</strong> to delete Objects when you are finished. If a script exits, AutoIt tries to release all active references to Objects that had been created in the script. Same thing happens when you had defined a local Object variable
  inside a function, and the function ends with a return.</p>
  <p>&nbsp;</p>
  <h1>Automation using COM</h1>
  <p>A very popular application of COM is to 'automate' programs. Instead of using the regular AutoIt functions like Send() or WinActivate(), you can make use of the Objects that are defined inside the program.</p>
  <p>Here is an example that 'automates' Microsoft Excel:</p>
@@SyntaxHighlighting@@
Local $oExcel = ObjCreate("Excel.Application") ; Create an Excel Object
$oExcel.Visible = 1 ; Let Excel show itself
$oExcel.WorkBooks.Add ; Add a new workbook
$oExcel.ActiveWorkBook.ActiveSheet.Cells(1, 1).Value = "Text" ; Fill a cell
Sleep(4000) ; Display the results for 4 seconds
$oExcel.ActiveWorkBook.Saved = 1 ; Simulate a save of the Workbook
$oExcel.Quit ; Quit Excel
@@End@@

  <p>The complexity of controlling other programs depends on that specific program, not on the AutoIt script. If something does not work as expected you might need to consult the applications' documentation and not the AutoIt help.</p>
  <p>&nbsp;</p>
  <h1>Special Statements</h1>
  <p>In AutoIt, two special statements are designed for COM usage:</p>
  <p>With/EndWith and the For/In/Next loop.</p>
  <h1>With..EndWith</h1>
  <p>The With/EndWith statement does not add functionality, but it makes your script easier to read. For instance, the previous example using Excel can also be written as:</p>
@@SyntaxHighlighting@@
Local $oExcel = ObjCreate("Excel.Application") ; Create an Excel Object

With $oExcel
	.Visible = 1 ; Let Excel show itself
	.WorkBooks.Add ; Add a new workbook
	.ActiveWorkBook.ActiveSheet.Cells(1, 1).Value = "Text" ; Fill a cell
	Sleep(4000) ; Display the results for 4 seconds
	.ActiveWorkBook.Saved = 1 ; Simulate a save of the Workbook
	.Quit ; Quit Excel
EndWith
@@End@@

  <p>This example does not save you a lot of text, but when your object uses long lines of properties/methods, you can shorten it heavily within a With statement.</p>
  <h1>For..In</h1>
  <p>The FOR...IN loop is required when using Collections. Collections are a special type of Object, that exist out of multiple sub-Objects. You could see them as Arrays (Actually, the For..In statement also works on Array-type variables).</p>
  <h2>For..In loop using an Array</h2>
  <p>Below is an example of an For..In loop. This example uses a normal AutoIt array, so it has nothing to do with COM. It's just to show you the principle:</p>
@@SyntaxHighlighting@@
#include <MsgBoxConstants.au3>

Local $sString = "" ; A string for displaying purposes

Local $aArray[4]
$aArray[0] = "A" ; We fill an array
$aArray[1] = 0 ; with several
$aArray[2] = 1.3434 ; different
$aArray[3] = "Example Text" ; example values.

For $iElement In $aArray ; Here it starts...
	$sString &= $iElement & @CRLF
Next

; Display the results
MsgBox($MB_OK, "For..In Array Example", "Result: " & @CRLF & $sString)
@@End@@

  <h2>For..In loop using an Object</h2>
  <p>In most cases you can't use 'normal' Object methods to retrieve the elements of a collection. In 'COM'-terms they say you have to 'enumerate' them. This is where the For..In loop comes in.</p>
  <p>The Excel example below loops on cells A1:O16 on the current active sheet. If one of the cells has a value less than 5, the code replaces the value with 0 (zero):</p>
@@SyntaxHighlighting@@
Local $oExcel = ObjCreate("Excel.Application") ; Create an Excel Object

$oExcel.Visible = 1 ; Let Excel show itself
$oExcel.WorkBooks.Add ; Add a new workbook

Local $aArray[16][16] ; These lines
For $i = 0 To 15 ; are just
	For $j = 0 To 15 ; an example to
		$aArray[$i][$j] = $i ; create some
	Next ; cell contents.
Next

$oExcel.activesheet.range("A1:O16").value = $aArray ; Fill cells with example numbers

Sleep(2000) ; Wait a while before continuing

For $iCell In $oExcel.ActiveSheet.Range("A1:O16")
	If $iCell.Value < 5 Then
		$iCell.Value = 0
	EndIf
Next

$oExcel.ActiveWorkBook.Saved = 1 ; Simulate a save of the Workbook
Sleep(2000) ; Wait a while before closing
$oExcel.Quit ; Quit Excel
@@End@@

  <p>&nbsp;</p>
  <h1>Advanced COM usage</h1>
  <p>The following features of AutoItCOM requires profound knowledge of COM Events and COM Error handling.</p>
  <p>If you are a newbie to COM programming, please read some good COM documentation first.</p>
  <p>&nbsp;</p>
  <p>The bible of COM is the book called "Inside OLE 2" by Kraig Brockschmidt (Microsoft Press).</p>
  <p>&nbsp;</p>
  <p>You can also find some COM resources on the internet (not AutoIt related):</p>
  <p><a href="http://msdn.microsoft.com/en-us/library/ms694363.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms694363.aspx</a> (introduction)</p>
  <p><a href="http://www.garybeene.com/vb/tut-obj.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" target="_blank">http://www.garybeene.com/vb/tut-obj.htm</a> (about Objects in Visual Basic)</p>
  <p><a href="http://java.sun.com/docs/books/tutorial/java/concepts/" target="_blank">http://java.sun.com/docs/books/tutorial/java/concepts/</a> (Using objects in Java)</p>
  <p><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms686915.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/windows/desktop/ms686915.aspx</a> (Object Events in C++)</p>
  <p><a href="http://www.garybeene.com/vb/tut-err.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" target="_blank">http://www.garybeene.com/vb/tut-err.htm</a> (Error handling in Visual Basic)</p>
  <h1>COM Events</h1>
  <p>Normal COM Automation mainly uses one-way communication. You 'ask' the Object for any properties or results from a Method. However a COM Object can also 'talk back' to your script when it suits it.</p>
  <p>This could be very handy in case you need to wait for some COM-related action to happen.</p>
  <p>Instead of writing a kind of loop, asking the Object if something interesting has happened, you can let the Object itself call a specific UDF in your script. Meanwhile you can do other things in your script (almost) simultaneously.</p>
  <p>&nbsp;</p>
  <p>Not all Object to support events. You have to read the Object documentation carefully whether it supports events or not.</p>
  <p>If it does, the second thing to know is the type of Events it supports. AutoItCOM can only receive 'dispatch' type events.</p>
  <p>Finally you have to know the names of the Events the Object could generate, including their arguments (if any).</p>
  <p>&nbsp;</p>
  <p>Only when you have all this information, you can start building an AutoIt script using COM Events.</p>
  <p>Below is a snippet from a script that demonstrates how to receive Events from the Internet Explorer:</p>
@@SyntaxHighlighting@@
Local $oIE = ObjCreate("InternetExplorer.Application.1") ; Create an Internet Explorer Object

Local $oEventObject = ObjEvent($oIE, "IEEvent_", "DWebBrowserEvents") ; Start receiving Events.

$oIE.url = "http://www.autoitscript.com" ; Load an example web page
; From now on, the $oIE Object generates events during web page load.
; They are handled in the event functions shown below.

; Here you can let the script wait until the user wants to finish.
...(your code here)...

$oEventObject.stop ; Tell IE we want to stop receiving Events
$oEventObject = 0 ; Kill the Event Object
$oIE.quit ; Quit IE
$oIE = 0 ; Remove IE from memory (not really necessary)
Exit ; End of main script

; A few Internet Explorer Event Functions.
;
; For the full list of IE Event Functions, see the MSDN WebBrowser documentation at:
; http://msdn.microsoft.com/en-us/library/aa768400.aspx

Func IEEvent_StatusTextChange($sText)
	; In the complete script (see link below) we show the contents in a GUI Edit box.
	GUICtrlSetData($GUIEdit, "IE Status text changed to: " & $sText & @CRLF, "append")
EndFunc   ;==>IEEvent_StatusTextChange

Func IEEvent_BeforeNavigate($sURL, $iFlags, $sTargetFrameName, $dPostData, $sHeaders, $bCancel)
	; In the complete script (see link below) we show the contents in a GUI Edit box.
	; Note: the declaration is different from the one on MSDN.
	GUICtrlSetData($GUIEdit, "BeforeNavigate: " & $sURL & " Flags: " & $iFlags & @CRLF, "append")
EndFunc   ;==>IEEvent_BeforeNavigate
@@End@@

  <p>Click <a href="IE6Example.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" target="_blank"><strong>here</strong></a> to view the complete script.</p>
  <p>The main line in this script is: <span>$EventObject = <a href="../functions/ObjEvent.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">ObjEvent</a> ($oIE, "IEEvent_", ...)</span>.<br />
  This function takes the object $<span>oIE</span> and reroutes it's events to AutoIt functions whose names start with <span>IEEvent_</span>. The third parameter is optional. It is used when an Object has multiple Event interfaces and you don't want
  AutoIt to choose one automatically.<br />
  <br />
  The Object responsible for the continuous rerouting is <span>$EventObject</span>. This variable does not require any further attention, unless you want to stop the events.</p>
  <p>To stop rerouting Events, you can not just delete the variable like <span>$EventObject = ""</span>. The reason is that the 'calling' Object is still holding a reference to this variable, and it won't loose it until the Object itself quits. You could
  solve this problem by killing the 'calling' Object, but you can also tell the Object that you don't want to receive any events by using: <span>$EventObject.Stop</span>. Then you can (but not really necessary) kill the Event by assigning it any value,
  like: <span>$EventObject = ""</span></p>
  <p>If you know the names of the Events <span>$oIE</span> fires, you can implement the Events you are interested in by creating AutoIt UDF's with the name <span>IEEvent_<em>Eventname</em>(<em>optional arguments</em>)</span>. Be sure you
  use the correct number of arguments and in their correct order as specified for THAT Event function. Otherwise you might end up with unexpected values.</p>
  <p>You don't have to implement ALL event functions. Those not implemented will just be ignored.</p>
  <p>More script examples using COM Event functions can be found via this <a href="http://www.autoitscript.com/autoit3/files/beta/autoit/COM/" target=
  "_blank">URL</a>.</p>
  <p>&nbsp;</p>
  <p><strong>Limitations on COM Events in AutoIt</strong></p>
  <p>Some Objects (like the 'WebBrowser') pass arguments to their Event Functions 'by reference'. This is intended to allow the user change these arguments and passing it back to the Object. However, AutoIt uses its own variable scheme, which is not
  compatible to COM variables. This means that all values from Objects need to be converted into AutoIt variables, thus losing the reference to the original memory space. Maybe in the near future we can solve this limitation for you !</p>
  <h1>COM Error Handling</h1>
  <p>Using COM without proper error handling can be very tricky. Especially when you are not familiar with the Objects in your script.</p>
  <p>Only if there is no way to <strong>prevent</strong> a COM error, you could install an "Error Handler" in which you take action <strong>after</strong> the error has happened. It is <strong>not</strong> a solution to make a buggy script work properly.
  Neither does it catch non-COM related script errors (e.g. declaration and syntax errors).</p>
  <p>Error handling is implemented in the same way as a normal COM Event, using ObjEvent() and a user defined COM Event Function. The only difference is the usage of the fixed string "AutoIt.Error" as the name of the object.</p>
  <p>An example:</p>
@@SyntaxHighlighting@@
#include <MsgBoxConstants.au3>

; Install a custom error handler
; if used in a Function, the handler is automatically disable on return.
; If not installed the script will terminated on error
Local $oMyError = ObjEvent("AutoIt.Error", "ErrFunc")

; Perform a deliberate failure (the object doesn't exist)
Local $oIE = ObjCreate("InternetExplorer.Application")
$oIE.visible = 1
$oIE.bogus
If @error Then
	; checking @error need a custom error handler
	MsgBox($MB_OK, "Error", "There was an error on the previous line.")
EndIf

MsgBox($MB_OK, "", "Script exit") ; this line will not be executed if no handler is installed

Exit

; This is a custom error handler
Func ErrFunc($oError)
	MsgBox($MB_OK, "We intercepted a COM Error !", _
			"Number: 0x" & Hex($oError.number, 8) & @CRLF & _
			"Description: " & $oError.windescription & _
			"At line: " & $oError.scriptline)
EndFunc   ;==>ErrFunc
@@End@@

  <p>&nbsp;</p>
  <p>One thing is special about the Error Event Handler, and that is the Object it returns. This is an AutoIt Error Object that contains some useful properties and methods. It's implementation is partly based on the "Err" Object in VB(script):</p>
  <p>Properties of the AutoIt Error Object:</p>
  <table>
    <tr>
      <td class="c1">.number</td>
      <td class="c2">The Windows HRESULT value from a COM call</td>
    </tr>
    <tr>
      <td>.windescription</td>
      <td>The FormatWinError() text derived from .number</td>
    </tr>
    <tr>
      <td>.source</td>
      <td>Name of the Object generating the error (contents from ExcepInfo.source)</td>
    </tr>
    <tr>
      <td>.description</td>
      <td>Source Object's description of the error (contents from ExcepInfo.description)</td>
    </tr>
    <tr>
      <td>.helpfile</td>
      <td>Source Object's helpfile for the error (contents from ExcepInfo.helpfile)</td>
    </tr>
    <tr>
      <td>.helpcontext</td>
      <td>Source Object's helpfile context id number (contents from ExcepInfo.helpcontext)</td>
    </tr>
    <tr>
      <td>.lastdllerror</td>
      <td>The number returned from GetLastError()</td>
    </tr>
    <tr>
      <td>.scriptline</td>
      <td>The script line on which the error was generated</td>
    </tr>
  </table>
  <p>&nbsp;</p>
  <p><strong>A note for UDF writers</strong></p>
  <p>You can have as many COM Error event handlers as you like. The last registered and alive object is the one that gets called.</p>
  <p>However, you can never stop an existing Error Handler without releasing the variable it had been assigned to. That happens when that variable goes out of scope or gets reassigned.</p>
  <h1>OLE/COM Object Viewer</h1>
  <p>The "OLE/COM Object Viewer" is a very handy tool to get a peek on all COM objects currently installed on your system. It is part of the Windows Server 2003 resource kit (OK for Windows XP and above) and can be downloaded for free from: <a href=
  "http://www.microsoft.com/en-us/download/details.aspx?id=17657" target="_blank">http://www.microsoft.com/en-us/download/details.aspx?id=17657</a></p>
  <p>The setup of this program is a bit awkward. It will not create any start menu icon for you. Instead, a file called <span>oleview.exe</span> will be installed in the <span>C:\Program Files\Resource Kit</span> directory (default install).</p>
  <p>When running <span>oleview.exe</span>, some systems will complain about a missing file called <span>iviewers.dll</span>. This file is required, but strangely enough not included in the latest setup. You can obtain this dll from an older version of
  oleview.exe at: <a href="http://download.microsoft.com/download/2/f/1/2f15a59b-6cd7-467b-8ff2-f162c3932235/ovi386.exe" target="_blank">http://download.microsoft.com/download/2/f/1/2f15a59b-6cd7-467b-8ff2-f162c3932235/ovi386.exe</a>. It will install the
  files by default to the C:\MSTOOLS\BIN directory. You only need the file iviewer.dll. Copy it to the same directory where oleview.exe resides, then register the dll using the command line: <span>regsvr32 iviewers.dll</span>.</p>
  <p>Let's do an example with the Oleviewer. Run it and follow this tree: <span>Object Classes-&gt;Grouped by Component Category-&gt;Control-&gt;Microsoft Web Browser</span>.</p>
  <p>&nbsp;</p>
  <p><img src="../images/oleview1.png" alt=""></p>
  <p>&nbsp;</p>
  <p>In the left-hand pane you see all the COM Interfaces that have been defined for this object. We talk about those later. Take a closer look at the right column. It contains a lot of information about this object that can be useful in an AutoIt script. Most important is the
  "<span>VersionIndependentProgID</span>". This is the name to be used in an <a href="../functions/ObjCreate.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">ObjCreate()</a>, <a href="../functions/ObjGet.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">ObjGet()</a> or <a href="../functions/ObjEvent.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">ObjEvent()</a>. Furthermore it contains the directory and filename that contains the object. This can be an EXE, a DLL or an OCX file.
  <span>InProcServer32</span> means that the object runs in the same thread as your script (in-process). When you see <span>LocalServer32</span>, the object runs as a separate process. The object must also contain a type library (the lines following
  "<span>TypeLib=</span>"), otherwise it can't be used in an AutoIt script.</p>
  <p>The interfaces in the left-hand pane provide various ways of interacting with the object. Some are used for storage (IStorage, IPersist), others for embedding in a GUI (IOleObject, IOleControl). AutoIt uses the <span>IDispatch</span> interface for
  automation. This interface 'exposes' all scriptable methods and properties that the object supports. If there is no IDispatch interface for an object, you can't use the object in an AutoIt script.</p>
  <p>Let's take a look at this interface. Right-click on the name <span>IDispatch</span> and choose "<span>View...</span>" from the context menu. Then click the "<span>View TypeInfo...</span>" button. (Note: if this button is greyed out, you failed to register the iviewers.dll file -- see above., or the object does not have a type library)</p>
  <p>&nbsp;</p>
  <p><img src="../images/oleview2.png" alt=""></p>
  <p>&nbsp;</p>
  <p>The "ITypeInfo Viewer" window shows all the information that has been provided for the object; it may not be complete. If the developer decides not to include a help file, you will only see the names of the method/properties and nothing else. The "Microsoft Web Browser"
  type library is however quite extensive. Just click an item in the left-hand pane, and a description will be shown at the right. Sometimes you have to browse through "<span>Inherited Interfaces</span>" to retrieve more methods for the object.</p>
  <p>The syntax of the described methods/properties are in C/C++ style. A property described as "<span>HRESULT Resizable([in] VARIANT_BOOL pbOffline)</span>", has to be rewritten in AutoIt like: <span>$Resizable=$Object.Resizable</span> ($Object holds
  the object created with ObjCreate or ObjGet).</p>
  <h1>COMmonly mixed up terms</h1>
  <p>These terms are commonly mixed up with COM, but have a different meanings:</p>
  <p>OOP = Object Oriented Programming. A programming technique in which software components are put together from reusable building blocks known as Objects.</p>
  <p>DDE = Dynamic Data Exchange.</p>
  <p>You can say this is the predecessor of COM. It used IPC to transfer information and commands between different applications.</p>
  <p>OLE = Object Linking and Embedding</p>
  <p>In its first version, OLE was an extended version of DDE to 'embed' data from one program into another. The current generation of OLE is built on top of COM and is part of ActiveX.</p>
  <p>Automation = This is a way of manipulating another application's objects. It is used in OLE, ActiveX and COM.</p>
  <p>ActiveX = The next generation OLE with Automation, at first mainly developed to interface between applications over a network (especially web browsers). ActiveX is built on top of COM.</p>
  <p>DCOM = Distributed COM. A slight modification to COM, making it able to communicate between different physical computers.</p>
  <p>.NET (dot Net) = This is not really a piece of software, but an 'idea' from Microsoft to interconnect just about "everything" through (their) software. "dot Net" is used mainly for Web-based services.</p>s
</body>
</html>
