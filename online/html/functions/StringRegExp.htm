<!DOCTYPE html>
<html>
<head>
<title>Funktion StringRegExp</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet">
</head>

<body>
<h1 class="small">Funktionreferenz</h1>
<hr style="height:0px">
<h1 style="float:left; margin:15px 0 0 0; padding:0 0 0 0;">StringRegExp</h1><br />
<a href="../functions_en/StringRegExp.htm"><img src="../images/Flagge_en.gif" height="29" width="36" border=0 hspace=10 style="float:right"/></a><br />
<div style="display:block; text-align:right;">Beschreibung anzeigen in</div><br />
<p style="margin:2px 0 0 0;" class="funcdesc">Pr&uuml;ft, ob ein String dem Suchmuster eines regul&auml;ren Ausdrucks entspricht.<br /></p>
<p class="codeheader">
StringRegExp ( "test", "pattern" [, flag = 0 [, offset = 1]] )<br />
</p>

<h2>Parameter</h2>
<table>
<tr>
<td style="width:15%">test</td>
<td style="width:85%">Die zu pr&uuml;fende Eingabe</td>
</tr>
<tr>
<td>pattern</td>
<td>Das Suchmuster des regul&auml;ren Ausdrucks.</td>
</tr>
<tr>
<td>flag</td>
<td><strong>[optional]</strong> Eine Zahl, die die Verhaltensweise der Funktion bestimmt. Siehe weiter unten f&uuml;r Details. Der Standard ist 0.</td>
</tr>
<tr>
<td>offset</td>
<td><strong>[optional]</strong> Die Position des Strings, wo die Funktion beginnen soll (startet bei 1). Der Standard ist 1.</td>
</tr>
</table><br /><br />
<table>
<tr>
<td style="width:15%"><strong>Flag</strong></td>
<td style="width:85%"><strong>Werte</strong></td>
</tr>
<tr>
<td>$STR_REGEXPMATCH (0)</td>
<td>Ein Pattern f&uuml;hrt zu einem Match oder nicht. (1 oder 0) (Standard).</td>
</tr>
<tr>
<td>$STR_REGEXPARRAYMATCH (1)</td>
<td>Es wird nur der erste SubMatch zu jedem Match ausgegeben (Array).</td>
</tr>
<tr>
<td>$STR_REGEXPARRAYFULLMATCH (2)</td>
<td>Im Ergebnisarray wird an [0] der gesamte erste Match ausgegeben, an [1..n] folgen die SubMatches des ersten Matches.</td>
</tr>
<tr>
<td>$STR_REGEXPARRAYGLOBALMATCH (3)</td>
<td>Im Ergebnisarray werden von allen Matches alle Submatches ausgegeben.</td>
</tr>
<tr>
<td>$STR_REGEXPARRAYGLOBALFULLMATCH (4)</td>
<td>Im Ergebnisarray wird f&uuml;r jeden Match ein Array gespeichert. Diese Arrays enthalten: an [0] den gesamten Match, an [1..n] folgen die SubMatches dieses Matches.</td>
</tr>
</table>Die Konstanten sind in StringConstants.au3 definiert.<br />
<br />


<h2>R&uuml;ckgabewert</h2>
<em>Flag = $STR_REGEXPMATCH (0) :</em><br />
<br />
<table class="noborder">
<tr>
<td style="width:10%" class="valign-top">@error:</td>
<td style="width:90%">Bedeutung</td>
</tr>
<tr>
<td class="valign-top"> 2 :</td>
<td>Falsches Muster. @Extended = Offset des Fehlers im Muster.</td>
</tr>
</table><br />
<br /><br />
<em>Flag = $STR_REGEXPARRAYMATCH (1) oder $STR_REGEXPARRAYFULLMATCH (2) :</em><br />
<br />
<table class="noborder">
<tr>
<td style="width:10%" class="valign-top">@error:</td>
<td style="width:90%">Bedeutung</td>
</tr>
<tr>
<td class="valign-top"> 0:</td>
<td>Array ist g&uuml;ltig. Siehe @extended f&uuml;r die weiteren Offsets &uuml;berpr&uuml;fen.</td>
</tr>
<tr>
<td class="valign-top"> 1:</td>
<td>Array ist ung&uuml;ltig. Keine &Uuml;bereinstimmungen.</td>
</tr>
<tr>
<td class="valign-top"> 2:</td>
<td>Falsches Suchmuster, Array ist ung&uuml;ltig. @Extended = Offset des Fehlers im Muster.</td>
</tr>
</table><br />
<br /><br />
<em>Flag = $STR_REGEXPARRAYGLOBALMATCH (3) oder $STR_REGEXPARRAYGLOBALFULLMATCH (4) :</em><br />
<br />
<table class="noborder">
<tr>
<td style="width:10%" class="valign-top">@error:</td>
<td style="width:90%">Bedeutung</td>
</tr>
<tr>
<td class="valign-top"> 0:</td>
<td>Array ist g&uuml;ltig.</td>
</tr>
<tr>
<td class="valign-top"> 1:</td>
<td>Array ist ung&uuml;ltig. Keine &Uuml;bereinstimmungen.</td>
</tr>
<tr>
<td class="valign-top"> 2:</td>
<td>Falsches Suchmuster, Array ist ung&uuml;ltig. @Extended = Offset des Fehlers im Muster.</td>
</tr>
</table>

<h2>Bemerkungen</h2>
<p>Regul&auml;re Ausdr&uuml;cke sind Strings, in denen einfache Textzeichen angeben, welcher Text in dem Zielstring existieren muss.<br />
Einige Zeichen haben eine besondere Bedeutung, um anzugeben, welche Variabilit&auml;t in dem Zielstring erlaubt ist. F&uuml;r regul&auml;re Ausdr&uuml;cke in AutoIt ist normalerweise die Gro&szlig;-/Kleinschreibung relevant.<br />
Dabei kann man die gefundenen Strings entweder mit <a href="StringRegExp.htm">StringRegExp()</a> extrahieren oder mit <a href="StringRegExpReplace.htm">StringRegExpReplace()</a> ersetzen.<br />
<br />
Dabei sucht die Engine des Parses f&uuml;r die regul&auml;ren Ausdr&uuml;cke nach dem programmartigen Suchmuster und geht zur letzten erfolgreichen Suchstelle zur&uuml;ck, wenn ein Fund nicht mehr dem Format entspricht.<br />
So geht es den gesamten Eingabestring durch und returnt je nach Flag die entsprechenden Ergebnisse.<br />
<br />
Das sogenannte Backtracking ist eines der fundamentalsten Features eines Parsers f&uuml;r regul&auml;re Ausdr&uuml;cke und bereits jeder Programmierneuling sollte es bereits verstehen und t&auml;glich anwenden.<br />
Es hinterl&auml;sst eine spezielle Haltemarke an jeder Weggabelung des Codes und man geht zu jener Haltemarke zur&uuml;ck wenn der aktuelle Codepfad sich als Sackgasse herausstellt.<br />
Man backtrackt so weit zur&uuml;ck bis man entweder den richtigen Punkt findet (hier w&auml;re es eine &Uuml;bereinstimmung) oder bis man jeden Pfad erkundet hat ohne sein Ziel zu erreichen (keine &Uuml;bereinstimmung gefunden).<br />
Das suchen eines Dateinamens mit optionalen Wildcards (*) innerhalb einer Ordnerstruktur ist genau dasselbe.<br />
<br />
AutoIt benutzt die PCRE Engine. PCRE bedeutet "Perl-Compatible Regular Expressions" und ist die umfassenste open-source Engine die verf&uuml;gbar ist.<br />
Diese Implementation bringt die sogenannte Unicode Category Properties (UCP) Unterst&uuml;tzung mit sich, welche es erlaubt die meisten von menschenhand entwickelten Sprachen sehr s&auml;uberlich zu parsen.<br />
Um jedoch Vorg&auml;ngerkompabilit&auml;t zu alten AutoIt-Versionen zu wahren und die Geschwindigkeit der &Uuml;bereinstimmungssuche so hoch wie m&ouml;glich zu halten, <strong>ist der UCP Support standardm&auml;&szlig;ig nicht aktiviert</strong>.<br />
<br />
Diese Seite ist nur eine Zusammenfassung der g&auml;ngigsten Suchmuster. F&uuml;r einen kompletten Einblick der PCRE-Suchmuster, welche in AutoIt implementiert sind, sollte man einen Blick <strong><a href="../pcrepattern.html">auf diese Seite werfen</a></strong>.<br />
Sollte man nicht bereits wissen wie regul&auml;re Ausdr&uuml;cke funktionieren, so sollte man sich vorher die verlinkte Dokumentation gr&uuml;ndlich durchlesen um &uuml;berhaupt im Ansatz zu wissen wie man an regul&auml;re Ausdr&uuml;cke angeht.<br />
<br />
Regul&auml;re Ausdr&uuml;cke werden aus einem oder mehreren der folgenden einfachen Sonderzeichen gebildet. Ist ein Zeichen nicht in der folgenden Tabelle enthalten, dann steht es nur f&uuml;r sich selbst.<br />
<br />
Wiederholungszeichen oder auch Quantifizierer genannt (*, +, ?, {...} ) versuchen die gr&ouml;&szlig;tm&ouml;gliche Entsprechung zu finden, au&szlig;er wenn ihnen direkt ein Fragezeichen folgt; dann wird die kleinstm&ouml;gliche Entsprechung der nachfolgenden Zeichen genommen.<br />
<br />
Verschachtelte Gruppen sind erlaubt, aber es ist zu beachten, dass alle Gruppen dem zur&uuml;ckgegebenen Array zugewiesen werden, wobei die &auml;u&szlig;eren nach den inneren Gruppen ber&uuml;cksichtigt werden. Verwendet man statt der normalen Gruppierung () eine nicht-fangende Gruppierung (?: ... ) oder (?> ... ) wird die Gruppe dem zur&uuml;ckgegebenen Array nicht hinzugef&uuml;gt.<br />
<br />
Alles was in einer runden Klammer "()" steht wird als Gruppe bzw. Subpattern bezeichnet. Der Inhalt mu&szlig; komplett in dem zu pr&uuml;fenden Ausdruck enthalten sein. Alles was eingeklammert wird, wird in SubPatterns geschrieben. Diese k&ouml;nnen dann mit \1,\2...,\n abgerufen werden.<br />
Alles was in einer eckigen Klammer "[]" steht wird als Set bezeichnet. Dort mu&szlig; lediglich ein Zeichen in dem zu pr&uuml;fenden Ausdruck enthalten sein.<br />
<br />
<strong>Achtung</strong>: schlechte regul&auml;re Ausdr&uuml;cke k&ouml;nnen zu einer dauerhaft hohen CPU-Auslastung f&uuml;hren und diese eventuell besch&auml;digen.<br />
<br />
<h3><u>Glossar</u></h3><table>
<tr>
<td style="width:15%"><strong>Pattern</strong></td>
<td style="width:85%">Eine Regel mit der eine Zeichenfolge erkannt wird..</td>
</tr>
<tr>
<td><strong>SubPattern</strong></td>
<td>Ein Pattern kann Suchfolgen enthalten, die separat in einer Gruppe aufgefangen werden..</td>
</tr>
<tr>
<td><strong>Match</strong></td>
<td>Wird mit einem Pattern eine g&uuml;ltige Zeichenfolge erkannt, ist diese der Match.<br />
Je nach Art des Patterns und Inhalt des Teststrings sind mehrere Matches m&ouml;glich.</td>
</tr>
<tr>
<td><strong>SubMatch</strong></td>
<td>Die mittels eines SubPatterns gefundene Zeichenfolge.</td>
</tr>
</table><br />
<h3><u>Globale Einstellungen</u></h3><br />
Diese Einstellungen werden nur am Anfang des Suchmusters wahrgenommen und wirken sich global aus.<br />
<br />
<strong>Zeilenumbruch Konventionen</strong><br />
Zeilenumbruchzeichenfolgen werden wahrgenommen wo die <strong>^</strong> und <strong>$</strong> Anker gefunden werden aber nicht die <strong>\N</strong> und <strong>.</strong> Anker.<br />
Standardm&auml;&szlig;ig ist die Zeichenfolge f&uuml;r einen Zeilenumbruch das Makro @CRLF nicht umbrechbar. Ebenso wenig @CR und @LF alleine.<br />
Diese Einstellung kann ver&auml;ndert werden indem man einer der folgenden Zeichenfolgen an den Anfang des Suchmusters stellt.<table>
<tr>
<td style="width:15%"><strong>(*CR)</strong></td>
<td style="width:85%">Wagenr&uuml;cklauf (@CR).</td>
</tr>
<tr>
<td><strong>(*LF)</strong></td>
<td>Zeilenvorschub (@LF).</td>
</tr>
<tr>
<td><strong>(*CRLF)</strong></td>
<td>Wagenr&uuml;cklauf gefolgt von einem Zeilenvorschub (@CRLF).</td>
</tr>
<tr>
<td><strong>(*ANYCRLF)</strong></td>
<td>Irgendeins der @CRLF, @CR oder @LF Makros. Das ist die standardm&auml;&szlig;ige Zeilenumbruchkonvention.</td>
</tr>
<tr>
<td><strong>(*ANY)</strong></td>
<td>Jegliche Unicode-Zeilenumbruchsfolge: @CRLF, @LF, VT, FF, @CR oder \x85.</td>
</tr>
</table><br />
<strong>Was \R findet</strong><table>
<tr>
<td style="width:15%"><strong>(*BSR_ANYCRLF)</strong></td>
<td style="width:85%">Standardm&auml;&szlig;ig findet <strong>\R</strong> ein @CRLF, @CR oder @LF einzeln.</td>
</tr>
<tr>
<td><strong>(*BSR_UNICODE)</strong></td>
<td>Bewirkt, dass <strong>\R</strong> eins der Unicode-Zeilenumbruchsfolgen findet: @CRLF; @LF, VT, FF, @CR oder \x85.</td>
</tr>
</table><br />
<h3><u>Optionen</u></h3><br />
PCRE-Suchmuster k&ouml;nnen Optionen enthalten welche sich in <strong>(? )</strong> Gruppen befinden. Optionen k&ouml;nnen gruppiert werden, bspw. "(?imx)". Optionen welche einem Bindestrich folgen sind negiert: "(?im-sx)".<br />
Optionen au&szlig;erhalb einer Gruppe wirken sich auf den Rest des Patterns aus der danach noch folgt. Optionen innerhalb einer Gruppe wirken sich nur auf die Gruppe aus.<br />
Des Weiteren verlieren Optionen ihr besondere Bedeutung innerhalb einer Zeichenklasse, in welcher sie als zu suchendes Zeichen behandelt werden.<br />
<table>
<tr>
<td style="width:15%"><strong>(?i)</strong></td>
<td style="width:85%">Ohne Gro&szlig;-/Kleinschreibung: Bei der Auswertung des regul&auml;ren Ausdrucks wird nach dem Flag nicht zwischen Gro&szlig;-/Kleinschreibung unterschieden. Dies wird nicht als Gruppe behandelt.<br />
&nbsp;&nbsp;&nbsp; Wenn UCP aktiviert ist, so wirkt sich die Gro&szlig;-/Kleinschreibung auf die gesamte Unicode Gruppe 0 aus. Standardm&auml;&szlig;ig nur auf die ASCII Zeichen A-Z und a-z.</td>
</tr>
<tr>
<td><strong>(?m)</strong></td>
<td>Multiline: ^ und $ finden Zeilenschaltungen innerhalb der Datenmenge. Standardm&auml;&szlig;ig ist diese Option deaktiviert.</td>
</tr>
<tr>
<td><strong>(?s)</strong></td>
<td>Singleline oder <em>DotAll</em>: <strong>.</strong> findet alle Zeichen, auch Zeilenumbr&uuml;che. Standardm&auml;&szlig;ig findet "." keine Zeilenumbr&uuml;che.</td>
</tr>
<tr>
<td><strong>(?U)</strong></td>
<td>Nicht-Gierig: Kehrt die Standardeinstellung f&uuml;r Gierigkeit der Quantifzierer um und setzt sie auf faul (nicht gierig).<br />
&nbsp;&nbsp;&nbsp; Standardm&auml;&szlig;ig ist die Suche gierig, siehe unten f&uuml;r weitere Erl&auml;uterung.</td>
</tr>
<tr>
<td><strong>(?x)</strong></td>
<td>Extended: Ignoriert Whitespace-Zeichen au&szlig;erhalb von Charakterklassen und <strong>#</strong> beginnt ein Kommentar bis zur n&auml;chsten soliden Zeilenumbruch.<br />
&nbsp;&nbsp;&nbsp; Nichts sagend verbessern die Whitespaces zwischen den Komponenten die Leserlichkeit.<br />
&nbsp;&nbsp;&nbsp; Standardm&auml;&szlig;ig matchen Whitespaces sich selbst und <strong>#</strong> ist ein Zeichen.</td>
</tr>
</table><br />
<h3><u>Zeichen, Metazeichen und Escaping (oder Zitierung)</u></h3><br />
<strong>Zeichen</strong><br />
<br />
Regul&auml;re Ausdr&uuml;cke bestehen aus Unicodetextzeichen welche sich selbst matchen und zudem aus Zeichenklassen die bestimmte Folgen angeben sowie Optionen.<br />
Bestimmte Folgen und Optionen nutzen einige sogenannte <u>Metazeichen</u> welche eine besondere Bedeutung an sich haben oder spezielle Elemente in einem Muster angeben (siehe daf&uuml;r die folgende Tabelle).<br />
In Zeichenfolgen, welche nur den Text finden und keine besonderen Muster, stehen alphanumerische Zeichen immer f&uuml;r sich selbst.<br />
Das bedeutet, dass das Suchmuster: "Standardzeichenfolge mit 中国文字" findet exakt den String "Standardzeichenfolge mit 中国文字". ("中国文字" bedeutet "chinesischer Text".)<br />
Dieses Standardverhalten von Strings oder wie sie als Text und nicht als Muster wahrgenommen werden sollen nennt man auch ein Literal.<br />
<br />
<strong>Repr&auml;sentation einiger Zeichen als Literal</strong><br />
Diese nachfolgenden Sequenzen werden verwendet um einige Zeichen als Literal zu interpretieren.<br />
<table>
<tr>
<td style="width:15%"><strong>\a</strong></td>
<td style="width:85%">Alarmzeichen, gleich dem Kontrollzeichen BEL (Chr(7)).</td>
</tr>
<tr>
<td><strong>\c</strong><em>X</em></td>
<td>Findet ein Kontrollzeichen, basierend auf dem n&auml;chsten Zeichen. Zum Beispiel, <strong>\cM</strong> entspricht Strg-M.<br />
Genau wie \x0D oder \r (Chr(13)).</td>
</tr>
<tr>
<td><strong>\e</strong></td>
<td>Findet ein Escape-Zeichen (chr(27)). <em>Nicht mit dem Escapen eines Zeichens verwechseln!</em></td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td>Findet einen Zeilenvorschub(@LF, chr(10)).</td>
</tr>
<tr>
<td><strong>\r</strong></td>
<td>Findet ein Wagenr&uuml;cklaufzeichen (@CR, chr(13)).</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td>Findet einen Tabulator (chr(9)).</td>
</tr>
<tr>
<td><strong>\</strong><em>ddd</em></td>
<td>Findet Zeichen mit dem Oktalcode ddd, oder einer R&uuml;ckreferenz sofern gefunden.<br />
Findet die vorgegangene Gruppennummer exakt. Beispielsweise <strong>([:alpha:])\1</strong> w&uuml;rde ein Doppelzeichen finden.</td>
</tr>
<tr>
<td><strong>\x</strong><em>hh</em></td>
<td>Findet ein Unicode-Zeichen mit dem Hexwert <em>hh</em>: Beispielsweise ist"\x7E" eine Tilde, "~".</td>
</tr>
<tr>
<td><strong>\x{</strong><em>hhhh</em><strong>}</strong></td>
<td>Findet ein Unicode-Zeichen mit dem Hexwert <em>hhhh</em>: Beispielsweise ist "\x{20AC}" das Eurozeichen, "€" (ChrW(0x20AC)).</td>
</tr>
<tr>
<td><strong>\</strong><em>x</em></td>
<td>wobei <em>x</em> nicht alphanumerisch ist und somit das Literal "x" ist.<br />
Wird verwendet um Metazeichen als Literal zu interpretieren: "\.\[" wird als Punkt gefolgt von einer eckigen Klammer interpretiert also ".[".</td>
</tr>
<tr>
<td><strong>\Q</strong> ... <strong>\E</strong></td>
<td>W&ouml;rtliche Sequence (Verbatim): Metazeichen verlieren ihre spezielle Bedeutung zwischen <strong>\Q</strong> und <strong>\E</strong>.<br />
"\Q(.)\E" findet "(.)". Es ist &auml;quivalent zum Escapen des Charakters (vorhin erw&auml;hnt) und ist einfacher zu lesen als "\(\.\)".</td>
</tr>
</table><br />
PCRE kennt folgende Metazeichen <strong>\ . ^ $ | [ ( { * + ? #</strong> und jedes einzelne davon kann eine oder mehrere Bedeutungen haben welche vom aktuellen Kontext abh&auml;ngt.<br />
Um ein Metazeichen als Literal einzuf&uuml;gen, so muss man das Zeichen Escapen, dies geschieht mit einem einfachen Backslash: "\$" wird zu "$".<br />
Metazeichen werden in sp&auml;ter in einer Untersektion noch weiter besprochen so wie ihre Bedeutungen.<br />
<br />
<h3><u>Zeichentypen</u></h3><table>
<tr>
<td style="width:15%"><strong>.</strong></td>
<td style="width:85%">Findet jedes einzelne Zeichen au&szlig;er, standardm&auml;&szlig;ig, eines Zeilenumbruchs. Findet auch Zeilenumbr&uuml;che wenn die Option <strong>(?s)</strong> aktiviert wurde.</td>
</tr>
<tr>
<td><strong>\d</strong></td>
<td>Findet eine Dezimalziffer (0 bis 9). Auch jegliche Unicodedezimalziffer in jeglicher Sprache sofern UCP aktiviert wurde.</td>
</tr>
<tr>
<td><strong>\D</strong></td>
<td>Findet alles au&szlig;er Ziffern.</td>
</tr>
<tr>
<td><strong>\h</strong></td>
<td>Findet alle waagerechten Whitespace-Zeichen (siehe Tabelle weiter unten).</td>
</tr>
<tr>
<td><strong>\H</strong></td>
<td>Findet alle Zeichen au&szlig;er waagerechte Whitespace-Zeichen.</td>
</tr>
<tr>
<td><strong>\N</strong></td>
<td>Findet alle Zeichen au&szlig;er Zeilenumbr&uuml;che ungeachtet dessen ob die Option <strong>(?s)</strong> aktiviert wurde.</td>
</tr>
<tr>
<td><strong>\p{</strong><em>ppp</em><strong>}</strong></td>
<td>Nur wenn UCP aktiviert wurde: Findet alle Unicode-Zeichen mit der Eigenschaft <em>ppp</em>.<br />
Beispielsweise findet "\b\p{Cyrillic}+" alle kyrillischen W&ouml;rter. "\p{Sc}" jegliches W&auml;hrungssymbol.<br />
Siehe die oben genannte Dokumentation f&uuml;r weitere Erl&auml;uterungen und Details.</td>
</tr>
<tr>
<td><strong>\P{</strong><em>ppp</em><strong>}</strong></td>
<td>Nur wenn UCP aktiviert wurde: Findet alle Unicode-Zeichen die nicht die gegebene Eigenschafft <em>ppp</em> haben.</td>
</tr>
<tr>
<td><strong>\R</strong></td>
<td>Findet alle Unicode-Zeilenumbr&uuml;che standardm&auml;&szlig;ig oder die der aktiven (*BSR_...) Einstellung.<br />
Standardm&auml;&szlig;ig findet <strong>\R</strong> "(?>\r\n|\n|\r)" wobei "(?>...)" eine atomare Gruppe ist welche die Folge "\r\n" (@CRLF) nicht umbrechbar macht.</td>
</tr>
<tr>
<td><strong>\s</strong></td>
<td>Findet alle Whitespace-Zeichen: Chr(9) bis Chr(13), welche Tabulator, Zeilenschaltung, senkrechter Tab, Seitenvorschub, Wagenr&uuml;cklauf und das Leerzeichen sind ( Chr(32) ).</td>
</tr>
<tr>
<td><strong>\S</strong></td>
<td>Findet alles au&szlig;er Whitespace-Zeichen.</td>
</tr>
<tr>
<td><strong>\v</strong></td>
<td>Findet alle vertikalen Whitespace-Zeichen (siehe Tabelle weiter unten).</td>
</tr>
<tr>
<td><strong>\V</strong></td>
<td>Findet alle Zeichen au&szlig;er vertikale Whitespace-Zeichen.</td>
</tr>
<tr>
<td><strong>\w</strong></td>
<td>Findet alle W&ouml;rterzeichen: a-z, A-Z ,0-9 oder Unterstrich (_).</td>
</tr>
<tr>
<td><strong>\W</strong></td>
<td>Findet alle Nicht-W&ouml;rterzeichen.</td>
</tr>
<tr>
<td><strong>\X</strong></td>
<td>Nur wenn UCP aktiviert wurde: findet alle erweiterten Unicode Grapheme Cluster welches eine nicht umbrechbare Sequenz an Codepunkten ist welche ein einziges Zeichen f&uuml;r einen Nutzer darstellen.<br />
&nbsp;&nbsp;&nbsp; Als Konsequenz findet <strong>\X</strong> mehr als ein Zeichen im Eingabestring gegenteilig zu all den anderen Sequenzen in dieser Tabelle.</td>
</tr>
</table><br />
<h3><u>Mengen von Whitespace-Zeichen (Leerzeichen)</u></h3><br />
<strong>Horizontale Whitespace-Zeichen welche von \h gefunden werden</strong><br />
<br />
<strong>\h</strong> ist standardm&auml;&szlig;ig &auml;quivalent zu "[\x09 \xA0]" (oder "[\x09 \xA0\x{1680}\x{180E}\x{2000}-\x{200A}\x{202F}\x{205F}\x{3000}]" when UCP aktiviert wurde.)<br />
Diese Menge besteht aus: Horizontaler Tab (HT), Leerzeichen (Space), nicht-brechendes Leerzeichen<br />
(unter anderem: Ogham Leerzeichen Markierung, Monoglischer Vokalseparator, En quad, Em quad, Em space, Three-per-em space, Four-per-em space, Six-per-em space, Figure space,<br />
Punctuation space, Thin space, Hair space, Narrow no-break space, Medium mathematical space, Ideographic space wenn UCP aktiviert wurde.)<br />
<br />
<strong>Vertikale Whitespace-Zeichen welche von \v gefunden werden</strong><br />
<strong>\v</strong> ist standardm&auml;&szlig;ig &auml;quivalent zu "[\x0A-\x0D]" (oder "[\x0A-\x0D\x{0085}\x{2028}\x{2029}]" wenn UCP aktiviert wurde.)<br />
Diese Menge besteht aus: Zeilenvorschub (LF), Vertikaler Tab (VT), Form feed (FF), Wagenr&uuml;cklauf (CR) (unter anderem: N&auml;chste Zeile (Next Line (NEL)), Zeilenseparator (Line Separator), Paragraph Separator wenn UCP aktiviert wurde.)<br />
<br />
<strong>Whitespace-Zeichen welche von \s gefunden werden</strong><br />
<strong>\s</strong> ist &auml;quivalent zu "[\h\x0A\x0C\x0D]" (ohne \xA0 von \h wenn UCP aktiviert ist)<br />
Diese Menge besteht aus: Allen Zeichen in <strong>\h</strong> und Zeilenvorschub (LF), Form feed (FF), Wagenr&uuml;cklauf (CR).<br />
<br />
<strong>Whitespace-Zeichen welche von [[:space:]] gefunden werden</strong><br />
<strong>[[:space:]]</strong> ist &auml;quivalent zu "\s".<br />
Diese Menge besteht aus: Allen Zeichen in <strong>\s</strong> und dem vertikalen Tab (VT).<br />
<br />
<br />
<h3><u>Zeichenklassen und POSIX Klassen</u></h3><br />
<strong>Zeichenklassen</strong><br />
<br />
Eine Zeichenklasse definiert eine Menge von erlaubten (respektive verbotenen) Zeichen, welches dem n&auml;chsten Zeichen im Eingabestring &uuml;berstimmen (respektive nicht &uuml;bereinstimmen) muss.<br />
Innerhalb einer Zeichenklasse verlieren die meisten der Metazeichen ihre spezielle Bedeutung (wie z.B. $ . oder *) oder bedeuten etwas anderes (wie z.B. ^).<br />
<table>
<tr>
<td style="width:15%"><strong>[</strong> ... <strong>]</strong>                                                                                                                                          </td>
<td style="width:85%">Findet jedes Zeichen in der Menge. <strong>[aeiou]</strong> findet alle kleingeschriebenen Vokale.<br />
Eine zusammenh&auml;ngende Menge kann definiert werden, indem ein Bindestrich zwischen dem ersten und letzten Zeichen gesetzt wird. <strong>[a-z]</strong> findet alle kleingeschriebenen Zeichen.<br />
Um einen Bindestrich in einer Menge einzubeziehen (<strong>-</strong>), ist der Bindestrich als erstes, letztes Zeichen des Sets zu verwenden oder er kann auch escaped werden (\-).<br />
Man sollte beachten, dass das Muster "[A-z]" nicht dasselbe wie "[A-Za-z]": das Vorherige ist &auml;quivalent zu "[A-Z\[\\\]^_`a-z]".<br />
Um eine schlie&szlig;ende Klammer in einer Menge zu verwenden, ist es als erstes Zeichen in der Menge zu verwenden oder man muss ihn escapen: "[][]" und "[\[\]]" werden beide entweder "[" oder "]" finden.<br />
Es ist zu beachten, dass in einer Charakterklasse nur <strong>\d</strong>, <strong>\D</strong>, <strong>\h</strong>, <strong>\H</strong>, <strong>\p{}</strong>, <strong>\P{}</strong>, <strong>\s</strong>, <strong>\Q</strong>...<strong>\E</strong>, <strong>\S</strong>,<br />
<strong>\v</strong>, <strong>\V</strong>, <strong>\w</strong>, <strong>\W</strong>, und <strong>\x</strong> Sequenzen ihre besondere Bedeutung behalten, wobei <strong>\b</strong> gleich dem Backspacezeichen ist (Chr(8)).</td>
</tr>
<tr>
<td><strong>[^</strong> ... <strong>]</strong></td>
<td>Findet alle Zeichen welche <strong>nicht</strong> in der Menge enthalten sind: "[^0-9]" findet alle Nicht-Ziffern.<br />
Um ein Caret (^) in die Menge einzubinden, muss es nach dem Anfang der Menge stehen oder seine Bedeutung muss mittels Escaping aufgehoben werden (\^).</td>
</tr>
</table><br />
<strong>POSIX Klassen</strong><br />
Diese benannten Mengen werden innerhalb einer Charakterklasse verwendet: "[z[:digit:]w-y]" ist &auml;quivalent zu "[w-z0-9]".<br />
Um eine POSIX Klasse zu negieren muss ein Caret (^) nach dem ersten Doppelpunkt stehen: "[[:^digit:]]".<br />
Wenn UCP aktiviert wurde, werden einige POSIX Klassen zu einigen Unicode Charakteruntermengen erweitert werden.<br />
Anderenfalls sind sie standardm&auml;&szlig;ig zu 7-bit ASCII limitiert.<br />
<table>
<tr>
<td style="width:15%"><strong>[:alnum:]</strong></td>
<td style="width:85%">ASCII-Zeichen und Ziffern (die selben wie [^\W_] oder [A-Za-z0-9]).<br />
Wenn UCP aktiviert wurde: Unicode-Zeichen (die selben wie [^\W_] oder \p{Xan}).</td>
</tr>
<tr>
<td><strong>[:alpha:]</strong></td>
<td>ASCII-Zeichen (die selben wie [^\W_] oder [A-Za-z]).<br />
Wenn UCP aktiviert wurde: Unicode-Zeichen (die selben wie [^\W_] oder \p{L}).</td>
</tr>
<tr>
<td><strong>[:ascii:]</strong></td>
<td>ASCII-Zeichen (die selben wie ([\x00-\x7F])).</td>
</tr>
<tr>
<td><strong>[:blank:]</strong></td>
<td>Leerzeichen oder Tab (@TAB) (die selben wie \h oder [\x09\x20]).<br />
Wenn UCP aktiviert wurde: horizontale Unicode-Whitespaces (die selben wie \h).</td>
</tr>
<tr>
<td><strong>[:cntrl:]</strong></td>
<td>ASCII-Kontroll-Zeichen (die selben wie (Chr(0) ... Chr(31) und Chr(127))).</td>
</tr>
<tr>
<td><strong>[:digit:]</strong></td>
<td>ASCII-Dezimalziffern (die selben wie \d oder [0-9]).<br />
Wenn UCP aktiviert wurde: Unicode-Dezimalziffern (die selben wie \d oder \p{Nd}).</td>
</tr>
<tr>
<td><strong>[:graph:]</strong></td>
<td>ASCII-Druck-Zeichen, ohne dem Leerzeichen (die selben wie Chr(33) ... Chr(126)).</td>
</tr>
<tr>
<td><strong>[:lower:]</strong></td>
<td>ASCII-Kleinbuchstaben-Zeichen (die selben wie [a-z])<br />
Wenn UCP aktiviert wurde: Unicode-Kleinbuchstaben-Zeichen (die selben wie \p{L1}).</td>
</tr>
<tr>
<td><strong>[:print:]</strong></td>
<td>ASCII-Druck-Zeichen, mit dem Leerzeichen (die selben wie (Chr(32) ... Chr(126))</td>
</tr>
<tr>
<td><strong>[:punct:]</strong></td>
<td>ASCII-Punkt-Zeichen, [:print:] ohne [:alnum:] und dem Leerzeichen (33-47, 58-64, 91-96, 123-126)</td>
</tr>
<tr>
<td><strong>[:space:]</strong></td>
<td>ASCII-Whitespace-Zeichen (die selben wie [\h\x0A-\x0D]). <strong>[:space:]</strong> ist nicht genau das gleiche wie <strong>\s</strong>: es beinhaltet VT, Chr(11).</td>
</tr>
<tr>
<td><strong>[:upper:]</strong></td>
<td>ASCII-Gro&szlig;buchstaben-Zeichen (die selben wie [A-Z]).<br />
Wenn UCP aktiviert wurde: Unicode-Gro&szlig;buchstaben-Zeichen (die selben wie \p{Lu}).</td>
</tr>
<tr>
<td><strong>[:word:]</strong></td>
<td>ASCII-"Wort"-Zeichen (die selben wie \w oder [[:alnum:]_]).<br />
Wenn UCP aktiviert wurde: Unicode-"Wort"-Zeichen (die selben wie \w oder [[:alnum:]_] oder \p{XwD}).</td>
</tr>
<tr>
<td><strong>[:xdigit:]</strong></td>
<td>Hexadezimale Ziffern (die selben wie [0-9A-Fa-f]).</td>
</tr>
</table><br />
<h3><u>Gruppen</u></h3><br />
Gruppen werden verwendet um Untermuster zu trennen und sind essenzielle Bestandteile m&auml;chtiger regul&auml;rer Ausdr&uuml;cke.<br />
Gruppen k&ouml;nnen entweder fangend (abspeichernd, capturing) oder ignorierend sein und k&ouml;nnen ungeachtet ihrer Natur (bis auf Kommentargruppen) geschachtelt werden.<br />
Ein regul&auml;rer Ausdruck darf bis zu 65535 (2^16 - 1) fangende Gruppen enthalten.<br />
Optionszeichen (bereits erw&auml;hnt) k&ouml;nnen einfach zwischen "?" und dem ":" einer nicht-fangenden Gruppe eingef&uuml;gt werden:<br />
"(?-i:[aeiou]{5})" findet f&uuml;nf kleingeschriebene Vokale. In diesem Fall sind die Optionen nur lokal in der Gruppe angewendet und nicht global.<br />
<table>
<tr>
<td style="width:15%"><strong>(</strong> ... <strong>)</strong></td>
<td style="width:85%">Gruppe. Die Elemente in der Gruppe werden in Reihenfolge bearbeitet und k&ouml;nnen zusammen wiederholt werden.<br />
&nbsp;&nbsp;&nbsp; Zum Beispiel entspricht"(ab)+c" "abc" oder "ababc", aber nicht "abac". Eine Gruppe speichert auch den Text ab, der mit der Menge &uuml;bereinstimmt,<br />
&nbsp;&nbsp;&nbsp; um ihn bei einem R&uuml;ckverweis und in dem R&uuml;ckgabearray der Funktion zu benutzen, abh&auml;ngig von dem Flag-Parameter.<br />
&nbsp;&nbsp;&nbsp; Sie werden nummeriert beginnend von der 1 in der Reihenfolge wie ihre Klammer&ouml;ffnungen sind.<br />
&nbsp;&nbsp;&nbsp; Gruppen k&ouml;nnen auch als Unterroutinen in einem anderen Bereich des Musters behandelt werden, sogar rekursiv.</td>
</tr>
<tr>
<td><strong>(?&lt;</strong><em>name</em><strong>&gt;</strong> ... <strong>)</strong></td>
<td>Benannte Gruppe. Kann sp&auml;ter mittels Name sowie als Nummer referenziert werden.<br />
&nbsp;&nbsp;&nbsp; Es sollte vermieden werden den Namen "DEFINE" zu verwenden (Siehe "Bedinge Muster").</td>
</tr>
<tr>
<td><strong>(?:</strong> ... <strong>)</strong></td>
<td>Nicht-fangende Gruppe. Speichert keine der &uuml;bereinstimmenden Zeichen im Array und kann nicht als R&uuml;ckreferenz verwendet werden.</td>
</tr>
<tr>
<td><strong>(?|</strong> ... <strong>)</strong></td>
<td>Nicht-fangende Gruppe mit Reset. Setzt die Gruppe in jeder Top-Level-Alternative (h&ouml;chste Klammerung) zur&uuml;ck:"<br />
&nbsp;&nbsp;&nbsp; "(?|(Mon)|(Tue)s|(Wed)nes|(Thu)rs|(Fri)|(Sat)ur|(Sun))day" findet einen Wochentag und ihre Abk&uuml;rzung in der Gruppennummer 1.</td>
</tr>
<tr>
<td><strong>(?></strong> ... <strong>)</strong></td>
<td>Atomare nicht-fangende Gruppe: Speert und backtrackt von dem was gefunden wurde. (Siehe Quantifizierer und Gierigkeit weiter unten.)<br />
&nbsp;&nbsp;&nbsp; Atomare Gruppen, wie besitzergreifende Quantifizierer, sind immer gierig.</td>
</tr>
<tr>
<td><strong>(?#</strong> ... <strong>)</strong></td>
<td>Kommentargruppe: Werden immer ignoriert (darf keine geschlossene Klammern ")" enthalten, aus diesem Grunde sind sie auch nicht schachtelbar).</td>
</tr>
</table><br />
<h3><u>Quantifizierer und Gierigkeit</u></h3><br />
Quantifizierer (oder Wiederholungsspezifizierer) geben an wie viele vorangehende Zeichen, Klassen, Referencen oder Gruppen gefunden werden sollen.<br />
Optionale Gierigkeit gibt an wie aggressiv sich die Wiederholung verhalten soll. Beispielsweise findet "\d{3,5}" mindestens drei aber nicht mehr als f&uuml;nf Dezimalziffern.<br />
Standardm&auml;&szlig;ig sind die Muster "<u>gierig</u>", was bedeutet, dass Quantifizierer wie <strong>* + ? {</strong>...<strong>}</strong> den l&auml;ngsten String finden welcher noch den Rest des Musters erf&uuml;llt.<br />
Gierigkeit kann f&uuml;r das gesamte Muster invertiert werden indem man die Option (?U) am Anfang ds Musters angibt oder lokal indem man ein Fragezeichen "?" nach einem Quantifizierer setzt.<br />
nicht-gieriger (<u>faul</u>) Wiederholungen werden den kleinsten m&ouml;glichen String finden welcher noch den Rest des Musters erf&uuml;llt.<br />
Bei einem Eingabestring von "aaab" wird das Muster "(a*)([ab]+)" "aaa" finden und dann "b" aber "(?U)(a*)([ab]+)" findet "" dann "a":<br />
Ein leerer String ist genug um das faule "(a*)" zu erf&uuml;llen und das gefangene "a" wird vom "([ab]+)" Untermuster gefunden.<br />
<br />
Besitzergreifende Quantifizierer sind atomar und gierig. Sie sind eine Abk&uuml;rzung f&uuml;r simple atomare Gruppen.<br />
"\d++" ist eine Abk&uuml;rzung f&uuml;r "(?>\d+)" und dessen Verhalten ist "finde eine komplette Sequenz von einer oder mehreren Ziffern aber gib niemals eins davon zur&uuml;ck".<br />
In Konsequenz kann "\d++<strong>(\d</strong>)" niemals die letzte Ziffer (in fetter Schriftart) finden, da das letzte Zeichen bereits gefunden und von "\d++" gesperrt wurde.<br />
<br />
Dies in Betrachtung mit der einfachen Gierigkeit, wo "\d+(\d)" erst die komplette Sequenz mit Ziffern mit "\d+" findet aber dann das letzte backtrackt um "<strong>(\d)</strong>" zu erlauben, dass es es fangen kann.<br />
Es gibt mehr als zwei Gr&uuml;nde um atomare Gruppen oder besitzergreifende Quantifizierer zu nutzen:<br />
Entweder um eine Folge von Zeichen zu finden welche auch individuell auftauchen k&ouml;nnen (z.B. "\r\n" in der Definition von <strong>\R</strong>),<br />
oder um das schnelle Scheitern der Engine herbeizuf&uuml;hren wo man ungebundene Wiederholungen verwendet damit die Engine nicht sehr gro&szlig;e Gruppen sucht und dann scheitert.<br />
<table>
<tr>
<td style="width:15%"><strong>?</strong></td>
<td style="width:85%">0 oder 1, gierig.</td>
</tr>
<tr>
<td><strong>?+</strong></td>
<td>0 oder 1, besitzergreifend.</td>
</tr>
<tr>
<td><strong>??</strong></td>
<td>0 oder 1, faul.</td>
</tr>
<tr>
<td><strong>*</strong></td>
<td>0 oder mehr, gierig.</td>
</tr>
<tr>
<td><strong>*+</strong></td>
<td>0 oder mehr, besitzergreifend.</td>
</tr>
<tr>
<td><strong>*?</strong></td>
<td>0 oder mehr, faul.</td>
</tr>
<tr>
<td><strong>+</strong></td>
<td>1 oder mehr, gierig.</td>
</tr>
<tr>
<td><strong>++</strong></td>
<td>1 oder mehr, besitzergreifend.</td>
</tr>
<tr>
<td><strong>+?</strong></td>
<td>1 oder mehr, faul.</td>
</tr>
<tr>
<td><strong>{</strong><em>x</em><strong>}</strong></td>
<td>genau <em>x</em>.</td>
</tr>
<tr>
<td><strong>{</strong><em>x</em><strong>,</strong><em>y</em><strong>}</strong></td>
<td>mindestens <em>x</em> und nicht mehr als <em>y</em>, gierig.</td>
</tr>
<tr>
<td><strong>{</strong><em>x</em><strong>,</strong><em>y</em><strong>}+</strong></td>
<td>mindestens <em>x</em> und nicht mehr als <em>y</em>, besitzergreifend.</td>
</tr>
<tr>
<td><strong>{</strong><em>x</em><strong>,</strong><em>y</em><strong>}?</strong></td>
<td>mindestens <em>x</em> und nicht mehr als <em>y</em>, faul.</td>
</tr>
<tr>
<td><strong>{</strong><em>x</em><strong>,}</strong></td>
<td><em>x</em> oder mehr, gierig.</td>
</tr>
<tr>
<td><strong>{</strong><em>x</em><strong>,}+</strong></td>
<td><em>x</em> oder mehr, besitzergreifend.</td>
</tr>
<tr>
<td><strong>{</strong><em>x</em><strong>,}?</strong></td>
<td><em>x</em> oder mehr, faul.</td>
</tr>
</table><br />
<h3><u>Verschiebung (Alternation)</u></h3><table>
<tr>
<td style="width:15%"><em>X</em><strong>|</strong><em>Y</em></td>
<td style="width:85%">Findet entweder das Untermuster <em>X</em> oder <em>Y</em>: "ab|dc|ground" findet "ac" oder "dc" oder "ground".</td>
</tr>
</table><br />
<h3><u>R&uuml;ckreferenzen und Referenzen zu Unterroutinen</u></h3><br />
<strong>R&uuml;ckreferenzen</strong> erlauben es einem den Inhalt einer vorgegangenen gefangenen Gruppe zu nutzen.<br />
<table>
<tr>
<td style="width:15%"><strong>\</strong><em>n</em></td>
<td style="width:85%">Referenziert eine vorgegangene Gruppe durch ihre absolute Nummer. <br />
&nbsp;&nbsp;&nbsp; Warnung: Wenn die Gruppennummer <em>n</em> nicht existiert, wird es als Zeichen mit einem Wert <em>n</em> behandelt. Sofern <em>n</em> keine g&uuml;ltige Oktalzahl ist erfolgt ein Error.<br />
&nbsp;&nbsp;&nbsp; Aufgrund dieser Mehrdeutigkeit ist diese Form nicht zu empfehlen. Die nachfolgenden Formen sind eher zu bevorzugen.</td>
</tr>
<tr>
<td><strong>\g</strong><em>n</em></td>
<td>Referenziert eine vorgegangene Gruppe durch ihre absolute Nummer.</td>
</tr>
<tr>
<td><strong>\g{</strong><em>n</em><strong>}</strong></td>
<td>Referenziert eine vorgegangene Gruppe durch ihre absolute Nummer. &Auml;hnlich wie das obere aber hier wird deutlich wo <em>n</em> beginnt und aufh&ouml;rt:<br />
&nbsp;&nbsp;&nbsp; Hilfreich wenn die folgenden Zeichen Ziffern sind.</td>
</tr>
<tr>
<td><strong>\g-</strong><em>n</em></td>
<td>Referenziert eine vorgegangene Gruppe durch ihre relative Nummer.</td>
</tr>
<tr>
<td><strong>\k&lt;</strong><em>name</em><strong>&gt;</strong></td>
<td>Referenziert eine vorgegangene durch ihren Namen.</td>
</tr>
</table><br />
<strong>Referenzen zu Unterroutinen</strong><br />
Fangende Gruppen sind Untermuster welche aufgerufen werden k&ouml;nnen (auch rekursiv) genau wie eine Subroutine in einer Programmiersprache. In AutoIt w&auml;re das beispielsweise eine Funktion.<br />
Das Untermuster wird einfach am aktuellen Punkt neu ausgef&uuml;hrt. Siehe Referenzdokumentation f&uuml;r Details und Beispiele.<br />
<table>
<tr>
<td style="width:15%"><strong>(?R)</strong> or <strong>(?0)</strong></td>
<td style="width:85%">F&uuml;hrt das gesamte Suchmuster rekursiv neu aus.</td>
</tr>
<tr>
<td><strong>(?</strong><em>n</em><strong>)</strong></td>
<td>Ruft ein Untermuster durch ihre absolute Nummer auf.</td>
</tr>
<tr>
<td><strong>(?+</strong><em>n</em><strong>)</strong></td>
<td>Ruft ein Untermuster durch ihre relative Nummer auf.</td>
</tr>
<tr>
<td><strong>(?-</strong><em>n</em><strong>)</strong></td>
<td>Ruft ein Untermuster durch ihre relative Nummer auf.</td>
</tr>
<tr>
<td><strong>(?&</strong><em>name</em><strong>)</strong></td>
<td>Ruft ein Untermuster durch ihren Namen auf.</td>
</tr>
</table><br />
<h3><u>Anker (Anchors) und Behauptungen (Assertions)</u></h3><br />
Anker und Behauptungen sind tests die an der aktuellen Abfrageposition nichts ver&auml;ndern und dadurch weder Zeichen verschlingen oder welche fangen.<br />
<br />
Ein <strong>Anker</strong> testet die Position an der aktuellen Abfrageposition.<br />
<table>
<tr>
<td style="width:15%"><strong>^</strong></td>
<td style="width:85%">Das Caret-Zeichen findet au&szlig;erhalb einer Charakterklasse den Start des Eingabestrings und den Beginn einer neuen Zeile nach einem nicht-finalen Zeilenumbruch (nicht-final bedeutet, das danach noch Text folgt) sofern die Option <strong>(?m)</strong> aktiv ist.<br />
Standardm&auml;&szlig;ig ist die Zeilenumbruchsfolge der Wagenr&uuml;cklauf @CRLF.<br />
Innerhalb einer Charakterklasse komplementiert das Caret <strong>^</strong> die Klasse indem es alle Buchstaben die danach folgen nicht findet.</td>
</tr>
<tr>
<td><strong>$</strong></td>
<td>Au&szlig;erhalb einer Charakterklasse findet das Dollar-Zeichen das Ende des Eingabestrings oder das Ende einer Zeile markiert durch einen Zeilenumbruch sofern <strong>(?m)</strong> aktiv ist.<br />
Innerhalb einer Charakterklasse wird das <strong>$</strong> als Literal behandelt und hat keine spezielle Bedeutung.</td>
</tr>
<tr>
<td><strong>\A</strong></td>
<td>Findet nur am absoluten Anfang des Eingabestrings unabh&auml;ngig von der multiline-Option <strong>(?m)</strong>. Findet nie wenn der Offset nicht 1 ist.</td>
</tr>
<tr>
<td><strong>\G</strong></td>
<td>Findet nur wenn die aktuelle Position die Position des ersten Fundes im Eingabestring ist.</td>
</tr>
<tr>
<td><strong>\z</strong></td>
<td>Findet nur am Ende des Eingabestrings unabh&auml;ngig von der multiline-Option <strong>(?m)</strong>.</td>
</tr>
<tr>
<td><strong>\Z</strong></td>
<td>Findet nur am Ende des Eingabestrings oder vor einem Zeilenumbruch am Ende unabh&auml;ngig von der multiline-Option <strong>(?m)</strong>.</td>
</tr>
</table><br />
Eine <strong>Behauptungen</strong> testet die Zeichen vorangehend (look-behind), am (Wortgrenze, word boundary) oder folgend (look-ahead) der aktuellen Abfrageposition.<br />
<table>
<tr>
<td style="width:15%"><strong>\b</strong></td>
<td style="width:85%">Findet bei Wortgrenze. Das hei&szlig;t zwischen Zeichen und nicht beide <strong>\w</strong> oder <strong>\W</strong>. Siehe <strong>\w</strong> f&uuml;r die Bedeutung des Kennzeichners "Wort".<br />
Innerhalb einer Charakterklasse bedeutet <strong>\b</strong> ein Backspace (Chr(8)).</td>
</tr>
<tr>
<td><strong>\B</strong></td>
<td>Findet wenn es nicht an der Wortgrenze ist.</td>
</tr>
<tr>
<td><strong>(?=</strong><em>X</em><strong>)</strong></td>
<td>Positiv Folgend: Findet, wenn das Untermuster <em>X</em> an der aktuellen Abfrageposition &uuml;bereinstimmt.</td>
</tr>
<tr>
<td><strong>(?!</strong><em>X</em><strong>)</strong></td>
<td>Negativ Folgend: Findet, wenn das Untermuster <em>X</em> an der aktuellen Abfrageposition nicht &uuml;bereinstimmt.</td>
</tr>
<tr>
<td><strong>(?&lt;=</strong><em>X</em><strong>)</strong></td>
<td>Positiv Vorangehend: Findet, wenn das Untermuster <em>X</em> an den vorangehenden Zeichen &uuml;bereinstimmt.<br />
&nbsp;&nbsp;&nbsp; Das Untermuster <em>X</em> muss eine feste L&auml;nge besitzen und darf nicht undefinierte Quantifizierer wie <strong>* + oder ? </strong> enthalten.</td>
</tr>
<tr>
<td><strong>(?&lt;!</strong><em>X</em><strong>)</strong></td>
<td>Negativ Vorangehend: Findet, wenn das Untermuster <em>X</em> an den vorangehenden Zeichen nicht &uuml;bereinstimmt.<br />
&nbsp;&nbsp;&nbsp; Das Untermuster <em>X</em> muss eine feste L&auml;nge besitzen und darf nicht undefinierte Quantifizierer wie <strong>* + oder ? </strong> enthalten.</td>
</tr>
</table><br />
<h3><u>Zur&uuml;cksetzung des Fundes (Reset)</u></h3><br />
Es kann vorkommen, dass es notwendig ist das bisher gefundene zu verwerfen um relevantere Daten sp&auml;ter im Eingabestring zu finden.<br />
<table>
<tr>
<td style="width:15%"><strong>\K</strong></td>
<td style="width:85%">Setzt den Beginn eines Fundes an die aktuelle Abfrageposition im Eingabestring. Man sollte dabei beachten, dass bereits gefangene Gruppen nun alleine stehen und immer noch im R&uuml;ckgabearray auftauchen und<br />
&nbsp;&nbsp;&nbsp; dadurch ist es m&ouml;glich sie sp&auml;ter auch zu referenzieren. Die Aktion durch <strong>\K</strong> ist &auml;hnlich aber nicht identisch zum vorangehenden Vorgehensweise (look-behind) und unterscheidet sich darin,<br />
&nbsp;&nbsp;&nbsp; dass <strong>\K</strong> mit verschiedenen L&auml;ngen arbeiten kann.</td>
</tr>
</table><br />
<h3><u>Bedingte Muster</u></h3><br />
Diese Konstrukte sind &auml;hnlich zu <strong><em>If...EndIf</em></strong> und <strong><em>If...Else...EndIf</em></strong> Verzweigungen.<br />
<table>
<tr>
<td style="width:15%"><strong>(?</strong><em>(Bedingung)yes-pattern</em><strong>)</strong></td>
<td style="width:85%">Erlaubt die bedingte Ausf&uuml;hrung eines Musters.</td>
</tr>
<tr>
<td><strong>(?</strong><em>(Bedingung)erf&uuml;llendes-Muster</em><strong>|</strong><em>nicht-erf&uuml;llendes-Muster</em><strong>)</strong></td>
<td>W&auml;hlt zwischen zwei bestimmten Mustern je nachdem Ergebnis der <em>(Bedingung)</em>.</td>
</tr>
</table><table>
<tr>
<td style="width:15%"><strong>(</strong><em>n</em><strong>)</strong></td>
<td style="width:85%">Testet, ob die gefangene Gruppe mit einer absoluten Nummer <em>n</em> gefunden wurde.</td>
</tr>
<tr>
<td><strong>(+</strong><em>n</em><strong>)</strong></td>
<td>Testet, ob die gefangene Gruppe mit einer relativen Nummer <em>+n</em> gefunden wurde.</td>
</tr>
<tr>
<td><strong>(-</strong><em>n</em><strong>)</strong></td>
<td>Testet, ob die gefangene Gruppe mit einer relativen Nummer <em>-n</em> gefunden wurde.</td>
</tr>
<tr>
<td><strong>(&lt;</strong><em>name</em><strong>&gt;)</strong></td>
<td>Testet, ob die gefangene Gruppe mit dem Namen <em>name</em> gefunden wurde.</td>
</tr>
<tr>
<td><strong>(R)</strong></td>
<td>Testet, ob eine Rekursion stattfand.</td>
</tr>
<tr>
<td><strong>(R</strong><em>n</em><strong>)</strong></td>
<td>Testet, ob die letzte Rekursion f&uuml;r eine gefangene Gruppe mit der absoluten Nummer <em>n</em> war.</td>
</tr>
<tr>
<td><strong>(R&amp;</strong><em>name</em><strong>)</strong></td>
<td>Testet, ob die letzte Rekursion f&uuml;r eine gefangene Gruppe mit dem Namen <em>name</em> war.</td>
</tr>
<tr>
<td><strong>(DEFINE)</strong></td>
<td>Wird <em>ohne</em> Pattern benutzt und erlaubt die Zuweisung der Unterroutine von woanders.<br />
"(?x) (?(DEFINE) (?&lt;byte&gt; 2[0-4]\d | 25[0-5] | 1\d\d | [1-9]?\d) )" definiert die Unterroutine "byte" welche eine der Komponenten einer IPv4-Adresse findet.<br />
Die eigentliche Adresse kann mit "\b (?&amp;byte) (\.(?&amp;byte)){3} \b" gefunden werden.</td>
</tr>
<tr>
<td><strong>(</strong><em>assertion</em><strong>)</strong></td>
<td>Hier ist <em>assertion</em> ist entweder eine positive oder negative, vorangehende (look-behind) oder folgende (look-ahead) Assertion (Behauptung).</td>
</tr>
</table><br />
<h3><u>Diverse fortgeschrittenere Features</u></h3><br />
Diese Optionen, die Escapes und die Konstrukte werden hier nur genannt, f&uuml;r eine Erl&auml;uterung warum, wie und wann man sie nutzen sollte siehe die Referenzdokumentation.<br />
<br />
<strong>Ungew&ouml;hnliche Einstellungen und Optionen</strong><br />
<table>
<tr>
<td style="width:15%"><strong>(?J)</strong></td>
<td style="width:85%">Erlaubt Dubletten in Gruppen- und Unterroutinennamen (hier nicht weiter erl&auml;utert).</td>
</tr>
<tr>
<td><strong>(?X)</strong></td>
<td>Verursacht Fehler durch einige out-of-context Sequenzen.</td>
</tr>
<tr>
<td><strong>(*J)</strong></td>
<td>Aktiviert die Javascript-Kompatibilit&auml;t (hier nicht weiter erl&auml;utert).</td>
</tr>
<tr>
<td><strong>(*LIMIT_MATCH=</strong><em>n</em><strong>)</strong></td>
<td>Limitiert die Anzahl der Funde auf <em>n</em>.</td>
</tr>
<tr>
<td><strong>(*LIMIT_RECURSION=</strong><em>n</em><strong>)</strong></td>
<td>Limitiert die maximale Rekursionstiefe auf <em>n</em>.</td>
</tr>
<tr>
<td><strong>(*NO_START_OPT)</strong></td>
<td>Deaktiviert einige Optimierungen (hier nicht weiter erl&auml;utert).</td>
</tr>
</table><br />
<strong>Backtracking Steuerung</strong><table>
<tr>
<td style="width:15%"><strong>(*ACCEPT)</strong></td>
<td style="width:85%">Erzwingt einen sofortigen Sucherfolg in der aktuellen Unterroutine oder im Top-Level-Muster (dem h&ouml;chsten).</td>
</tr>
<tr>
<td><strong>(*FAIL)</strong> or <strong>(*F)</strong></td>
<td>Erzwingt einen sofortigen Suchmisserfolg.</td>
</tr>
<tr>
<td><strong>(*MARK:</strong><em>name</em><strong>)</strong> or <strong>(*:</strong><em>name</em><strong>)</strong></td>
<td><em>(Siehe Referenzdokumentation.)</em></td>
</tr>
<tr>
<td><strong>(*COMMIT)</strong></td>
<td><em>(Siehe Referenzdokumentation.)</em></td>
</tr>
<tr>
<td><strong>(*PRUNE)</strong></td>
<td><em>(Siehe Referenzdokumentation.)</em></td>
</tr>
<tr>
<td><strong>(*PRUNE:</strong><em>name</em><strong>)</strong></td>
<td><em>(Siehe Referenzdokumentation.)</em></td>
</tr>
<tr>
<td><strong>(*SKIP)</strong></td>
<td><em>(Siehe Referenzdokumentation.)</em></td>
</tr>
<tr>
<td><strong>(*SKIP:</strong><em>name</em><strong>)</strong></td>
<td><em>(Siehe Referenzdokumentation.)</em></td>
</tr>
<tr>
<td><strong>(*THEN)</strong></td>
<td><em>(Siehe Referenzdokumentation.)</em></td>
</tr>
<tr>
<td><strong>(*THEN:</strong><em>name</em><strong>)</strong></td>
<td><em>(Siehe Referenzdokumentation.)</em></td>
</tr>
</table><br />
<h3><u>Allgemeinte Kommentare &uuml;ber regul&auml;re Ausdr&uuml;cke in AutoIt</u></h3><br />
&nbsp;&nbsp;&nbsp; 1. Wenn UCP aktiviert ist wirkt sich die Gro&szlig;-/Kleinschreibung auf das gesamte Unicode Gruppe 0 aus, standardm&auml;&szlig;ig nur auf die ASCII-Zeichen A-Z und a-z.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Es existiert eine kleine Anzahl an viele-zu-einen (many-to-one) Verkn&uuml;pfungen in Unicode wie z.B. das kleine griechische Sigma, diese werden durch PCRE mit UCP aktiviert unterst&uuml;tzt.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; 2. Es existieren verschiedene Formen f&uuml;r das Escapen um eine Kompatibilit&auml;t mit Perl, Ruby, Python, Javascript, .NET und anderen Engines herzustellen.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Man sollte auf keinen Fall keine Konstrukte verwenden welche hier nicht aufgez&auml;hlt wurden, denn einige funktionieren schlicht nicht, einige liefern falsche Resultate und einige bergen gro&szlig;e Fehler oder st&uuml;rzen ab.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; 3. Die Standard-Zeilenumbruch-Konventionen ist die nicht-umbrechbare Sequenz @CRLF oder ein separates @CR bzw. @LF.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Auf &auml;hnliche Weise findet \R seine Gruppen durch die selbe Menge.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Man sollte immer wissen was man als Eingabestring nimmt. Bedeutet der Wagenr&uuml;cklauf (@CR) bzw. der Zeilenvorschub (@LF) was anderes als ihre eigentliche Bedeutung,<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; so sollte man eventuell die Zeilenumbruchskonvention anpassen oder die Bedeutung des \R (siehe "Einstellungen").<br />
<br />
Siehe auch das <a href="../tutorials/regexp/regexp.htm">Regul&auml;re Ausdr&uuml;cke Tutorial</a> in welchem man ein Script zum testen der eigenen regul&auml;ren Ausdr&uuml;cke ausf&uuml;hren kann.<br />
</p>

<h2>Verwandte Funktionen</h2>
<p><a href="StringInStr.htm">StringInStr</a>, <a href="StringRegExpReplace.htm">StringRegExpReplace</a></p>

<h2 class="bottom">Beispiel</h2>
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
function copyToClipboard(section) {
if (window.clipboardData && clipboardData.setData) {
clipboardData.setData("text", section + "\r\n");
alert("Das Beispiel wurde in die Zwischenablage kopiert");
}
}
</script>
<h3>Beispiel 1</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp.au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext1\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext1">
<pre>
<span><span class="S1">; Option 1, Verwendung eines Offsets</span>

<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;MsgBoxConstants.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;StringConstants.au3&gt;</span>

<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$aArray</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S8">,</span><span class="S0"> </span><span class="S8">_</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S9">$iOffset</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">1</span>

<a class="codeSnippetLink" href="../keywords/While.htm"><span class="S5">While</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S9">$aArray</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S7">'&lt;test&gt;a&lt;/test&gt; &lt;test&gt;b&lt;/test&gt; &lt;test&gt;c&lt;/Test&gt;'</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'(?i)&lt;test&gt;(.*?)&lt;/test&gt;'</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$STR_REGEXPARRAYMATCH</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$iOffset</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/If.htm"><span class="S5">If</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@error"><span class="S6">@error</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Then</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/ExitLoop.htm"><span class="S5">ExitLoop</span></a>
<span class="S0">&nbsp; &nbsp; </span><span class="S9">$iOffset</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@extended"><span class="S6">@extended</span></a>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">For</span></a><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">To</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/UBound.htm"><span class="S4">UBound</span></a><span class="S8">(</span><span class="S9">$aArray</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"RegExp-Test mit Option 1 - "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$i</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$aArray</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">])</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">Next</span></a>
<a class="codeSnippetLink" href="../keywords/While.htm"><span class="S5">WEnd</span></a>
<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 2</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[02].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext2\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext2">
<pre>
<span><span class="S1">; Option 2, einfacher R&uuml;ckgabewert, php/preg_match()-Stil</span>

<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;MsgBoxConstants.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;StringConstants.au3&gt;</span>

<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$aArray</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S7">'&lt;test&gt;a&lt;/test&gt; &lt;test&gt;b&lt;/test&gt; &lt;test&gt;c&lt;/Test&gt;'</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'(?i)&lt;test&gt;(.*?)&lt;/test&gt;'</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$STR_REGEXPARRAYFULLMATCH</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">For</span></a><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">To</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/UBound.htm"><span class="S4">UBound</span></a><span class="S8">(</span><span class="S9">$aArray</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"RegExp Test mit Option 2 - "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$i</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$aArray</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">])</span>
<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">Next</span></a>
<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 3</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[03].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext3\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext3">
<pre>
<span><span class="S1">; Option 3, globale R&uuml;ckgabe, alter AutoIt-Stil</span>

<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;MsgBoxConstants.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;StringConstants.au3&gt;</span>

<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$aArray</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S7">'&lt;test&gt;a&lt;/test&gt; &lt;test&gt;b&lt;/test&gt; &lt;test&gt;c&lt;/Test&gt;'</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'(?i)&lt;test&gt;(.*?)&lt;/test&gt;'</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$STR_REGEXPARRAYGLOBALMATCH</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">For</span></a><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">To</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/UBound.htm"><span class="S4">UBound</span></a><span class="S8">(</span><span class="S9">$aArray</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"RegExp-Test mit Option 3 - "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$i</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$aArray</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">])</span>
<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">Next</span></a>
<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 4</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[04].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext4\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext4">
<pre>
<span><span class="S1">; Option 4, globale R&uuml;ckgabe, php/preg_match_all()-Stil</span>

<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;MsgBoxConstants.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;StringConstants.au3&gt;</span>

<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$aArray</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S7">'F1oF2oF3o'</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'(F.o)*?'</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$STR_REGEXPARRAYGLOBALFULLMATCH</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$aMatch</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span>
<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">For</span></a><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">To</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/UBound.htm"><span class="S4">UBound</span></a><span class="S8">(</span><span class="S9">$aArray</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S9">$aMatch</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S9">$aArray</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">]</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">For</span></a><span class="S0"> </span><span class="S9">$j</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">To</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/UBound.htm"><span class="S4">UBound</span></a><span class="S8">(</span><span class="S9">$aMatch</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"RegExp-Test mit Option 4 - "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">','</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$j</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$aMatch</span><span class="S8">[</span><span class="S9">$j</span><span class="S8">])</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">Next</span></a>
<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">Next</span></a>
<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 5</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[05].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext5\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext5">
<pre>
<span><span class="S12">#Region &nbsp;&nbsp;&nbsp;</span><span class="S1">;************ Includes ************</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<span class="S12">#EndRegion </span><span class="S1">;************ Includes ************</span>
<span class="S9">$sTest</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"Name Paul (M&uuml;ller). Name Hans (Schmidt oder Meier)."</span>
<span class="S9">$sPattern</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"Name\h(\w+)\h*\(([^\)]*)\)"</span>
<span class="S2">#cs</span>
<span class="S2">Name\h &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Name" gefolgt von einem horizontalen Tab/Leerzeichen.</span>
<span class="S2">(\w+) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Eine Folge von W&ouml;rterzeichen [a-zA-Z_0-9], 1-mal oder mehr, in einer Gruppe aufgefangen - Vorname.</span>
<span class="S2">\h*\( &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Horizontale Tabs/Leerzeichen, 0-mal oder mehr, gefolgt von &ouml;ffnender Klammer.</span>
<span class="S2">([^\)]*) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alle Zeichen au&szlig;er schlie&szlig;ender Klammer, 0-mal oder mehr, in einer Gruppe aufgefangen - Nachname(n).</span>
<span class="S2">\) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Am Ende eine schlie&szlig;ende Klammer.</span>
<span class="S2">#ce</span>

<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Global</span></a><span class="S0"> </span><span class="S9">$a2D</span><span class="S8">[</span><span class="S3">0</span><span class="S8">][</span><span class="S3">2</span><span class="S8">]</span>
<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Global</span></a><span class="S0"> </span><span class="S9">$iArrayIdx</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S3">1</span>

<span class="S9">$aMatch</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$sTest</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sPattern</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; $STR_REGEXPARRAYMATCH</span>
<a class="codeSnippetLink" href="../functions/ConsoleWrite.htm"><span class="S4">ConsoleWrite</span></a><span class="S8">(</span><span class="S7">"$aMatch --&gt; "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> _cwArray</span><span class="S8">(</span><span class="S9">$aMatch</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@LF"><span class="S6">@LF</span></a><span class="S8">)</span><span class="S0"> </span><span class="S1">; ==&gt; Paul | M&uuml;ller</span>

<span class="S9">$aMatch</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$sTest</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sPattern</span><span class="S8">,</span><span class="S0"> </span><span class="S3">2</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; $STR_REGEXPARRAYFULLMATCH</span>
<a class="codeSnippetLink" href="../functions/ConsoleWrite.htm"><span class="S4">ConsoleWrite</span></a><span class="S8">(</span><span class="S7">"$aMatch --&gt; "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> _cwArray</span><span class="S8">(</span><span class="S9">$aMatch</span><span class="S8">,</span><span class="S0"> </span><span class="S3">2</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@LF"><span class="S6">@LF</span></a><span class="S8">)</span><span class="S0"> </span><span class="S1">; ==&gt; Name Paul (M&uuml;ller) | Paul | M&uuml;ller</span>

<span class="S9">$aMatch</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$sTest</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sPattern</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; $STR_REGEXPARRAYGLOBALMATCH</span>
<a class="codeSnippetLink" href="../functions/ConsoleWrite.htm"><span class="S4">ConsoleWrite</span></a><span class="S8">(</span><span class="S7">"$aMatch --&gt; "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> _cwArray</span><span class="S8">(</span><span class="S9">$aMatch</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@LF"><span class="S6">@LF</span></a><span class="S8">)</span><span class="S0"> </span><span class="S1">; ==&gt; Paul | M&uuml;ller | Hans | Schmidt oder Meier</span>

<span class="S9">$aMatch</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$sTest</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sPattern</span><span class="S8">,</span><span class="S0"> </span><span class="S3">4</span><span class="S8">)</span><span class="S0"> </span><span class="S1">; $STR_REGEXPARRAYGLOBALFULLMATCH</span>
<a class="codeSnippetLink" href="../functions/ConsoleWrite.htm"><span class="S4">ConsoleWrite</span></a><span class="S8">(</span><span class="S7">"$aMatch --&gt; "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> _cwArray</span><span class="S8">(</span><span class="S9">$aMatch</span><span class="S8">,</span><span class="S0"> </span><span class="S3">4</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@LF"><span class="S6">@LF</span></a><span class="S8">)</span><span class="S0"> </span><span class="S1">; ==&gt; [a-0]: Name Paul (M&uuml;ller) | Paul | M&uuml;ller | [a-1]: Name Hans (Schmidt oder Meier) | Hans | Schmidt oder Meier</span>

<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Func</span></a><span class="S0"> _cwArray</span><span class="S8">(</span><span class="S9">$a</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$iFlag</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sText</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">""</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$s</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">For</span></a><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">To</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/UBound.htm"><span class="S4">UBound</span></a><span class="S8">(</span><span class="S9">$a</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/If.htm"><span class="S5">If</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/IsArray.htm"><span class="S4">IsArray</span></a><span class="S8">(</span><span class="S9">$a</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">])</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Then</span></a>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S9">$iArrayIdx</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">+=</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S9">$s</span><span class="S0"> </span><span class="S8">&amp;=</span><span class="S0"> </span><span class="S7">"[a-"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$iArrayIdx</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">"]: "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> _cwArray</span><span class="S8">(</span><span class="S9">$a</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">],</span><span class="S0"> </span><span class="S9">$iFlag</span><span class="S8">,</span><span class="S0"> </span><span class="S7">" (Unter-Array) "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$i</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Else</span></a>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/If.htm"><span class="S5">If</span></a><span class="S0"> </span><span class="S9">$iFlag</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">4</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Then</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../libfunctions/_ArrayAdd.htm"><span class="S15">_ArrayAdd</span></a><span class="S8">(</span><span class="S9">$a2D</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'{Array} '</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$iArrayIdx</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">' &nbsp;Item '</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">'|'</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$a</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">])</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S9">$s</span><span class="S0"> </span><span class="S8">&amp;=</span><span class="S0"> </span><span class="S9">$a</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">]</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">" | "</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">EndIf</span></a>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">Next</span></a>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/If.htm"><span class="S5">If</span></a><span class="S0"> </span><span class="S9">$iFlag</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">&lt;</span></a><span class="S0"> </span><span class="S3">4</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Then</span></a>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$a</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Flag "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$iFlag</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$sText</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Else</span></a>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/If.htm"><span class="S5">If</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S5">Not</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringInStr.htm"><span class="S4">StringInStr</span></a><span class="S8">(</span><span class="S9">$sText</span><span class="S8">,</span><span class="S0"> </span><span class="S7">" (Unter-Array) "</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Then</span></a>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$a2D</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Flag "</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S9">$iFlag</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S7">" (Unter-Arrays) "</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">EndIf</span></a>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">EndIf</span></a>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Return</span></a><span class="S0"> </span><span class="S9">$s</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">EndFunc</span></a><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;_cwArray</span>
<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 6</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[06].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext6\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext6">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S1">; ----------------- Anwendung von ?&lt;!</span>
<span class="S1">; Suchmuster:</span>
<span class="S1">; alles au&szlig;er "142"</span>
<span class="S1">; DANN "Hallo"</span>

<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Dim</span></a><span class="S0"> </span><span class="S9">$array</span><span class="S8">[</span><span class="S3">2</span><span class="S8">]</span>

<span class="S9">$array</span><span class="S8">[</span><span class="S3">0</span><span class="S8">]</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"142Hallo"</span>
<span class="S9">$array</span><span class="S8">[</span><span class="S3">1</span><span class="S8">]</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"412Hallo"</span>

<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">For</span></a><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">To</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/UBound.htm"><span class="S4">UBound</span></a><span class="S8">(</span><span class="S9">$array</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S9">$regexp</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$array</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">],</span><span class="S0"> </span><span class="S7">"(?&lt;!142)(Hallo)"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$regexp</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$array</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">])</span>
<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">Next</span></a>



<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 7</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[07].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext7\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext7">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S1">; ----------------- Anwendung von Wiederholungszeichen</span>
<span class="S1">; Suchmuster:</span>
<span class="S1">; 2x Zahl</span>
<span class="S1">; 1x .</span>
<span class="S1">; 2x Zahl</span>
<span class="S1">; 1x .</span>
<span class="S1">; 4x Zahl</span>

<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Dim</span></a><span class="S0"> </span><span class="S9">$array</span><span class="S8">[</span><span class="S3">2</span><span class="S8">]</span>

<span class="S9">$array</span><span class="S8">[</span><span class="S3">0</span><span class="S8">]</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"23.08.2010"</span>
<span class="S9">$array</span><span class="S8">[</span><span class="S3">1</span><span class="S8">]</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"23.08.10"</span>

<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">For</span></a><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">To</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/UBound.htm"><span class="S4">UBound</span></a><span class="S8">(</span><span class="S9">$array</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S9">$regexp</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$array</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">],</span><span class="S0"> </span><span class="S7">"\d</span><span class="S10">{2}</span><span class="S7">\.\d</span><span class="S10">{2}</span><span class="S7">\.\d</span><span class="S10">{4}</span><span class="S7">"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$regexp</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$array</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">])</span>
<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">Next</span></a>



<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 8</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[08].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext8\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext8">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S1">; ----------------- Anwendung von \b</span>
<span class="S1">; Durch das Voranstellen von \b und das anh&auml;ngen von \b an das Ende wird nur an der Wortgrenze gesucht.</span>
<span class="S1">; "Abgrund oder folge" wird nicht gefunden, da das Wort Abgrund und nicht Grund heisst</span>

<span class="S9">$sString</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S8">_</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S7">"Grund oder Folge der Armut?"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S8">_</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S7">"Fahre ich in den Abgrund oder folge ich der Stra&szlig;e?"</span>
<span class="S9">$aResult</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$sString</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"(?i)\bgrund oder folge\b"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$aResult</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"StringRegExp Results"</span><span class="S8">)</span>



<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 9</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[09].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext9\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext9">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S1">; ----------------- Anwendung von gierigen und faulen Wiederholungszeichen</span>
<span class="S1">; Das erste * ist gierig. Es wird die l&auml;ngste Stelle gesucht</span>
<span class="S9">$aRegExp</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S7">"Die Abk&uuml;rzung 'ISP' hei&szlig;t 'Internet Service Provider'."</span><span class="S8">,</span><span class="S0"> </span><span class="S7">".*'(.*)'.*"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$aRegExp</span><span class="S8">)</span>

<span class="S1">; Durch anh&auml;ngen eines ? wird es faul und es wird die k&uuml;rzeste Stelle gesucht</span>
<span class="S9">$aRegExp</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S7">"Die Abk&uuml;rzung 'ISP' hei&szlig;t 'Internet Service Provider'."</span><span class="S8">,</span><span class="S0"> </span><span class="S7">".*?'(.*?)'.*"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$aRegExp</span><span class="S8">)</span>

<span class="S1">; Das erste * ist gierig. Es wird die l&auml;ngste Stelle gesucht</span>
<span class="S9">$aRegExp</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S7">"12-34.abc.def@mail.de"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"(.*)\.(.*)*@(.*)\.(.*)"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$aRegExp</span><span class="S8">)</span>

<span class="S1">; Durch anh&auml;ngen eines ? wird es faul und es wird die k&uuml;rzeste Stelle gesucht</span>
<span class="S9">$aRegExp</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S7">"12-34.abc.def@mail.de"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"(.*?)\.(.*)*@(.*)\.(.*)"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$aRegExp</span><span class="S8">)</span>



<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 10</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[10].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext10\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext10">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S1">; ----------------- Anwendung von \n</span>
<span class="S1">; Das erste Wort (auf welches " Email: " folgt) wird in einer tempor&auml;ren Variable gespeichert (weil eingeklammert)</span>
<span class="S1">; Diese Variable wird mit \1 abgerufen. Die 1 steht dabei f&uuml;r die Nummer des Subpatterns.</span>
<span class="S9">$sString</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"Name Email: Name@web.de"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a>
<span class="S9">$sString</span><span class="S0"> </span><span class="S8">&amp;=</span><span class="S0"> </span><span class="S7">"Name Email: Peter@live.de"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a>
<span class="S9">$sString</span><span class="S0"> </span><span class="S8">&amp;=</span><span class="S0"> </span><span class="S7">"Acanis Email: Acanis@gmx.net"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a>
<span class="S9">$sString</span><span class="S0"> </span><span class="S8">&amp;=</span><span class="S0"> </span><span class="S7">"Acanis Email: Coolertyp@googlemail.com"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a>
<span class="S9">$aRegExp</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$sString</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"(\w+) Email: (\1@\w+\.\w+)"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$aRegExp</span><span class="S8">)</span>


<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 11</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[11].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext11\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext11">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S1">; ----------------- Anwendung von ?:</span>
<span class="S1">; Das folgende Beispiel soll aufzeigen, wie ein Subpattern gespeichert wird und wie nicht.</span>
<span class="S9">$sString</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"Mein Name ist Peter"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a>
<span class="S9">$sString</span><span class="S0"> </span><span class="S8">&amp;=</span><span class="S0"> </span><span class="S7">"Mein Name ist Karl"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a>
<span class="S9">$sString</span><span class="S0"> </span><span class="S8">&amp;=</span><span class="S0"> </span><span class="S7">"Mein Name ist Max"</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a>

<span class="S1">; So w&uuml;rde nur das Subpattern zur&uuml;ckgegeben werden</span>
<span class="S9">$aResult</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$sString</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Mein Name ist (Karl|Max)"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$aResult</span><span class="S8">)</span>

<span class="S1">; Durch voranstellen von ?: wird das Subpattern nicht gespeichert und es wird der komplette Satz als Ergebnis zur&uuml;ckgegeben</span>
<span class="S9">$aResult</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$sString</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Mein Name ist (?:Karl|Max)"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$aResult</span><span class="S8">)</span>


<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 12</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[12].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext12\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext12">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S1">; ----------------- Verwendung von Subpatterns</span>
<span class="S1">; Das folgende Beispiel soll aufzeigen, wie ein Subpattern gespeichert wird und dieses dann sp&auml;ter wieder verwendet wird.</span>
<span class="S9">$date</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">'01.03.2008'</span><span class="S0"> </span><span class="S1">; YYYY/MM/DD</span>
<span class="S9">$new</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExpReplace.htm"><span class="S4">StringRegExpReplace</span></a><span class="S8">(</span><span class="S9">$date</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"(\d</span><span class="S10">{2}</span><span class="S7">)\.(\d</span><span class="S10">{2}</span><span class="S7">)\.(\d</span><span class="S10">{4}</span><span class="S7">)"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"$3/$2/$1"</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_OK</span><span class="S8">,</span><span class="S0"> </span><span class="S7">""</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$new</span><span class="S8">)</span>



<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 13</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[13].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext13\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext13">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S1">; ----------------- Verwendung von Wiederholungszeichen.</span>
<span class="S1">; Hier wird der Inhalt der Gruppe &uuml;berschrieben, sobald ein Wiederholungszeichen auf die Gruppe angewandt wird</span>
<span class="S9">$sText</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"aaabacad"</span>
<span class="S9">$aRet</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$sText</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"(a.)+"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$aRet</span><span class="S8">)</span>
<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 14</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[14].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext14\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext14">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S1">; ----------------- Anwendung von Wiederholungszeichen</span>
<span class="S1">; Suchmuster:</span>
<span class="S1">; 1x "P"</span>
<span class="S1">; mindestens 1x "a"</span>
<span class="S1">; 1x "r"</span>

<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Dim</span></a><span class="S0"> </span><span class="S9">$array</span><span class="S8">[</span><span class="S3">2</span><span class="S8">]</span>

<span class="S9">$array</span><span class="S8">[</span><span class="S3">0</span><span class="S8">]</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"Ich habe 10 Paaaaaar zu Hause"</span>
<span class="S9">$array</span><span class="S8">[</span><span class="S3">1</span><span class="S8">]</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"Ich habe 10 Par zu Hause"</span>

<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">For</span></a><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">To</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/UBound.htm"><span class="S4">UBound</span></a><span class="S8">(</span><span class="S9">$array</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S9">$regexp</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$array</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">],</span><span class="S0"> </span><span class="S7">"Pa+r"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span><span class="S0"> </span><span class="S1">;alternativ: Pa{1,}r</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$regexp</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$array</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">])</span>
<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">Next</span></a>



<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
<h3>Beispiel 15</h3>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Dieses Skript &ouml;ffnen"><param name="Item1" value=",Examples\\HelpFile\\StringRegExp[15].au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext15\').innerText)">In die Zwischenablage kopieren<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext15">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Constants.au3&gt;</span>

<span class="S1">; ----------------- Anwendung von Oder und ?:</span>
<span class="S1">; Suchmuster:</span>
<span class="S1">; "-XY" ODER " XY" (?:\-XY| XY) &gt;&gt;&gt; durch ?: wird nicht nur das Ergebnis der Oder-Bedingung sondern auch der Rest im Array ausgegeben</span>
<span class="S1">; DANN Zahlen (beliebige Anzahl) \d*</span>
<span class="S1">; DANN "-" \-</span>

<a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Dim</span></a><span class="S0"> </span><span class="S9">$array</span><span class="S8">[</span><span class="S3">2</span><span class="S8">]</span>

<span class="S9">$array</span><span class="S8">[</span><span class="S3">0</span><span class="S8">]</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"425-65-XY4587543-ghzgt7"</span>
<span class="S9">$array</span><span class="S8">[</span><span class="S3">1</span><span class="S8">]</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"4 25-65 XY4587543-ghzgt7"</span>

<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">For</span></a><span class="S0"> </span><span class="S9">$i</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S3">0</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">To</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/UBound.htm"><span class="S4">UBound</span></a><span class="S8">(</span><span class="S9">$array</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">-</span></a><span class="S0"> </span><span class="S3">1</span>
<span class="S0">&nbsp; &nbsp; </span><span class="S9">$regexp</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExp.htm"><span class="S4">StringRegExp</span></a><span class="S8">(</span><span class="S9">$array</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">],</span><span class="S0"> </span><span class="S7">"(?:\-XY| XY)\d*\-"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">3</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; </span><a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$regexp</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$array</span><span class="S8">[</span><span class="S9">$i</span><span class="S8">])</span>
<a class="codeSnippetLink" href="../keywords/For.htm"><span class="S5">Next</span></a>



<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
</body>
</html>
