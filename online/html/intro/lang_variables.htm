<!DOCTYPE html>
<html>
<head>
  <title>Sprachreferenz - Variablen</title>
	<meta charset="utf-8">
	<link href="../css/default.css" rel="stylesheet">
</head>

<body>
<h1>Sprachreferenz - Variablen</h1>

  
<p>Eine Variable ist -einfach gesehen- nur ein Ort, um Daten im Speicher
abzulegen, damit schnell darauf zugegriffen werden kann. Man stelle sie sich
einfach als ein Postfach im Speicher vor, in das man Informationen hinein legen
oder heraus nehmen kann. Zum Beispiel k&ouml;nnte man eine Variable erstellen, um
eine Zahl, die Antwort auf eine Frage oder das Ergebnis einer mathematischen
Gleichung darin zu speichern.</p>
<p>Jede Variable hat einen Namen (&auml;hnlich eines Postfaches), muss mit einem <strong>$</strong> 
Zeichen beginnen und darf nur <strong>Buchstaben</strong>, <strong>Zahlen</strong>
und den Unterstrich <strong>_  </strong>enthalten. Hier sind einige
Beispielnamen:</p>
<p>$var1</p>
<p>    $meine_Variable</p>
<p> </p>
<p>Jede Variable wird als <a href="lang_datatypes.htm">Variant</a>.
gespeichert. </p>
<p> </p>
<h2>Variablen deklarieren</h2>
<p>Variablen werden mit den Schl&uuml;sselw&ouml;rtern <a href="../keywords/Dim.htm">Dim</a>, 
  <a href="../keywords/Dim.htm">Local</a> und <a href="../keywords/Dim.htm">Global</a>
deklariert und erstellt:</p>
<p class="codebox">    Dim $var1</p>
<p>Oder man kann auch mehrere Variablen auf einmal deklarieren:</p>
<p class="codebox">    Dim $var1, $meine_Variable</p>
<p> </p>
<p>Man kann eine Variable aber auch zuweisen, ohne sie vorher zu deklarieren,
aber viele bevorzugen die explizite Deklarierung.</p>
<p class="codebox">    $var1 = "erstellen und zuweisen"</p>
<p> </p>
<h2>Konstanten deklarieren</h2>
<p>Konstanten werden mit dem Schl&uuml;sselwort <a href="../keywords/Dim.htm">Const</a> 
 deklariert und erstellt, wie z.B.:</p>
<p class="codebox">    Const $const1 = 1, $const2=12</p>
<p>Konstanten k&ouml;nnen auch mit dem Schl&uuml;sselwort <a href="../keywords/Enum.htm">Enum</a> 
deklariert und initialisiert werden, z.B.:</p>
<p class="codebox">    Enum $const1 = 1, $const2, $const3    
; 1, 2, 3<br>
    Enum STEP 2 $incr0, $incr2, $incr4    ; 0, 2, 
4<br>
    Enum STEP *2 $mult1, $mult2, $mult4   ; 1, 2, 4</p>
<p> </p>
<p>Konstanten k&ouml;nnen keine bereits existierenden Variablen neu deklarieren.</p>
<p> </p>
<h2>G&uuml;ltigkeitsbereich</h2>
<p>Der G&uuml;ltigkeitsbereich einer Variablen wird gesteuert durch die Tatsache, wann
und wie man die Variable deklariert. Deklariert man eine Variable am Anfang
eines Skripts und au&szlig;erhalb von Funktionen, existiert sie in dem
G&uuml;ltigkeitsbereich <strong>Global</strong> und kann von &uuml;berall aus dem Skript
gelesen oder ge&auml;ndert werden.</p>
<p>Deklariert man eine Variable <i>innerhalb</i> einer <a href="lang_functions.htm">Funktion</a>,
befindet sie sich in dem G&uuml;ltigkeitsbereich <strong>Local</strong>  und kann nur <i>innerhalb
dieser einen Funktion</i> genutzt werden. Variablen, die innerhalb einer
Funktion erstellt wurden, werden automatisch am Ende dieser Funktion zerst&ouml;rt.</p>
<p>Werden Variablen &uuml;ber <a href="../keywords/Dim.htm">Dim</a> 
 deklariert oder innerhalb einer Funktion zugewiesen, haben sie standardm&auml;&szlig;ig
den G&uuml;ltigkeitsbereich <strong>Local</strong>, <strong>es sei denn, </strong>es
gibt eine globale Variable des selben Namens (in diesem Fall wird die globale Variable
verwendet). Dies kann ge&auml;ndert werden, indem man die Schl&uuml;sselw&ouml;rter <a href="../keywords/Dim.htm">Local</a> 
 und <a href="../keywords/Dim.htm">Global</a>  benutzt, um Variablen zu
deklarieren, und um so den gew&uuml;nschten G&uuml;ltigkeitsbereich zu <strong>erzwingen.</strong></p>
<p> </p>
<h2>Arrays</h2>
<p>Ein <b>Array</b> ist eine Variable, die eine Reihe von Datenelementen
desselben Typs und derselben Gr&ouml;&szlig;e enth&auml;lt. Auf jedes Element in dieser Variablen
kann &uuml;ber eine Indexnummer zugegriffen werden.
<br>
<br>
Ein Beispiel:<br>
<br>
Man m&ouml;chte z.B. diese Reihe an Zeichen speichern: "A", "U", "T", "O", "I", 
"T" und "3".<br>
Man k&ouml;nnte hierf&uuml;r sieben separate Variablen benutzen, aber ein Array zu
benutzen ist viel effizienter:</p>
<p class="codebox">$Array[0]="A"<br>
$Array[1]="U"<br>
..etc..<br>
$Array[6]="3"</p>
<p>Um einen spezifischen Wert in einem Array anzusprechen, muss man nur die
Indexnummer kennen:</p>
<p class="codebox">$MeinZeichen=$Array[2]</p>
<p>Als Ergebnis erh&auml;lt man in $MeinZeichen den Buchstaben "T" (siehe auch: <b>'Operatoren'</b>).<br>
<br>
<br>
Die Indexnummer kann auch durch eine andere Variable oder einen Ausdruck ersetzt
werden. Auf diese Weise kann man komplexe Arten verwenden, auf Elemente in einem
Array zuzugreifen oder sie zu erzeugen.<br>
<br>
<br>
Arrays k&ouml;nnen auch mehrdimensional sein, wenn man mehrere Reihen an
Indexnummern benutzt, wie z.B.:</p>
<p class="codebox">$Array[0][0]="Upper-Left"<br>
$Array[1][0]="Lower-Left"<br>
$Array[0][1]="Upper-Right"<br>
$Array[1][1]="Lower-Right"</p>
<p>(Diese Werte sind einfach nur Beispiele.)
<br>
Man kann bis zu 64 Dimensionen in einem Array verwenden. Die Gesamtanzahl der
Eintr&auml;ge kann dabei nicht gr&ouml;&szlig;er sein als 2^24 (16 777 216).<br>
<br>
Bevor man ein Array in einem Skript verwenden kann, muss man mit dem
Schl&uuml;sselwort <b>'<a href="../keywords/Dim.htm">Dim</a>'</b> dessen Grenzen
definieren.<br>
<br>
<!--c1--></p>
<h2>Datentypen in Arrays</h2>
<p><br>
Es wurde gesagt, dass ein Array nur Datentypen <b>eines</b> Typs enth&auml;lt. Aber
technisch gesprochen kann ein Variant in AutoIt alles m&ouml;gliche -von einer Zahl
bis zu einem Bool'schen Wert- enthalten. So k&ouml;nnte ein AutoIt-Array auch
verschiedene Typen enthalten, sogar andere Arrays:</p>
<p class="codebox">$Array[0]=1<br>
$Array[1]=wahr<br>
$Array[2]="Text"<br>
$Array[3]=$AnderesArray</p>
<p>Dies wurde in AutoIt nicht ausdr&uuml;cklich verboten. Trotzdem ist es <b>NICHT
RATSAM,</b> unterschiedliche Datentypen in einem Array zu vermischen. Speziell
der Gebrauch eines Arrays innerhalb eines anderen Arrays wird die
Ausf&uuml;hrungsgeschwindigkeit des Skripts massiv beeinflussen.</p>
</body>
</html>
