<!DOCTYPE html>
<html>
<head>
<title>Keyword $tagLVITEM</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>

<body>
<h1 class="small">Keyword Reference</h1>
<hr style="height:0px">
<div class="top"><h1>$tagLVITEM</h1><div>
<div id="flagtext">Show description in</div>
<div id="flaglink"> <a href="../libfunctions/$tagLVITEM.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"><img src="../images/Flagge_de.png" height="29" width="36" border=0 hspace=10/></a></div>
<div ><input id="toggleButton" type="image" onclick="Themes.toggleTheme()" src="../images/dark.png" height ="36" width="36" alt="Toggle Theme"></div><br />
<br style="clear: both;">
<p style="margin:2px 0 0 0;" class="funcdesc">Specifies or receives the attributes of a list-view item<br /></p>
<p class="codeheader">
Global Const $tagLVITEM = "struct; uint Mask;int Item;int SubItem;uint State;uint StateMask;ptr Text;int TextMax;int Image;lparam Param;" & _<br />
	"int Indent;int GroupID;uint Columns;ptr pColumns;ptr piColFmt;int iGroup; endstruct"<br />
</p>

<h2>Parameters</h2>
<table>
<tr>
<td style="width:15%">Mask</td>
<td style="width:85%">Set of flags that specify which members of this structure contain data to be set or which members are being requested. This member can have one or more of the following flags set:<br />
&nbsp;&nbsp;&nbsp; $LVIF_COLFMT - The piColFmt member is valid or must be set. If this flag is used, the cColumns member is valid or must be set <strong>Windows Vista or later</strong>.<br />
&nbsp;&nbsp;&nbsp; $LVIF_COLUMNS - The Columns member is valid<br />
&nbsp;&nbsp;&nbsp; $LVIF_DI_SETITEM - The operating system should store the requested list item information<br />
&nbsp;&nbsp;&nbsp; $LVIF_GROUPID - The GroupID member is valid<br />
&nbsp;&nbsp;&nbsp; $LVIF_IMAGE - The Image member is valid<br />
&nbsp;&nbsp;&nbsp; $LVIF_INDENT - The Indent member is valid<br />
&nbsp;&nbsp;&nbsp; $LVIF_NORECOMPUTE - The control will not generate LVN_GETDISPINFO to retrieve text information<br />
&nbsp;&nbsp;&nbsp; $LVIF_PARAM - The Param member is valid<br />
&nbsp;&nbsp;&nbsp; $LVIF_STATE - The State member is valid<br />
&nbsp;&nbsp;&nbsp; $LVIF_TEXT - The Text member is valid</td>
</tr>
<tr>
<td>Item</td>
<td>0-based index of the item to which this structure refers</td>
</tr>
<tr>
<td>SubItem</td>
<td>1-based index of the subitem to which this structure refers</td>
</tr>
<tr>
<td>State</td>
<td>Indicates the item's state, state image, and overlay image</td>
</tr>
<tr>
<td>StateMask</td>
<td>Value specifying which bits of the state member will be retrieved or modified</td>
</tr>
<tr>
<td>Text</td>
<td>Pointer to a string containing the item text</td>
</tr>
<tr>
<td>TextMax</td>
<td>Number of bytes in the buffer pointed to by Text, including the string terminator</td>
</tr>
<tr>
<td>Image</td>
<td>Index of the item's icon in the control's image list</td>
</tr>
<tr>
<td>Param</td>
<td>Value specific to the item</td>
</tr>
<tr>
<td>Indent</td>
<td>Number of image widths to indent the item</td>
</tr>
<tr>
<td>GroupID</td>
<td>Identifier of the tile view group that receives the item</td>
</tr>
<tr>
<td>Columns</td>
<td>Number of tile view columns to display for this item</td>
</tr>
<tr>
<td>pColumns</td>
<td>Pointer to the array of column indices</td>
</tr>
<tr>
<td>piColFmt</td>
<td>A pointer to an array of the following flags (alone or in combination, specifying the format of each subitem in extended tile view (Windows 7 and later).<br />
Value Meaning:<br />
&nbsp;&nbsp;&nbsp; $LVCFMT_LINE_BREAK - Forces the column to wrap to the top of the next list of columns.<br />
&nbsp;&nbsp;&nbsp; $LVCFMT_FILL Fills - the remainder of the tile area. Might have a title.<br />
&nbsp;&nbsp;&nbsp; $LVCFMT_WRAP - Allows the column to wrap within the remaining space in its list of columns.<br />
&nbsp;&nbsp;&nbsp; $LVCFMT_NO_TITLE - Removes the title from the subitem.<br />
&nbsp;&nbsp;&nbsp; $LVCFMT_TILE_PLACEMENTMASK - Equivalent to a combination of $LVCFMT_LINE_BREAK and $LVCFMT_FILL.</td>
</tr>
<tr>
<td>iGroup</td>
<td>Group index of the item. Valid only for owner data/callback (single item in multiple groups) (<strong>Windows Vista or later</strong>).</td>
</tr>
</table>

</body>
</html>
