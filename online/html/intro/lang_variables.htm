<!DOCTYPE html>
<html>
<head>
	<title>Sprachreferenz - Variablen</title>
	<meta charset="utf-8">
	<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>

<body>
	<h1>Sprachreferenz - Variablen</h1>

	<p>Eine Variable ist lediglich ein Ort, an dem Daten im Speicher des Rechners abgelegt 
       werden, so dass schnell auf sie zugegriffen werden kann. Man kann sie sich wie 
       ein Postfach im Speicher vorstellen, in das man Informationen hineinlegen 
       oder aus dem man Informationen herausnehmen kann. Man kann zum Beispiel eine 
       Variable erstellen, um eine Zahl, eine Zeichenkette, die Antwort eines Benutzers
       auf eine Frage oder das Ergebnis einer mathematischen Gleichung zu speichern.</p>

	<p>Jede Variable hat einen Namen (wieder vergleichbar mit einem Postfach), muss 
       mit dem Zeichen <strong>$</strong> beginnen und darf nur <strong>Buchstaben</strong>,
       <strong>Ziffern</strong> und den Unterstrich <strong>_</strong> enthalten. 
       Hier einige Beispielnamen:</p>

	<p>&nbsp;&nbsp;&nbsp; $Var1</p>

	<p>&nbsp;&nbsp;&nbsp; $vVariable</p>

	<p>&nbsp;&nbsp;&nbsp; $my_Variable</p><br>

	<p>Hinweis : Bei Variablennamen wird die Gro&szlig;-/Kleinschreibung nicht ber&uuml;cksichtigt: 
       <strong>MyVariable()</strong> ist dasselbe wie <strong>MyvARiAblE()</strong></p>

	<p>Jede Variable wird als Datentyp <a href="lang_datatypes.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Variant</a> gespeichert.</p>

	<p>Um die Pflege des Skripts zu erleichtern wird vorgeschlagen, eine  <a href="#VariableNaming">Standardkonvention f&uuml;r die Benennung von Variablen</a> zu verwenden.</p>

	<h2>Deklaration von Variablen</h2>

	<p>Variablen werden deklariert und erstellt mit dem Schl&uuml;sselwort <a href="../keywords/Dim.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Local</a> und <a href="../keywords/Dim.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Global</a> - <a href="../keywords/Dim.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Dim</a> kann auch verwendet werden, 
       obwohl dies nicht empfohlen wird bzw. als veraltet gilt.</p>

@@SyntaxHighlighting@@
Local $vVariable
@@End@@


	<p>Man kann mehrere Variablen auf einmal deklarieren:</p>

@@SyntaxHighlighting@@
Global $vVariable1, $vVariable2
@@End@@


	<p>Man kann einer Variable auch <strong>ohne</strong> Deklaration einen Wert zuweisen, aber viele bevorzugen die explizite Deklaration.</p>

@@SyntaxHighlighting@@
$vVariable = "Erstellen und Zuweisen"
@@End@@


	<h2>Deklaration von Konstanten</h2>

	<p>Konstanten werden mit dem Schl&uuml;sselwort <a href="../keywords/Dim.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Const</a> deklariert und m&uuml;ssen mit einem Wert initialisiert werden:<br></p>

@@SyntaxHighlighting@@
Const $iConst1 = 1, $iConst2 = 12
@@End@@


	<p>Konstanten k&ouml;nnen auch mit dem Schl&uuml;sselwort <a href="../keywords/Enum.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Enum</a> deklariert und initialisiert werden:</p>

@@SyntaxHighlighting@@
Enum $eConst1 = 1, $eConst2, $eConst3 ; 1, 2, 3
Enum Step 2 $eIncr0, $eIncr2, $eIncr4 ; 0, 2, 4
Enum Step *2 $eMult1, $eMult2, $eMult4 ; 1, 2, 4
@@End@@


	<p>Sobald einer Konstante ein Wert zugewiesen wurde, kann dieser im weiteren Verlauf des 
       Skriptes nicht mehr ge&auml;ndert werden.<br></p>

	<h2>G&uuml;ltigkeitsbereich (Scope)</h2>

	<p>Der G&uuml;ltigkeitsbereich einer Variablen wird dadurch festgelegt, wann und wie die Variable
       deklariert wird. Wird eine Variable am Anfang des Skripts und au&szlig;erhalb von Funktionen 
       deklariert, existiert sie im <strong>globalen</strong> G&uuml;ltigkeitsbereich und kann von 
       &uuml;berall im Skript gelesen oder ge&auml;ndert werden.</p>

	<p>Wenn eine Variable <em>innerhalb</em> einer <a href="lang_functions.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Funktion</a> deklariert wird, 
       befindet sie sich im <strong>lokalen</strong> G&uuml;ltigkeitsbereich und kann nur <em>innerhalb der selben Funktion</em> 
       verwendet werden. Variablen, die innerhalb von Funktionen erzeugt werden, werden automatisch zerst&ouml;rt, wenn die Funktion endet.</p>

	<p>Wenn Variablen mit <a href="../keywords/Dim.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Dim</a> deklariert oder in einer Funktion zugewiesen werden, 
       haben sie standardm&auml;&szlig;ig einen <strong>lokalen</strong> G&uuml;ltigkeitsbereich <strong>es sei denn, </strong> es gibt eine globale Variable mit demselben
       Namen (in diesem Fall wird die globale Variable wiederverwendet). Dies kann mit den Schl&uuml;sselw&ouml;rtern <a href="../keywords/Dim.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Lokal</a> 
       und <a href="../keywords/Dim.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Global</a> ge&auml;ndert werden, um den gew&uuml;nschten G&uuml;ltigkeitsbereich zu <strong>erzwingen</strong>.</p>

	<p>Siehe <a href="../keywords/Static.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Static</a> f&uuml;r Details zur Verwendung dieses Schl&uuml;sselworts als Teil der G&uuml;ltigkeitsbereich-Deklaration.</p>

	<a id="ArrayMaps"></a>
	<h2>Arrays und Maps</h2>

	<p>AutoIt verf&uuml;gt &uuml;ber 2 Arten von Datensammlungsvariablen (Collections): <strong>Arrays und Maps</strong>.</p>

	<p>Arrays sind viel schneller beim willk&uuml;rlichen Zugriff und k&ouml;nnen mehrere 
       Dimensionen haben - eine Dimensionsgr&ouml;&szlig;e ist auf den anf&auml;nglich deklarierten Wert 
       festgelegt (obwohl sie mit ReDim ge&auml;ndert werden kann). Arrays werden mit Integer-Werten 
       indiziert, die sich auf die Reihenfolge der Elemente beziehen und bei Element[0] beginnen 
       - Elemente k&ouml;nnen &uuml;ber den Integer-Index ausgelesen, oder durch eine einfache 
       For...Next-Schleife iteriert werden.</p>

	<p>Maps sind besser f&uuml;r den Zugriff auf Datens&auml;tze/W&ouml;rterb&uuml;cher geeignet und haben nur eine 
       Dimension. Sie werden entweder mit Integer- oder String-Schl&uuml;sseln indiziert 
       (Integer beziehen sich nicht auf die Reihenfolge der Elemente) und werden dynamisch in der 
       Gr&ouml;&szlig;e angepasst, sobald Werte hinzugef&uuml;gt oder entfernt werden. Auf einen Wert kann nur 
       mit dem urspr&uuml;nglichen Schl&uuml;ssel zugegriffen werden - diese Schl&uuml;ssel k&ouml;nnen mit der 
       Funktion MapKeys iteriert werden.</p>



	<h2>Arrays</h2>
    
	<p>Ein Array ist eine Variable, die eine Reihe von Datenelementen enth&auml;lt. Auf jedes Element 
       in dieser Variablen kann &uuml;ber eine Indexnummer zugegriffen werden, die sich auf die Position
       des Elements innerhalb des Arrays bezieht - in AutoIt ist das erste Element eines Arrays immer 
       Element [0]. Array-Elemente werden in einer definierten Reihenfolge gespeichert und k&ouml;nnen sortiert werden.<br>
	<br>

	<p>Das F&uuml;llen der [ ] mit einer Dimensionsgr&ouml;&szlig;e deklariert ein Array:</p>

@@SyntaxHighlighting@@
Local $aVar[3] ; ein Array
@@End@@
<br>


	<p>Die Zuweisung von Elementwerten bei der Deklaration macht die Variable zu einem Array - diese drei Zeilen sind funktional gleichwertig:</p>

@@SyntaxHighlighting@@
Local $vVar[3] = [1, 2, 3] ; ein Array
Local $vVar[] = [1, 2, 3] ; ein Array
Local $vVar = [1, 2, 3] ; ein Array
@@End@@
	<br>
	Ein Beispiel:<br>
	<br>
	Man m&ouml;chte eine Liste von Namen speichern: "Jasper", "Beethoven", "Pinky" und "Fidget". Daf&uuml;r k&ouml;nnte man vier separate Variablen 
    nutzen, aber die Verwendung eines Array ist effizienter:</p>

@@SyntaxHighlighting@@
Local $aArray[4]
$aArray[0] = "Jasper"
$aArray[1] = "Beethoven"
$aArray[2] = "Pinky"
$aArray[3] = "Fidget"
@@End@@


	<p>Um auf einen bestimmten Wert in einem Array zuzugreifen, verwendet man die Indexnummer:</p>

@@SyntaxHighlighting@@
$sString = $aArray[2] ; $sString enth√§lt "Pinky"
@@End@@


	<p>Die Indexnummer kann auch durch eine andere Variable oder einen Ausdruck ersetzt werden, 
       so dass man komplexe M&ouml;glichkeiten f&uuml;r die Zuweisung oder den Zugriff auf Elemente in 
       einem Array erstellen kann.</p>

	<p>Die Elemente eines ganzen Arrays k&ouml;nnen mit einer For...Next-Schleife iteriert (durchlaufen) werden:</p>
@@SyntaxHighlighting@@
; UBound liefert die Gesamtzahl der Elemente zur√ºck - da das erste [0] ist, ist der h√∂chste Index um eins kleiner
For $i = 0 To UBound($aArray) - 1
	ConsoleWrite(aArray[$i] & @CRLF)
Next
@@End@@

	<br>
	Arrays k&ouml;nnen auch mehrdimensional sein, wenn man mehrere Serien von Indexnummern verwendet.&nbsp; Man stelle sich Zeilen und Spalten in einem Tabellengitter vor:

@@SyntaxHighlighting@@
$aArray[0][0] = "Oben-links"
$aArray[1][0] = "Unten-links"
$aArray[0][1] = "Oben-rechts"
$aArray[1][1] = "Unten-rechts"
@@End@@


	<p>(Diese Werte sind nur Beispiele)<br>
	<br>
	Es k&ouml;nnen bis zu 64 Dimensionen in einem Array verwendet werden. Die Gesamtzahl der Eintr&auml;ge darf nicht gr&ouml;&szlig;er als 2^24 (16 777 216) sein.<br>
	<br>
	Arrays m&uuml;ssen vor der Verwendung deklariert werden, indem ihr G&uuml;ltigkeitsbereich mit den Schl&uuml;sselw&ouml;rtern '<a href="../keywords/Dim.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Global/Local/Static</a>' festgelegt wird.
    Zudem muss entweder die Gr&ouml;&szlig;e angegeben und/oder Elemente zugewiesen werden.<br></p>

@@SyntaxHighlighting@@
Local $aArray1[2] ; Array mit 2 Elementen, keine Zuweisung erfolgt
Local $aArray[] = [8, 4, 5, 9, 1] ; Array mit 5 Elementen, alle zugewiesen
Local $aArray[7] = [3, 7.5, "string"] ; Array mit 7 Elementen, nur die ersten 3 werden zugeordnet
@@End@@


	<h2>Datentypen in Arrays</h2>

	<p>Ein Array-Element kann jeden AutoIt-Datentyp enthalten:</p>

@@SyntaxHighlighting@@
$aArray[0] = 1
$aArray[1] = True
$aArray[2] = "Text"
$aArray[3] = $aAnotherArray
@@End@@


	<p>Auf ein Array, das innerhalb eines anderen Arrays abgelegt wird, kann direkt zugegriffen 
       werden, aber diese Methode ist etwas langsamer als der Zugriff auf andere Datentypen:</p>

@@SyntaxHighlighting@@
Local $aInternal[3] = ["A", "B", "C"] ; Deklarieren eines Arrays
Local $aContainer[1] = [$aInternal] ; Deklarieren eines Container-Arrays, welches das erste Array enth√§lt
$sString = ($aContainer[0])[1] ; $sString enth√§lt "B"
; Man beachte die Anforderung, die Definition des ersten Array-Elements in ( ) zu setzen
@@End@@


	<h2>Maps</h2>
    
	<div class="experimental">Diese Funktion ist experimentell. Es kann sein, dass sie nicht funktioniert oder Fehler enth&auml;lt. Au&szlig;erdem kann es sein, dass sie ohne Hinweis ge&auml;ndert oder entfernt wird..<br /><br />BITTE KEINE FEHLER ODER NEUE GEW&Uuml;NSCHTE FEATURE F&Uuml;R DIE FUNKTION MELDEN.</div><br />

	<p>Eine Map ist eine Variable, die eine Reihe von Datenelementen enth&auml;lt, die jeweils 
       aus einer Schl&uuml;ssel/Wertpaarung bestehen. Auf ein Element kann nur &uuml;ber einen Schl&uuml;ssel
       zugegriffen werden, der entweder eine Zeichenkette oder eine ganze Zahl sein kann. 
       Ein Integer-Schl&uuml;ssel bezieht sich jedoch nicht auf die Position des Elements innerhalb
       der Map - diese stehen in keiner definierten Reihenfolge und k&ouml;nnen nicht sortiert werden.
       Bei String-Schl&uuml;sseln wird, nahezu einmalig in AutoIt, zwischen Gro&szlig;- und Kleinschreibung unterschieden -
	   <strong>"MyKey"</strong> ist nicht dasselbe wie <strong>"mykey"</strong>.<br>
       
	<p>Die Verwendung von leeren [ ] deklariert eine Map:</p>

@@SyntaxHighlighting@@
Local $mVar[] ; Eine Map
@@End@@
	<br>
	Ein Beispiel:<br>
	<br>
	Man m&ouml;chte eine Anzahl von Variablen in einer Map speichern, um sie als einen einzigen Parameter
    an eine Funktion zu &uuml;bergeben. Die Verwendung einer Map erm&ouml;glicht es, mit Hilfe von String-Schl&uuml;sseln 
    einen leicht verst&auml;ndlichen Verweis auf den enthaltenen Wert zu erstellen - wie z.B. die ControlIDs
    einer Reihe von Steuerelementen, die durch ihre Namen indiziert werden. Man beachte, dass Elemente 
    entweder durch [] oder die Punktnotation adressiert werden k&ouml;nnen:</p>


@@SyntaxHighlighting@@
Local $mControls[]
$mControls["Input"] = GUICtrlCreateInput(....)
$mControls.Combo = GUICtrlCreateCombo(...)
$mControls["Button"] = GUICtrlCreateButton(...)
@@End@@


	<p>Um auf einen bestimmten Wert in einer Map zuzugreifen, verwendet man den Schl&uuml;ssel -
       auch hier k&ouml;nnen beide Schreibweisen verwendet werden, m&uuml;ssen es aber zun&auml;chst nicht:</p>

@@SyntaxHighlighting@@
$idControlID = $mMap.Input ; Variable enth√§lt die ControlID f√ºr die Eingabe
$idControlID = $mMap["Combo"] ; Variable enth√§lt die ControlID f√ºr die Combo
@@End@@


	<p>Integer-Schl&uuml;ssel m&uuml;ssen die []-Notation verwenden und sind <strong>nicht dasselbe</strong> wie ihr String-&Auml;quivalent:</p>

@@SyntaxHighlighting@@
$mMap[3] = "Integer 3" ; dies sind separate Schl√ºssel
$mMap["3"] = "String 3"
@@End@@


	<p>Maps m&uuml;ssen vor der Verwendung deklariert werden, indem ihr G&uuml;ltigkeitsbereich mit den Schl&uuml;sselw&ouml;rtern  '<a href="../keywords/Dim.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Global/Local/Static</a>' festgelegt wird.</p>

@@SyntaxHighlighting@@
Local $mControls[]
@@End@@


	<h2>Datentypen in Maps</h2>

	<p>Ein Map-Element kann jeden AutoIt-Datentyp enthalten:</p>

@@SyntaxHighlighting@@
$mMap["Integer"] = 1
$mMap.Boolean = True
$mMap["String"] = "Text"
$mMap.Array = $aArray
$mMap["Map"] = $mAnotherMap
@@End@@


	<p>Auf eine interne Map kann direkt zugegriffen werden:</p>

@@SyntaxHighlighting@@
Local $mInternal[] ; Deklarieren einer Map
$mInternal["Internal"] = "AutoIt3" ; Zuweisung eines Wertes
Local $mContainer[] ; Deklarieren einer Container-Map
$mContainer.Bin = $mInternal ; die erste Map als Element zuweisen
; Alle diese Zuweisungen geben "AutoIt3" zur√ºck
$sString = $mContainer["Bin"]["Internal"]
$sString = $mContainer.Bin.Internal
$sString = $mContainer["Bin"].Internal
$sString = $mContainer.Bin["Internal"]
@@End@@

<a id="VariableNaming"></a>
	<h2>Variablennamen</h2>
	<p>Die in AutoIt verwendete Namenskonvention f&uuml;r Variablen basiert auf der <a rel="nofollow" class="external text" href="https://de.wikipedia.org/wiki/Ungarische_Notation">ungarischen Notation</a>.
	Das Pr&auml;fix definiert den logischen Datentyp, nicht den physikalischen: 
    Es gibt somit einen Hinweis darauf, welchen Zweck die Variable hat bzw. was sie repr&auml;sentiert. 
    Das Pr&auml;fix kodiert nicht den tats&auml;chlichen Datentyp: Dies geschieht bei der Zuweisung. 
    Siehe die unten aufgef&uuml;hrte Tabelle f&uuml;r akzeptierte Standards.</p>

<table>
<tr>
	<th> Pr&auml;fix </th>
	<th> umfasst den Datentyp </th>
	<th> Beispiel</th>
</tr>
<tr>
	<td> a </td>
	<td> Arrays </td>
	<td> $aArray[0]</td>
</tr>
<tr>
	<td> b </td>
	<td> Booleans (boolesche Werte) </td>
	<td> $bBool = True</td>
</tr>
<tr>
	<td> d </td>
	<td> Binaries </td>
	<td> $dBinary = Binary("0x80000000")</td>
</tr>
<tr>
	<td> e </td>
	<td> Konstante Variablen </td>
	<td> Local Const $eEulersConstant = 2.7182818284590452</td>
</tr>
<tr>
	<td> f </td>
	<td> Flie&szlig;kommazahlen </td>
	<td> $fFloat = 0.123</td>
</tr>
<tr>
	<td> h </td>
	<td> Handles (und GUI Handles) </td>
	<td> $hGUI = GUICreate("My GUI")</td>
</tr>
<tr>
	<td> i </td>
	<td> Integer </td>
	<td> $iInteger = 10</td>
</tr>
<tr>
	<td> id </td>
	<td> eine AutoIt ControlID </td>
	<td> $idButton_Ok = GUICtrlCreateButton("OK", 5, 5)</td>
</tr>
<tr>
	<td> m </td>
	<td> Maps </td>
	<td> $mMap[]</td>
</tr>
<tr>
	<td> n </td>
	<td> Zahlen im Allgemeinen (keine Pr&auml;ferenz) </td>
	<td> $nNumber = 0</td>
</tr>
<tr>
	<td> o </td>
	<td> Objekte </td>
	<td> $oShell = ObjCreate("shell.application")</td>
</tr>
<tr>
	<td> p </td>
	<td> Zeiger (Pointer) </td>
	<td> $pRect = DllStructGetPtr($tRECT)</td>
</tr>
<tr>
	<td> s </td>
	<td> Zeichenketten (und Zeichen) </td>
	<td> $sString = "Hallo Welt"</td>
</tr>
<tr>
	<td> t </td>
	<td> Strukturen </td>
	<td> $tSTRUCT = DllStructCreate($tagSTRUCT)</td>
</tr>
<tr>
	<td> tag </td>
	<td> Definition von Strukturen </td>
	<td> $tagDATE = "struct; word Year;word Month;word Day; endstruct"</td>
</tr>
<tr>
	<td>v </td>
	<td> Variant </td>
	<td> $vData = ClipGet()</td>
</tr>
</table>

	<p>Variablen werden nach folgendem Muster benannt:</p>

<table>
<tbody><tr>
	<th> Dollar Pr&auml;fix </th>
	<th> Typ (in Kleinschrift) </th>
	<th> [optional] Untertyp (in Kleinschrift) </th>
	<th> Var Name (erster Buchstabe in Gro&szlig;schrift)</th>
</tr>
<tr>
	<td> $ </td>
	<td> a </td>
	<td> h </td>
	<td> Handle</td>
</tr>
</table>

	<p>Beispiele:</p>
@@SyntaxHighlighting@@
; Weist einer lokalen Variablen die ganze Zahl 7 zu
$iWeekDays = 7

; Weist einer lokalen Variablen den wert von Pi zu
$fPi = 3.14159265358979

; Weist einer lokalen Variablen ein Array mit Strings zu
Local $asArray[7] = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]

; Weist einer lokalen Variablen ein Array mit Zahlrn zu
Local $anArray[4] = [0, 0.25, 3 / 4, 12]
@@End@@

	<h2>Initialisierung von Variablen</h2>
	<p>Bei der Initialisierung von Variablen gibt es mehrere Punkte zu beachten. Es ist keine gute Praxis, 
       durch Zuweisung von Daten, die nicht sofort ben&ouml;tigt werden, Speicher zu belegen. Es wird daher 
       empfohlen, Variablen erst unmittelbar vor ihrer Verwendung zu deklarieren und zu initialisieren. 
       Wenn man einer Variablen einen Standardwert zuweisen m&ouml;chte, den man sp&auml;ter &uuml;berschreiben will,
       dann sollten die Daten vom gleichen (oder der naheliegendsten Darstellung ihres) Typs sein und 
       so wenig Speicher wie m&ouml;glich verbrauchen.</p>

	<p>Beispiele:</p>
@@SyntaxHighlighting@@
; Inkonsistente Datentypen werden als schlecht angesehen
Local $iInteger = "0"
Local $sString = False

; Richtige Initialisierung
Local $iInteger = 0
Local $sString = ""
@@End@@


<p><br></p>
	<p>In der folgenden Tabelle sind f&uuml;r jeden Datentyp empfohlene Standardwerte angegeben. 
       Einige Datentypen haben mehr als einen m&ouml;glichen Standardwert, der f&uuml;r die Initialisierung verwendet werden kann.</p>

<table>
<tr>
	<th> Standardwert  </th>
	<th> umfasst die Datentypen</th>
</tr>
<tr>
	<td> Binary("") </td>
	<td> $d</td>
</tr>
<tr>
	<td> "" </td>
	<td> $s, $v</td>
</tr>
<tr>
	<td> 0 </td>
	<td> $a, $h, $i, $id, $m, $n, $o, $p, $t, $tag, $v</td>
</tr>
<tr>
	<td> 0.0 </td>
	<td> $f</td>
</tr>
<tr>
	<td> Null </td>
	<td> $o, $s, $v</td>
</tr>
<tr>
	<td> False (oder True) </td>
	<td> $b</td>
</tr>
</table>

<p><br></p>
	<p>Beispiel:</p>

@@SyntaxHighlighting@@
; Deklariert und initialisiert eine Variable mit dem empfohlenen Standardwert
Local $vUndefined = Null

; Einige Zeit sp√§ter
$vUndefined = 0xB0AD1CEA ; Bei Bedarf einen geeigneten Wert zuweisen
@@End@@

	<p>Um den Platzbedarf zu reduzieren, k&ouml;nnen mehrere Variablen in einer Zeile deklariert werden. 
       Bei der Deklaration mehrerer Variablen in einer Zeile ist es generell empfehlenswert, sich an die
       Deklaration eines Datentyps pro Zeile zu halten. Die Absicht hierbei ist, den Code in Zukunft 
       leichter nachvollziehbar und &uuml;berschaubar zu machen, jedoch kann selbst das beste Layout je nach den 
       Gegebenheiten variieren.</p>

	<p>Beispiel:</p>
@@SyntaxHighlighting@@
; Nicht empfohlen
Local $sString = "", $iInteger = 0, $asArray = ["a","b","c"] ; Gemischte Datentypen

; Empfohlen
Local $iLeft = 10, $iTop = 10 ; Integer
Local $idButton_Go = GUICtrlCreateButton("Go", $iLeft, $iTop) ; ControlIds
Local $idButton_Quit = GUICtrlCreateButton("Quit", 50, 10) ; ControlIds
@@End@@

	<p>In einigen Sprachen ist es zwingend erforderlich, Variablen bei der Deklaration zu initialisieren. 
       Bei AutoIt ist dies jedoch nicht der Fall. Bez&uuml;glich des Datentyps sollten Variablen, die deklariert
       werden ohne sie zu initialisieren, als undefiniert betrachtet werden.</p>

	<h2>G&uuml;ltigkeitsbereiche von Variablen (Scopes)</h2>
<p>Variablen sollten auch entsprechend ihres G&uuml;ltigkeitsbereichs (Scope) benannt werden.</p>

<table>

<tr>
	<th> Globale UDF Variable </th>
	<th> Globale Variable </th>
	<th> Lokale Variable</th>
</tr>
<tr>
	<td> $__g_iSomeVar </td>
	<td> $g_iSomeVar </td>
	<td> $iSomeVar</td>
</tr>
</table>

<p>Mit dieser Methode vermeiden Sie unerw&uuml;nschte Neuzuweisungen.</p><p>


</body>
</html>
