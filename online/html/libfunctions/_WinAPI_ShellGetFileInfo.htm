<!DOCTYPE html>
<html>
<head>
<title>Funktion _WinAPI_ShellGetFileInfo</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>

<body>
<h1 class="small">Funktionreferenz</h1>
<hr style="height:0px">
<div class="top"><h1>_WinAPI_ShellGetFileInfo</h1><div>
<div ><input id="toggleButton" type="image" onclick="Themes.toggleTheme()" src="../images/dark.png" height ="36" width="36" alt="Toggle Theme"></div><br />
<br style="clear: both;">
<p style="margin:2px 0 0 0;" class="funcdesc">Retrieves information about an object in the file system<br /></p>
<p class="codeheader">
#include &lt;WinAPIShellEx.au3&gt;<br />
_WinAPI_ShellGetFileInfo ( $sFilePath, $iFlags, $iAttributes, ByRef $tSHFILEINFO )<br />
</p>

<h2>Parameter</h2>
<table>
<tr>
<td style="width:15%">$sFilePath</td>
<td style="width:85%">String that contains the absolute or relative path and file name. This string can use either<br />
short (the 8.3 form) or long file names.<br />
<br />
If the $iFlags parameter includes the $SHGFI_PIDL flag, this parameter must be the address of an<br />
ITEMIDLIST (PIDL) structure that contains the list of item identifiers that uniquely identifies the<br />
file within the Shell's namespace. The pointer to an item identifier list (PIDL) must be a fully<br />
qualified PIDL. Relative PIDLs are not allowed.<br />
<br />
If the $iFlags parameter includes the $SHGFI_USEFILEATTRIBUTES flag, this parameter does not have<br />
to be a valid file name. The function will proceed as if the file exists with the specified name and<br />
with the file attributes passed in the $iAttributes parameter. This allows you to obtain information<br />
about a file type by passing just the extension for $sFilePath and passing $FILE_ATTRIBUTE_NORMAL<br />
in $iAttributes.<br />
</td>
</tr>
<tr>
<td>$iFlags</td>
<td>The flags that specify the file information to retrieve. This parameter can be a combination of the<br />
following values.<br />
$SHGFI_ATTR_SPECIFIED<br />
$SHGFI_ATTRIBUTES<br />
$SHGFI_DISPLAYNAME<br />
$SHGFI_EXETYPE<br />
$SHGFI_ICON<br />
$SHGFI_ICONLOCATION<br />
$SHGFI_LARGEICON<br />
$SHGFI_LINKOVERLAY<br />
$SHGFI_OPENICON<br />
$SHGFI_OVERLAYINDEX<br />
$SHGFI_PIDL<br />
$SHGFI_SELECTED<br />
$SHGFI_SHELLICONSIZE<br />
$SHGFI_SMALLICON<br />
$SHGFI_SYSICONINDEX<br />
$SHGFI_TYPENAME<br />
$SHGFI_USEFILEATTRIBUTES</td>
</tr>
<tr>
<td>$iAttributes</td>
<td>A combination of one or more file attribute flags ($FILE_ATTRIBUTE_*).</td>
</tr>
<tr>
<td>$tSHFILEINFO</td>
<td>$tagSHFILEINFO structure to receive the file information. This structure must be created before function call.</td>
</tr>
</table>

<h2>R&uuml;ckgabewert</h2>
<table class="noborder">
<tr>
<td style="width:10%" class="valign-top">Success:</td>
<td style="width:90%">If $iFlags contains the $SHGFI_EXETYPE flag, return type of the executable file. If $iFlags contains the<br />
$SHGFI_SYSICONINDEX&nbsp;flag, return handle to the system image list.</td>
</tr>
<tr>
<td class="valign-top">Failure:</td>
<td>0.</td>
</tr>
</table>

<h2>Bemerkungen</h2>
<p>If this function returns an icon handle in the "hIcon" member of the $tagSHFILEINFO structure, you are responsible<br />
for freeing it with <a href="_WinAPI_DestroyIcon.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_DestroyIcon()</a> when you no longer need it.<br />
</p>

<h2>Verwandte Funktionen</h2>
<p><a href="_WinAPI_DestroyIcon.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_DestroyIcon</a></p>

<h2>Siehe auch</h2>
<p>Suche nach <a href="http://msdn.microsoft.com/query/dev10.query?appId=Dev10IDEF1&l=EN-US&k=k(SHGetFileInfo);k(DevLang-C);k(TargetOS-WINDOWS)&rd=true">SHGetFileInfo</a> in der MSDN Bibliothek.
</p>

</body>
</html>
