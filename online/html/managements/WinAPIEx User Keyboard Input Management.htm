<!DOCTYPE html>
<html>
<head>
  <title>Benutzerdefinierte Funktionen</title>
  <meta charset="utf-8">
  <link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter prüfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>

<body>
<h1>User Keyboard Input Benutzerdefinierte Funktionsreferenz</h1>
<p>Es folgt eine Liste der benutzerdefinierten Funktionen die in AutoIt verfügbar sind.
Ein Klick auf einen Funktionsnamen liefert eine detaillierte Beschreibung.</p>
<p>Wenn diese Funktion verwendet wird, so muss <strong>#include &lt;WinAPISys.au3&gt;</strong> hinzugefügt werden.</p>
</p>
<p>&nbsp;</p>

<table>
<tr>
  <th style="width:25%">Benutzerdefinierte Funktion</th>
  <th style="width:75%">Beschreibung</th>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_ActivateKeyboardLayout.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_ActivateKeyboardLayout</a></td>
<td>Setzt den Eingabesprachenidentifizierer f&uuml;r den aufrufenden Thread oder den aktuellen Prozess<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_EnableWindow.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_EnableWindow</a></td>
<td>Aktiviert oder deaktiviert Maus- und Tastatureingaben im angegebenen Fenster oder Control<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_GetActiveWindow.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_GetActiveWindow</a></td>
<td>Retrieves the window handle to the active window attached to the calling process's message queue<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_GetAsyncKeyState.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_GetAsyncKeyState</a></td>
<td>Ermittelt ob eine Tastaturtaste zur Zeit des Funktionsaufrufs gedr&uuml;ckt ist oder nicht<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_GetIdleTime.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_GetIdleTime</a></td>
<td>Retrieves the time that has elapsed since the last input<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_GetKeyboardLayout.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_GetKeyboardLayout</a></td>
<td>Retrieves the active input locale identifier for the specified window<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_GetKeyboardLayoutList.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_GetKeyboardLayoutList</a></td>
<td>Retrieves the all input locale identifiers corresponding to the current set of input locales in the system<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_GetKeyboardState.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_GetKeyboardState</a></td>
<td>Copies the status of the 256 virtual keys to the specified buffer<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_GetKeyboardType.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_GetKeyboardType</a></td>
<td>Retrieves information about the current keyboard<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_GetKeyNameText.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_GetKeyNameText</a></td>
<td>Retrieves a string that represents the name of a key<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_GetKeyState.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_GetKeyState</a></td>
<td>Retrieves the status of the specified virtual key<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_IsLoadKBLayout.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_IsLoadKBLayout</a></td>
<td>Determines whether the specified input locale loaded into the system<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_Keybd_Event.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_Keybd_Event</a></td>
<td>Synthesizes a keystroke<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_LoadKeyboardLayout.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_LoadKeyboardLayout</a></td>
<td>Loads a new input locale identifier into the system<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_MapVirtualKey.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_MapVirtualKey</a></td>
<td>Translates a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_RegisterHotKey.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_RegisterHotKey</a></td>
<td>Defines a system-wide hot key<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_SetActiveWindow.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_SetActiveWindow</a></td>
<td>Activates the specified window<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_SetKeyboardLayout.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_SetKeyboardLayout</a></td>
<td>Sets an input locale identifier to the specified window<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_SetKeyboardState.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_SetKeyboardState</a></td>
<td>Copies a 256-byte array of keyboard key states into the calling process's keyboard input-state table<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_TrackMouseEvent.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_TrackMouseEvent</a></td>
<td>Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_UnloadKeyboardLayout.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_UnloadKeyboardLayout</a></td>
<td>Unloads an input locale identifier<br /></td>
</tr>
<tr>
<td><a href="..\..\html\libfunctions\_WinAPI_UnregisterHotKey.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_WinAPI_UnregisterHotKey</a></td>
<td>Frees a hot key previously registered by the calling thread<br /></td>
</tr>
</table>

</body>
