<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<link href="css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', 'css/' + this.theme);
				document.getElementById('toggleButton').src = 'images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter prüfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
	<title>GUI-Referenz - GUI-Konzepte</title>
	<meta charset="utf-8">
	<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter prüfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
	<style type="text/css">
	   span.c1 {text-decoration: underline}
	</style>
</head>
<body>
	<h1>GUI-Referenz - GUI-Konzepte</h1>
	<p>AutoIt bietet die M&ouml;glichkeit, einfache grafische Benutzeroberfl&auml;chen (Graphical User Interfaces, GUIs) zu erzeugen, die aus Fenstern und Controls (Steuerelementen) bestehen.</p>
	<h2>GUI-Konzepte</h2>
	<p>Ein GUI besteht aus einem oder mehreren <em>Fenstern</em> und jedes Fenster enth&auml;lt ein oder mehrere <em>Controls</em>. GUIs sind "ereignisbasiert", d.h., sie reagieren auf Ereignisse - z.B. auf den Klick auf einen Button. Die meiste Zeit verbringt man damit, auf Ereignisse zu warten - anders als in normalen Skripten, in denen man selbst kontrolliert, was passiert und wann es passiert. Man stellt sich, wie wenn man an der T&uuml;re auf den Brieftr&auml;ger wartet - man sitzt da, bis ein Brief in den Briefkasten geworfen wird, holt ihn heraus und entscheidet dann, was man damit machen will. Genauso funktioniert ein GUI prinzipiell - man wartet darauf, dass der Brieftr&auml;ger zu einem kommt.</p>
	<p>Nat&uuml;rlich kann man w&auml;hrend das GUI l&auml;uft auch andere Aufgaben durchf&uuml;hren. Man k&ouml;nnte z. B. eine Fortschrittsanzeige in dem GUI realisieren, die den Fortschritt komplexer Skriptaktionen darstellt.</p>
	<h2>GUI-Controls</h2>
	<p>Alle Computer-Nutzer sind mit Controls vertraut. Alles, was man anklickt oder mit dem man interagiert, ist eine Art von einem Control. Alle in AutoIt verf&uuml;gbaren Controls (die meisten kennt man aus anderen Windowsprogrammen) sind hier aufgelistet:</p>
	<table>
			<th>Funktion</th>
			<th>Erkl&auml;rung</th>
			<th>Bild</th>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Avi</li>
				</ul>
			</td>
			<td>Zeigt einen Videoclip im AVI-Format an.</td>
			<td><img src="../images/guiref/guiref_avi.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Button</li>
				</ul>
			</td>
			<td>Eine einfache Schaltfl&auml;che. Durch Anklicken dieser Schaltfl&auml;che kann zum Beispiel ein Programm gestartet werden.</td>
			<td><img src="../images/guiref/guiref_button.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Checkbox</li>
				</ul>
			</td>
			<td>Ein Kontrollk&auml;stchen, das markiert sein kann oder nicht.<br>
			Sind mehrere Kontrollk&auml;stchen vorhanden, so k&ouml;nnen diese standardm&auml;&szlig;ig unabh&auml;ngig voneinander an- oder abgehakt sein.</td>
			<td><img src="../images/guiref/guiref_checkbox.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Combo<br></li>
					<li>ComboBox</li>
				</ul>
			</td>
			<td>Ein Control (&uuml;bersetzt hei&szlig;t es Kombinationsfeld) mit einem Eingabefeld und einem ausklappbaren Auswahlmen&uuml;.<br>
			Durch einen Klick auf den Pfeil wird eine Liste mit dem Inhalt ausgeklappt.<br>
			Durch einen Klick auf einen Eintrag wird die Liste wieder zugeklappt und der Inhalt erscheint in dem Eingabefeld.</td>
			<td><img src="../images/guiref/guiref_combo.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>ContextMenu</li>
				</ul>
			</td>
			<td>Ein Men&uuml;, das erscheint, wenn man innerhalb des Fensters die rechte Maustaste bet&auml;tigt.</td>
			<td><img src="../images/guiref/guiref_contextmenu.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Date<br></li>
					<li>DTP (Date Time Picker)</li>
				</ul>
			</td>
			<td>Eine Datumsauswahl. Es kann zum Beispiel eingestellt werden, dass das Datum aus einem klassischen Kalender ausgew&auml;hlt werden kann.</td>
			<td><img src="../images/guiref/guiref_date.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Dummy</li>
				</ul>
			</td>
			<td>Eine Control-Atrappe die benutzerdefiniert verwendet werden kann.<br>
			Ein Dummy-Control wird nur sehr selten verwendet.<br>
			Damit k&ouml;nnen zum Beispielen von mehreren Checkboxen auf einmal der Status ge&auml;ndert werden</td>
			<td><br></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Edit<br></li>
					<li>RichEdit</li>
				</ul>
			</td>
			<td>Ein (mehrzeiliges) Eingabefeld, in das man Text eingeben kann.</td>
			<td><img src="../images/guiref/guiref_edit.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Graphic</li>
				</ul>
			</td>
			<td>Ein Control welches Grafiken anzeigt.</td>
			<td><img src="../images/guiref/guiref_graphic.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Header</li>
				</ul>
			</td>
			<td>Dies sind einzelne Spalten&uuml;berschriften. Man kann es auch als eine Art &Uuml;berschrift bezeichnen.</td>
			<td><img src="../images/guiref/guiref_header.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Imagelist</li>
				</ul>
			</td>
			<td>Diese Bilderliste enth&auml;lt mehrere Bilder die einem anderen Control zugewiesen werden k&ouml;nnen.</td>
			<td><img src="../images/guiref/guiref_imagelist.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>IP-Address</li>
				</ul>
			</td>
			<td>Durch dieses Control kann die IP-Adresse im gew&ouml;hnten Format eingegeben und dargestellt werden.</td>
			<td><img src="../images/guiref/guiref_ipaddress.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Icon</li>
				</ul>
			</td>
			<td>Ein statisches Control, welches ein Icon darstellt.</td>
			<td><img src="../images/guiref/guiref_icon.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Input</li>
				</ul>
			</td>
			<td>Ein einzeiliges Eingabefeld, in das man Text eingeben kann.<br>
			Damit kann zum Beispiel die Eingabe von einem Benutzername und Passwort erfolgen. Das Passwort l&auml;&szlig;t sich dann auch mit Sternchen "verstecken".</td>
			<td><img src="../images/guiref/guiref_input.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Label</li>
				</ul>
			</td>
			<td>Ein statisches Control, welches eine einfache Beschriftungsfl&auml;che darstellt.<br>
			Diese kann zu Beginn auch leer sein und erst im Laufe des Skripts mit Text gef&uuml;llt werden.</td>
			<td><img src="../images/guiref/guiref_label.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>List<br></li>
					<li>Listbox</li>
				</ul>
			</td>
			<td>Eine Liste mit Inhalt. Dieses Listenfenster &auml;hnelt sehr einem Edit-Control.</td>
			<td><img src="../images/guiref/guiref_list.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>ListView</li>
				</ul>
			</td>
			<td>Ein Control, das Informationen in Spalten anzeigt. Die einzelnen Eintr&auml;ge (Elemente) hei&szlig;en im englischen Items.</td>
			<td><img src="../images/guiref/guiref_listview.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Menu</li>
				</ul>
			</td>
			<td>Ein Men&uuml; an der oberen Kante des Fensters (Hauptmen&uuml;) wie man es bei jedem Windows-Programm kennt.</td>
			<td><img src="../images/guiref/guiref_menu.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Pic</li>
				</ul>
			</td>
			<td>Ein statisches Control, welches ein Bild darstellt.<br>
			Es kann zum Beispiel als Hintergrundbild der GUI dienen.</td>
			<td><img src="../images/guiref/guiref_pic.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Progress<br></li>
					<li>Progressbar</li>
				</ul>
			</td>
			<td>Ein Fortschrittsbalken, der zum Beispiel den Fortschritt einer Installation darstellen kann.</td>
			<td><img src="../images/guiref/guiref_progress.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Radio</li>
				</ul>
			</td>
			<td>Ein Optionsfeld, das markiert sein kann oder nicht.<br>
			Sind mehrere Kontrollk&auml;stchen vorhanden, so kann standardm&auml;&szlig;ig nur eines davon markiert oder nicht markiert sein.<br>
			So kann zum Beispiel durch das markieren eines Optionsfeldes ein anderes die Markierung verlieren.<br>
			Werden Optionsfelder zu Gruppen zusammengefasst, so k&ouml;nnen in einer GUI mehrere Optionsfelder gleichzeitig markiert sein.</td>
			<td><img src="../images/guiref/guiref_radio.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Rebar</li>
				</ul>
			</td>
			<td>Dies sind einzelne Gruppen (englisches Wort: band). Es k&ouml;nnen z. B. Buttons zusammengefasst werden und miteinander verschoben werden.<br>
			Jedoch k&ouml;nnen auch andere Controls wie zum Beispiel ein Edit-Control angelegt werden.</td>
			<td><img src="../images/guiref/guiref_rebar.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Scrollbar</li>
				</ul>
			</td>
			<td>Eine Bildlaufleiste mit der die GUI gescrollt werden kann und somit die GUI m&ouml;glichst klein gehalten werden kann.</td>
			<td><img src="../images/guiref/guiref_scrollbar.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Slider</li>
				</ul>
			</td>
			<td>Ein Schieberegler, der der Lautst&auml;rkeregelung von Windows &auml;hnelt.<br>
			Im englischen hei&szlig;t der Bereich des Sliders Range.</td>
			<td><img src="../images/guiref/guiref_slider.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Statusbar</li>
				</ul>
			</td>
			<td>Eine Statusleiste in der aktuelle Infos eingetragen werden k&ouml;nnen.<br>
			Im Explorer wird dort zum Beispiel angezeigt wie viele Objekte sich in dem aktuellen Ordner befinden.<br>
			Die einzelnen Abschnitte hei&szlig;en im englischen "parts".</td>
			<td><img src="../images/guiref/guiref_statusbar.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Tab</li>
				</ul>
			</td>
			<td>Ein Control mit Unterelementen, die auf Registerkarten platziert sind.<br>
			Dies ist sehr hilfreich, falls viele Controls vorhanden sind und die Gr&ouml;&szlig;e der GUI begrenzt ist.</td>
			<td><img src="../images/guiref/guiref_tab.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>Toolbar</li>
				</ul>
			</td>
			<td>Ein Toolbar ist eine Werkzeugleiste mit verschiedenen Buttons.</td>
			<td><img src="../images/guiref/guiref_toolbar.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>ToolTip</li>
				</ul>
			</td>
			<td>Dies ist ein Hinweistext der erscheint, wenn man mit dem Cursor &uuml;ber dem gew&uuml;nschten Control f&auml;hrt.<br>
			Dadurch kann zum Beispiel die Funktion eines Buttons n&auml;her erl&auml;utert werden.</td>
			<td><img src="../images/guiref/guiref_tooltip.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>TreeView</li>
				</ul>
			</td>
			<td>Eine Strukturansicht, die der Baumdarstellung im Windows Explorer &auml;hnelt. Die einzelnen Eintr&auml;ge hei&szlig;en im englischen Items.<br>
			In diesem Zusammenhang tauchen auch folgende W&ouml;rter auf: parent = Eltern, child = Kind</td>
			<td><img src="../images/guiref/guiref_treeview.jpg"></td>
		</tr>
		<tr>
			<td>
				<ul>
					<li>UpDown</li>
				</ul>
			</td>
			<td>Pfeiltasten, die zu Textfeldern hinzugef&uuml;gt werden k&ouml;nnen, um den Wert bequem zu vergr&ouml;&szlig;ern oder verkleinern.</td>
			<td><img src="../images/guiref/guiref_updown.jpg"></td>
		</tr>
		<tr>
			<td></td>
		</tr>
	</table><br>
	<p>Hier ein Beispiel eines einzigen GUI-Fensters, das viele der verf&uuml;gbaren Controls enth&auml;lt. Man sieht, dass selbst komplexe und detaillierte GUIs m&ouml;glich sind!</p>
	<p><img alt="" src="../images/SampleGuiScreenshot.png"></p>
	<p></p>
	<p>Controls werden mit der <a href="../functions/GUICtrlCreate%20Management.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUICtrlCreate...</a>-Funktionsgruppe erzeugt. Wenn ein Control erzeugt wird, wird eine <strong>Control-ID</strong> (Identifizierer des Controls) zur&uuml;ckgegeben. Das wichtigste, was man &uuml;ber diese Control-ID wissen muss:</p>
	<p></p>
	<ul>
		<li>Die Control-ID ist eine positive Zahl (also eine Ganzzahl gr&ouml;&szlig;er als 0)</li>
		<li>Jede Control-ID wird nur einmal vergeben, selbst wenn es mehrere Fenster gibt.</li>
		<li>Die Control-ID ist derselbe Wert, den das <a href="../intro/au3spy.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">AutoIt Window Info Tool</a> anzeigt.</li>
	</ul>
	<h2>Basis-GUI-Funktionen</h2>
	<p>Es folgenden die Funktionen, die man am h&auml;ufigsten zum Entwurf einer GUI ben&ouml;tigt. Es sind nur die einfachen Funktionen, es gibt noch viele weitere, die es erlauben, detaillierte GUIs zu erzeugen.</p>
	<table>
		<tr>
			<th>Funktion</th>
			<th>Erkl&auml;rung</th>
		</tr>
		<tr>
			<td>
				<a href="../functions/GUICreate.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUICreate</a>
			</td>
			<td>Erzeugt ein Fenster.</td>
		</tr>
		<tr>
			<td>
				<a href="../functions/GUICtrlCreate%20Management.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUICtrlCreate...</a>
			</td>
			<td>Erzeugt verschiedene Controls in einem Fenster.</td>
		</tr>
		<tr>
			<td>
				<a href="../functions/GUISetState.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUISetState</a>
			</td>
			<td>Zeigt oder versteckt ein Fenster.</td>
		</tr>
		<tr>
			<td>
				<a href="../functions/GUIGetMsg.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUIGetMsg</a>
			</td>
			<td>Findet heraus, ob ein GUI-Ereignis aufgetreten ist (nur im MessageLoop-Modus).</td>
		</tr>
		<tr>
			<td>
				<a href="../functions/GUICtrlRead.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUICtrlRead</a>
			</td>
			<td>Liest Daten aus einem Control.</td>
		</tr>
		<tr>
			<td>
				<a href="../functions/GUICtrlSetData.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUICtrlSetData</a>
			</td>
			<td>Setzt/ver&auml;ndert Daten in einem Control.</td>
		</tr>
		<tr>
			<td>
				<a href="../functions/GUICtrlUpdate%20Management.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUICtrlUpdate...</a>
			</td>
			<td>Ver&auml;ndert verschiedene Eigenschaften von Controls (Farbe, Stil, etc.).</td>
		</tr>
	</table><br>
	<p>Man muss #include f&uuml;r die Standard-GUI notwendigen Konstanten in sein Skript einf&uuml;gen. Es gibt auch <a href="GUIConstants.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">andere Dateien</a> die Konstanten enthalten je nachdem welche Controls man in seiner GUI erzeugt.</p>
	<p></p>
	<p>Erzeugen wir zun&auml;chst ein Fenster mit dem Titel "Hallo Welt" und setzen die Gr&ouml;&szlig;e auf 200 mal 100 Pixel. Wenn ein neues Fenster erzeugt wird, ist es zun&auml;chst versteckt - wir m&uuml;ssen es also noch anzeigen ("show"):</p>
@@SyntaxHighlighting@@
#include <GUIConstantsEx.au3>

GUICreate("Hallo Welt", 200, 100)
GUISetState(@SW_SHOW)
Sleep(2000)
@@End@@

  <p>&nbsp;</p>
	<p>Wenn man das obige Skript ausf&uuml;hrt, sieht man wie sich das Fenster &ouml;ffnet und nach 2 Sekunden wieder schlie&szlig;t - nicht gerade interessant... F&uuml;gen wir ein bisschen Text und einen Ok-Button hinzu! Der Text wird an der Position 30, 10 und der Button bei 70, 50 erscheinen. Der Button wird 60 Pixel breit sein:</p>
@@SyntaxHighlighting@@
#include <GUIConstantsEx.au3>
	GUICreate("Hallo Welt", 200, 100)
	GUICtrlCreateLabel("Hallo Welt! Wie geht es dir?", 30, 10)
	GUICtrlCreateButton("OK", 70, 50, 60)
	GUISetState(@SW_SHOW)
	Sleep(2000)
@@End@@

  <p>&nbsp;</p>
	<p>Das sieht doch schon ganz gut aus. Aber wie lassen wir das GUI auf unseren Klick auf den Button reagieren? Nun, das ist der Punkt, an dem wir eine Entscheidung dar&uuml;ber treffen m&uuml;ssen, wie wir Ereignisse verarbeiten wollen - entweder via einer Nachrichtenschleife (<strong>MessageLoop</strong>) <u>oder</u> via Ereignisfunktionen (<strong>OnEvent</strong>).</p>
	<p></p>
	<h2>GUI-Ereignis-Modi</h2>
	<p>Wie oben erw&auml;hnt gibt es zwei grundlegende GUI-Modi: den <strong>MessageLoop</strong>Modus und den <strong>OnEvent</strong> Modus. Die Modi sind einfach zwei verschiedene Wege, um auf GUI-Ereignisse zu reagieren. Welchen Modus man w&auml;hlt, h&auml;ngt von der <em>pers&ouml;nlichen Vorliebe</em> ab und bis zu einem gewissen Grad davon, welchen GUI-Typ man erzeugen will. Mit beiden Modi kann man jedes gew&uuml;nschte GUI erzeugen, aber manchmal ist ein Modus passender f&uuml;r eine Aufgabe als der andere.</p>
	<p>Der &uuml;bliche (Standard) Modus ist der MessageLoop Modus. Um auf den OnEvent Modus umzuschalten ist <a href="../functions/AutoItSetOption.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"#GUIOnEventMode>Opt("GUIOnEventMode", 1)</a> zu verwenden.</p>
	<p></p>
	<p></p>
	<p><strong>MessageLoop Modus (Standard)</strong></p>
	<p>Im MessageLoop Modus wird das Skript die meiste Zeit in einer engen Schleife verbringen. Diese Schleife wird einfach st&auml;ndig das GUI mit der <a href="../functions/GUIGetMsg.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">GUIGetMsg</a> Funktion abfragen. Wenn ein Ereignis aufgetreten ist, zeigt der R&uuml;ckgabewert der GUIGetMsg Funktion die Details an (ein Button wurde angeklickt, das GUI wurde geschlossen, etc.).</p>
	<p>In diesem Modus wird man nur von Ereignissen erfahren solange man aktiv immer wieder die GUIGetMsg Funktion aufruft; deshalb muss man sicherstellen, dass man sie viele Male pro Sekunde aufruft, sonst wird das GUI nicht reagieren.</p>
	<p><em>Dieser Modus ist am besten f&uuml;r GUIs geeignet, wenn das GUI der "K&ouml;nig" ist und man nur auf Benutzeraktionen wartet.</em></p>
	<p>Auf <a href="GUIRef_MessageLoopMode.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">dieser Seite</a> findet man eine detailliertere Erkl&auml;rung des <a href="GUIRef_MessageLoopMode.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">MessageLoop Modus</a>.</p>
	<p></p>
	<p><strong>OnEvent Modus</strong></p>
	<p>Anstatt das GUI st&auml;ndig abzufragen, um herauszufinden ob etwas passiert ist, l&auml;sst man im OnEvent Modus das GUI zeitweise das Skript anhalten und eine vordefinierte Funktion aufrufen, um das Ereignis zu behandeln. Wenn zum Beispiel ein Nutzer auf Button1 klickt, h&auml;lt das GUI dein Hauptskript an und ruft eine vorher von dir definierte Funktion auf, die f&uuml;r Button1 zust&auml;ndig ist. Wenn diese Funktion abgearbeitet ist, wird das Hauptskript fortgesetzt. Dieser Modus ist &auml;hnlich wie die Visual Basic Formular-Methode.</p>
	<p><em>Dieser Modus ist am besten f&uuml;r GUIs geeignet, wenn das GUI weniger wichtig ist und dein Skript zus&auml;tzlich zum GUI andere Aufgaben zu erf&uuml;llen hat.</em></p>
	<p>Auf <a href="GUIRef_OnEventMode.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">dieser Seite</a> findet man eine detailliertere Erkl&auml;rung des <a href="GUIRef_OnEventMode.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">OnEvent</a> Modus.</p>

</body>
</html>
