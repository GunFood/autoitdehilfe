<!DOCTYPE html>
<html>
<head>
  <title>Array UDF - Script Breaking Changes</title>
  <meta charset="utf-8">
  <link href="css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', 'css/' + this.theme);
				document.getElementById('toggleButton').src = 'images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>
<body>
<h1>Array UDF - Script Breaking Changes</h1>
The Array UDF has been almost completely rewritten to support 2D arrays, to improve the speed of multiple insertion and deletions and correct bugs.<br />
This means that scripts written for AutoIt up to version 3.3.12.0 might not run correctly with later versions and may need to be modified.<br />
The following table lists the differences between the old and the new version.
<br /><br />
<strong>Changed functions/parameters</strong>
<table>
  <tr>
    <th class=width25>UDF Function/Parameter</th>
    <th>Comments</th>
  </tr>
 <tr>
  <td>All changed functions</td>
  <td>Values returned in @error on function error may well have changed - details on specific Help file pages.</td>
 </tr>
 <tr>
  <td>_ArrayAdd</td>
  <td>Now supports 2D arrays and can add multiple lines in one call.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$vValue</td>
  <td>Altered: Value(s) to add - can be a single item, a delimited string or an array.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iStart</td>
  <td>Added: If adding data to a 2D array, the column at which the insertion starts in each row (default = 0).</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$sDelim_Item<br />&nbsp;&nbsp;&nbsp;$sDelim_Row</td>
  <td>Added: If data passed as a delimited string these determine the number of rows/columns to be added.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iForce</td>
  <td>Added: Changes function behaviour - either forces addtion of added data as a single item or forces datatype for added items</td>
 </tr>
 <tr>
  <td>_ArrayBinarySearch</td>
  <td>Now supports 2D arrays.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iColumn</td>
  <td>Added: 0-based index of column to search (default = 0).</td>
 </tr>
 <tr>
  <td>_ArrayConcatenate</td>
  <td>Now supports 2D array swith equal number of columns.</td>
 </tr>
 <tr>
  <td>_ArrayDelete</td>
  <td>Now support multiple deletions.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$vRange</td>
  <td>Altered: Element(s) to delete - either a single index, a range string or a 1D array with a count in the [0] element</td>
 </tr>
 <tr>
  <td>_ArrayDisplay</td>
  <td>Buttons at bottom of dialog can be hidden</td>
 </tr>
 <tr>
  <td>_ArrayFindAll</td>
  <td>Now supports searching 2D arrays by row as well as by column</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$fRow</td>
  <td>Added: If set to True, $iSubItem determines the row and not the column in a 2D array.</td>
 </tr>
 <tr>
  <td> _ArrayInsert</td>
  <td>Now supports 2D arrays and can insert multiple lines in the same or different positions in one call.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$vRange</td>
  <td>Altered: Element(s) above which the insertion is to take place - either a single index, a range string or a 1D array with a count in the [0] element</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$vValue</td>
  <td>Added: Value(s) to insert - can be a single item, a delimited string or an array.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iStart</td>
  <td>Added: If inserting data to a 2D array, the column at which the insertion starts in each row (default = 0).</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$sDelim_Item<br />&nbsp;&nbsp;&nbsp;$sDelim_Row</td>
  <td>Added: If data is passed as a delimited string these determine the number of rows/columns to be added.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$hDataType</td>
  <td>Added: If $vValue is a delimited string the data is converted to a string.  Assigning a datatype function (Number, HWnd, etc) forces it into that datatype</td>
 </tr>
 <tr>
  <td>_ArrayMax</td>
  <td>Now supports 2D arrays.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iSubItem</td>
  <td>Added: 0-based column to search.</td>
 </tr>
 <tr>
  <td>_ArrayMaxIndex</td>
  <td>Now supports 2D arrays.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iSubItem</td>
  <td>Added: 0-based column to search.</td>
 </tr>
 <tr>
  <td>_ArrayMin</td>
  <td>Now supports 2D arrays.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iSubItem</td>
  <td>Added: 0-based column to search.</td>
 </tr>
 <tr>
  <td>_ArrayMinIndex</td>
  <td>Now supports 2D arrays.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iSubItem</td>
  <td>Added: 0-based column to search.</td>
 </tr>
 <tr>
  <td>_ArraySearch</td>
  <td>Now supports searching 2D arrays by row as well as by column</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$fRow</td>
  <td>Added: If set to True, $iSubItem determines the row and not the column in a 2D array.</td>
 </tr>
 <tr>
  <td>_ArraySwap</td>
  <td>Completely rewritten to swap full or part columns/rows within a 2D array</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iIndex_1<br />&nbsp;&nbsp;&nbsp;$iIndex_2</td>
  <td>Altered: Index of the rows/columns to swap</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp; $bCol</td>
  <td>Added: If set to True, $iIndex_1 and $iIndex_2 determine the column and not the row.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iStart<br />&nbsp;&nbsp;&nbsp;$iEnd</td>
  <td>Added: Elements within the rows/columns to swap.</td>
 </tr>
 <tr>
  <td>_ArrayToClip</td>
  <td>Now just a simple wrapper for _ArrayToString.  See details of parameters for that function.</td>
 </tr>
 <tr>
  <td>_ArrayToString</td>
  <td>Now supports 2D arrays</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$sDelim_Item<br />&nbsp;&nbsp;&nbsp;$sDelim_Row</td>
  <td>Added: Determine the column/row delimiters.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iStart_Row<br />&nbsp;&nbsp;&nbsp;$iEnd_Row</td>
  <td>Added: Limit the rows to extract.</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iStart_Col<br />&nbsp;&nbsp;&nbsp;$iEnd_Col</td>
  <td>Added: Limit the columns to extract.</td>
 </tr>
 <tr>
  <td>_ArrayTranspose</td>
  <td>Now transposes 1D arrays</td>
 </tr>
 <tr>
  <td>_ArrayTrim</td>
  <td>Now supports 2D arrays</td>
 </tr>
 <tr>
  <td>&nbsp;&nbsp;&nbsp;$iSubItem</td>
  <td>Added:  Column to trim</td>
 </tr>
<tr>
  <td>_ArrayUnique</td>
  <td>For consistency with all other functions $iColumn is now 0-based, not 1-based</td>
 </tr>
</table>
<br /><br />
<strong>New functions/parameters</strong>
<table>
  <tr>
    <th class=width25>New UDF<br />Function</th>
    <th>Comments</th>
  </tr>
 <tr>
  <td>_ArrayColInsert</td>
  <td>This function is used to insert columns into 1D or 2D arrays.</td>
 </tr>
 <tr>
  <td>_ArrayColDelete</td>
  <td>This function is used to delete columns from 2D arrays.</td>
 </tr>
 <tr>
  <td>_ArrayExtract</td>
  <td>This function extracts a smaller array from inside 1D and 2D arrays.</td>
 </tr>
 <tr>
  <td>_ArrayShuffle</td>
  <td>This function uses the FisherYates algorithm to shuffle all or some of the rows of 1D and 2D arrays. The shuffle can be limited to a specific column in a 2D array.</td>
 </tr>
</table>
<br /><br />
<strong>Unchanged functions</strong>
<table>
  <tr>
    <th class=width25>Unchanged UDF Function</th>
  </tr>
 <tr>
  <td>_ArrayCombinations</td>
 </tr>
 <tr>
  <td>_ArrayPermute</td>
 </tr>
<tr>
  <td>_ArrayPop</td>
 </tr>
<tr>
  <td>_ArrayPush</td>
 </tr>
<tr>
  <td>_ArrayReverse</td>
 </tr>
</table></body>
</html>
