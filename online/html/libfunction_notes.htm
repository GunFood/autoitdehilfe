<!DOCTYPE html>
<html>
<head>
	<title>Hinweise zu den benutzerdefinierten Funktionen</title>
	<meta charset="utf-8">
	<link href="css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', 'css/' + this.theme);
				document.getElementById('toggleButton').src = 'images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>
<body>
	<h1>Hinweise zu den benutzerdefinierten Funktionen</h1>
	<p>Es wurden einige Dateien aufgenommen, die jeweils ma&szlig;gebende Funktionen enthalten, sogenannte  <strong>D</strong>efined <strong>F</strong>unctions.<br>
	UDF's sind Funktionen/Scriptlets, die in AutoIt3 geschrieben sind und mit #include in eigene Skripte eingebunden und benutzt werden k&ouml;nnen, ohne dass sie selbst geschrieben oder jedes mal kopiert und eingef&uuml;gt werden m&uuml;ssen, wenn sie gebraucht werden.<br>
	User Defined Functions ist englisch und bedeutet benutzerdefinierte Funktionen</p>
  <h2>Example</h2>
@@SyntaxHighlighting@@
#include <Date.au3>
#include <MsgBoxConstants.au3>

MsgBox($MB_SYSTEMMODAL,"Das heutige Datum lautet " & _Now())
@@End@@

	<p>Dieses Skript zeigt das aktuelle Datum im Datumsformat ihres PC an, z.B. "03.05.2007 17:23:45"</p>
	<p></p>
	<p>Viele UDF's besitzen optionale Parameter, die weggelassen werden k&ouml;nnen. Falls sie einen optionalen Parameter angeben wollen, m&uuml;ssen jedoch alle vorhergehenden Parameter mit angegeben werden.<br>
	Schauen sie sich als Beipiel dazu folgende Funktion an: <em><a href="libfunctions/_ArraySort.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">_ArraySort</a></em> ( ByRef $a_Array [, $i_Descending [, $i_Base=0 [, $i_Ubound=0 [, $i_Dim=1 [, $i_SortIndex=0 ]]]]] )<br />
	Wenn einem Parameter ByRef vorausgeht, bedeutet dies, dass die Funktion die &uuml;bergebene Variable mit einem neuen Wert aktualisieren wird. Diese Parameter m&uuml;ssen eine Variable ($xyz) sein und d&uuml;rfen also keine Konstante sein!<br></p>
	<p>Die meisten UDF's geben Erfolg/Fehler als <strong>R&uuml;ckgabewert</strong> an; andere Funktionen setzen daf&uuml;r das <strong>@error Flag</strong>. Manche tun auch beides....<br>
	@error = 0 ;bedeutet immer Erfolg<br>
	Return = variiert, ist aber normalerweise nicht-Null f&uuml;r Erfolg, um einfach zu lesenden Code zu erm&ouml;glichen...<br>
	<br>
	<strong>Falls eine Funktion das @error-Flag setzt, sollte es immer vor dem R&uuml;ckgabewert gepr&uuml;ft werden! Falls @error einen Fehler anzeigt, ist der R&uuml;ckgabewert im allgemeinen undefiniert...</strong><br></p>
</body>
</html>
