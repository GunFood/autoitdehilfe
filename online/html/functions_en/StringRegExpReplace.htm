<!DOCTYPE html>
<html>
<head>
<title>Function StringRegExpReplace</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet">
</head>

<body>
<h1 class="small">Function Reference</h1>
<hr style="height:0px">
<h1 style="float:left; margin:15px 0 0 0; padding:0 0 0 0;">StringRegExpReplace</h1><br />
<a href="../functions/StringRegExpReplace.htm"><img src="../images/Flagge_de.gif" height="29" width="36" border=0 hspace=10 style="float:right"/></a><br />
<div style="display:block; text-align:right;">Show description in</div><br />
<p style="margin:2px 0 0 0;" class="funcdesc">Replace text in a string based on regular expressions.<br /></p>
<p class="codeheader">
StringRegExpReplace ( "test", "pattern", "replace" [, count = 0] )<br />
</p>

<h2>Parameters</h2>
<table>
<tr>
<td style="width:15%">test</td>
<td style="width:85%">The string to check</td>
</tr>
<tr>
<td>pattern</td>
<td>The regular expression to compare. See <A href="StringRegExp.htm">StringRegExp</a> for pattern definition characters.</td>
</tr>
<tr>
<td>replace</td>
<td>The text to replace the regular expression matching text with. To insert matched group text, \0 - \9 (or $0 - $9) can be used<strong> as</strong> back-references. (See remarks)</td>
</tr>
<tr>
<td>count</td>
<td><strong>[optional]</strong> The number of times to execute the replacement in the string. The default is 0. Use 0 for global replacement.</td>
</tr>
</table>

<h2>Return Value</h2>
<table class="noborder">
<tr>
<td style="width:10%" class="valign-top">Success:</td>
<td style="width:90%">an updated string based on regular expressions. Check @extended for the number of replacements performed.</td>
</tr>
<tr>
<td class="valign-top">Failure:</td>
<td>sets the @error flag to non-zero.</td>
</tr>
<tr>
<td class="valign-top">@error:</td>
<td>2 = Pattern invalid. @extended = offset of error in pattern.</td>
</tr>
</table>

<h2>Remarks</h2>
<p>To separate back-reference replacements from actual (replaced) numbers, wrap them with curly braces, i.e: "${1}5".<br />
If a "\" needs to be in the replaced string it must be doubled. This is a consequence of the back-references mechanism.<br />
The "\" and "$" replacement formats are the only valid back-references formats supported.<br />
<br />
See also the <a href="../tutorials/regexp/regexp.htm">Regular Expression</a> tutorial, in which you can run a script to test your regular expression(s).<br />
</p>

<h2>Related</h2>
<p><a href="StringRegExp.htm">StringRegExp</a>, <a href="StringReplace.htm">StringReplace</a></p>

<h2 class="bottom">Example</h2>
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
function copyToClipboard(section) {
if (window.clipboardData && clipboardData.setData) {
clipboardData.setData("text", section + "\r\n");
alert("Copied to clipboard");
}
}
</script>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Open this Script"><param name="Item1" value=",Examples\\HelpFile\\StringRegExpReplace.au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext1\').innerText)">Copy to clipboard<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext1">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;MsgBoxConstants.au3&gt;</span>

<span class="S0">Test1</span><span class="S8">()</span>
<span class="S0">Test2</span><span class="S8">()</span>
<span class="S0">Test3</span><span class="S8">()</span>

<span class="S1">; This example demonstrates a basic replacement. &nbsp;It replaces the vowels aeiou</span>
<span class="S1">; with the @ character.</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Func</span></a><span class="S0"> Test1</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$sInput</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"Where have all the flowers gone, long time passing?"</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$sOutput</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExpReplace.htm"><span class="S4">StringRegExpReplace</span></a><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"[aeiou]"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"@"</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; Display</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">EndFunc</span></a><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Test1</span>

<span class="S1">; The following example demonstrates using back-references to change the date</span>
<span class="S1">; from MM/DD/YYYY to DD.MM.YYYY</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Func</span></a><span class="S0"> Test2</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$sInput</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">'some text1 12/31/2009 01:02:03 some text2'</span><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S0"> </span><span class="S8">&amp;</span><span class="S0"> </span><span class="S8">_</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S7">'some text3 02/28/2009 11:22:33 some text4'</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$sOutput</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExpReplace.htm"><span class="S4">StringRegExpReplace</span></a><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'(\d</span><span class="S10">{2}</span><span class="S7">)/(\d</span><span class="S10">{2}</span><span class="S7">)/(\d</span><span class="S10">{4}</span><span class="S7">)'</span><span class="S8">,</span><span class="S0"> </span><span class="S7">' $2.$1.$3 '</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; Display</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">EndFunc</span></a><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Test2</span>

<span class="S1">; The following example demonstrates the need to double backslash</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Func</span></a><span class="S0"> Test3</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$sInput</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">'%CommonProgramFiles%\Microsoft Shared\'</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$sOutput</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExpReplace.htm"><span class="S4">StringRegExpReplace</span></a><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'%([^%]*?)%'</span><span class="S8">,</span><span class="S0"> </span><span class="S7">'C:\\WINDOWS\\Some Other Folder$'</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; Display</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">EndFunc</span></a><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Test3</span>

<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Func</span></a><span class="S0"> Display</span><span class="S8">(</span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S1">; Format the output.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$sMsg</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringFormat.htm"><span class="S4">StringFormat</span></a><span class="S8">(</span><span class="S7">"Input:\t%s\n\nOutput:\t%s"</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sInput</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sOutput</span><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Results"</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sMsg</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">EndFunc</span></a><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Display</span>
<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
</body>
</html>
