<!DOCTYPE html>
<html>
<head>
<title>Keyword $tagSTARTUPINFO</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>

<body>
<h1 class="small">Keyword Reference</h1>
<hr style="height:0px">
<div class="top"><h1>$tagSTARTUPINFO</h1><div>
<div id="flagtext">Show description in</div>
<div id="flaglink"> <a href="../libfunctions/$tagSTARTUPINFO.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"><img src="../images/Flagge_de.png" height="29" width="36" border=0 hspace=10/></a></div>
<div ><input id="toggleButton" type="image" onclick="Themes.toggleTheme()" src="../images/dark.png" height ="36" width="36" alt="Toggle Theme"></div><br />
<br style="clear: both;">
<p style="margin:2px 0 0 0;" class="funcdesc">Specifies the window station, desktop, standard handles, and appearance of the main window for a process at creation time<br /></p>
<p class="codeheader">
Global Const $tagSTARTUPINFO = "int Size;ptr Reserved1;ptr Desktop;ptr Title;int X;int Y;int XSize;int YSize;int XCountChars;" & _<br />
	"int YCountChars;int FillAttribute;int Flags;short ShowWindow;short Reserved2;ptr Reserved3;int StdInput;" & _<br />
	"int StdOutput;int StdError"<br />
</p>

<h2>Parameters</h2>
<table>
<tr>
<td style="width:15%">Size</td>
<td style="width:85%">The size of the structure, in bytes</td>
</tr>
<tr>
<td>Reserved1</td>
<td>Reserved, must be zero</td>
</tr>
<tr>
<td>Desktop</td>
<td>The name of the desktop, or the name of both the desktop and window station for this process</td>
</tr>
<tr>
<td>Title</td>
<td>For console processes, the title displayed in the title bar if a new console is created</td>
</tr>
<tr>
<td>X</td>
<td>If Flags specifies $STARTF_USEPOSITION, this member is the x offset of the upper left corner of a window if a new window is created, in pixels.</td>
</tr>
<tr>
<td>Y</td>
<td>If Flags specifies $STARTF_USEPOSITION, this member is the y offset of the upper left corner of a window if a new window is created, in pixels.</td>
</tr>
<tr>
<td>XSize</td>
<td>If Flags specifies $STARTF_USESIZE, this member is the height of the window, in pixels</td>
</tr>
<tr>
<td>YSize</td>
<td>If Flags specifies $STARTF_USESIZE, this member is the width of the window, in pixels</td>
</tr>
<tr>
<td>XCountChars</td>
<td>If Flags specifies $STARTF_USECOUNTCHARS, if a new console window is created in a console process, this member specifies the screen buffer width, in character columns.</td>
</tr>
<tr>
<td>YCountChars</td>
<td>If Flags specifies $STARTF_USECOUNTCHARS, if a new console window is created in a console process, this member specifies the screen buffer height, in character rows.</td>
</tr>
<tr>
<td>FillAttribute</td>
<td>If Flags specifies $STARTF_USEFILLATTRIBUTE, this member is the initial text and background colors if a new console window is created in a console application.</td>
</tr>
<tr>
<td>Flags</td>
<td>Determines which members are used when the process creates a window:<br />
&nbsp;&nbsp;&nbsp; $STARTF_FORCEONFEEDBACK - The cursor is in feedback mode for two seconds after CreateProcess is called.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; The Working in Background cursor is displayed.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; If during those two seconds the process makes the first GUI call, the system gives five more seconds to the process.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; If during those five seconds the process shows a window, the system gives five more seconds to the process to finish drawing the window.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; The system turns the feedback cursor off after the first call to GetMessage, regardless of whether the process is drawing.<br />
&nbsp;&nbsp;&nbsp; $STARTF_FORCEOFFFEEDBACK - Indicates that the feedback cursor is forced off while the process is starting.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; The Normal Select cursor is displayed.<br />
&nbsp;&nbsp;&nbsp; $STARTF_RUNFULLSCREEN - Indicates that the process should be run in full screen mode, rather than in windowed mode.<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; This flag is only valid for console applications running on an x86 computer.<br />
&nbsp;&nbsp;&nbsp; $STARTF_USECOUNTCHARS - The XCountChars and YCountChars members are valid<br />
&nbsp;&nbsp;&nbsp; $STARTF_USEFILLATTRIBUTE - The FillAttribute member is valid<br />
&nbsp;&nbsp;&nbsp; $STARTF_USEPOSITION - The X and Y members are valid<br />
&nbsp;&nbsp;&nbsp; $STARTF_USESHOWWINDOW - The ShowWindow member is valid<br />
&nbsp;&nbsp;&nbsp; $STARTF_USESIZE - The XSize and YSize members are valid<br />
&nbsp;&nbsp;&nbsp; $STARTF_USESTDHANDLES - The hStdInput, hStdOutput, and hStdError members are valid</td>
</tr>
<tr>
<td>ShowWindow</td>
<td>If Flags specifies $STARTF_USESHOWWINDOW, this member can be any of the SW_ constants</td>
</tr>
<tr>
<td>Reserved2</td>
<td>Reserved, must be zero</td>
</tr>
<tr>
<td>Reserved3</td>
<td>Reserved, must be zero</td>
</tr>
<tr>
<td>StdInput</td>
<td>If Flags specifies $STARTF_USESTDHANDLES, this member is the standard input handle</td>
</tr>
<tr>
<td>StdOutput</td>
<td>If Flags specifies $STARTF_USESTDHANDLES, this member is the standard output handle</td>
</tr>
<tr>
<td>StdError</td>
<td>If Flags specifies $STARTF_USESTDHANDLES, this member is the standard error handle</td>
</tr>
</table>

</body>
</html>
