<!DOCTYPE html>
<html>
<head>
<title>Function DllCallAddress</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet">
</head>

<body>
<h1 class="small">Function Reference</h1>
<hr style="height:0px">
<h1 style="float:left; margin:15px 0 0 0; padding:0 0 0 0;">DllCallAddress</h1><br />
<a href="../functions/DllCallAddress.htm"><img src="../images/Flagge_de.gif" height="29" width="36" border=0 hspace=10 style="float:right"/></a><br />
<div style="display:block; text-align:right;">Show description in</div><br />
<p style="margin:2px 0 0 0;" class="funcdesc">Dynamically calls a function at a specific memory address.<br /></p>
<p class="codeheader">
DllCallAddress ( "return type", address [, type1, param1 [, type n, param n]] )<br />
</p>

<h2>Parameters</h2>
<table>
<tr>
<td style="width:15%">return type</td>
<td style="width:85%">The return type of the function (see below).</td>
</tr>
<tr>
<td>address</td>
<td>The address of a function. <strong>If this value is invalid your script will crash!</strong></td>
</tr>
<tr>
<td>type1</td>
<td><strong>[optional]</strong> The type of the parameter (see remarks).</td>
</tr>
<tr>
<td>param1</td>
<td><strong>[optional]</strong> The actual parameter (see remarks).</td>
</tr>
<tr>
<td>type n</td>
<td><strong>[optional]</strong> The type of the nth parameter (see remarks).</td>
</tr>
<tr>
<td>param n</td>
<td><strong>[optional]</strong> The actual nth parameter (see remarks).</td>
</tr>
</table><br />Valid Types are:<br />
<br />
<table>
<tr>
<td style="width:15%"><strong>Type</strong></td>
<td style="width:85%"><strong>Details</strong></td>
</tr>
<tr>
<td>NONE</td>
<td>no value (only valid for return type - equivalent to void in C)</td>
</tr>
<tr>
<td>BYTE</td>
<td>an unsigned 8 bit integer</td>
</tr>
<tr>
<td>BOOLEAN</td>
<td>an unsigned 8 bit integer</td>
</tr>
<tr>
<td>SHORT</td>
<td>a 16 bit integer</td>
</tr>
<tr>
<td>USHORT</td>
<td>an unsigned 16 bit integer</td>
</tr>
<tr>
<td>WORD</td>
<td>an unsigned 16 bit integer</td>
</tr>
<tr>
<td>INT</td>
<td>a 32 bit integer</td>
</tr>
<tr>
<td>LONG</td>
<td>a 32 bit integer</td>
</tr>
<tr>
<td>BOOL</td>
<td>a 32 bit integer</td>
</tr>
<tr>
<td>UINT</td>
<td>an unsigned 32 bit integer</td>
</tr>
<tr>
<td>ULONG</td>
<td>an unsigned 32 bit integer</td>
</tr>
<tr>
<td>DWORD</td>
<td>an unsigned 32 bit integer</td>
</tr>
<tr>
<td>INT64</td>
<td>a 64 bit integer</td>
</tr>
<tr>
<td>UINT64</td>
<td>an unsigned 64 bit integer</td>
</tr>
<tr>
<td>PTR</td>
<td>a general pointer (void *)</td>
</tr>
<tr>
<td>HWND</td>
<td>a window handle (pointer)</td>
</tr>
<tr>
<td>HANDLE</td>
<td>an handle (pointer)</td>
</tr>
<tr>
<td>FLOAT</td>
<td>a single precision floating point number</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>a double precision floating point number</td>
</tr>
<tr>
<td>INT_PTR, LONG_PTR, LRESULT, LPARAM</td>
<td>an integer big enough to hold a pointer when running on x86 or x64 versions of AutoIt.</td>
</tr>
<tr>
<td>UINT_PTR, ULONG_PTR, DWORD_PTR, WPARAM</td>
<td>an unsigned integer big enough to hold a pointer when running on x86 or x64 versions of AutoIt.</td>
</tr>
<tr>
<td>STR</td>
<td>an ANSI string (a minimum of 65536 chars is allocated).</td>
</tr>
<tr>
<td>WSTR</td>
<td>a UNICODE wide character string (a minimum of 65536 chars is allocated).</td>
</tr>
<tr>
<td>STRUCT</td>
<td>structure created with DllStructCreate()</td>
</tr>
<tr>
<td>*</td>
<td>Add * to the end of another type to pass it by reference. For example "int*" passes a pointer to an "int" type.</td>
</tr>
</table><br />
<br />Conversions from Windows API types to AutoIt types:<br />
<br />
<table>
<tr>
<td style="width:15%"><strong>WINDOWS API Type</strong></td>
<td style="width:85%"><strong>AutoIt Type</strong></td>
</tr>
<tr>
<td>LPCSTR/LPSTR</td>
<td>STR</td>
</tr>
<tr>
<td>LPCWSTR/LPWSTR</td>
<td>WSTR</td>
</tr>
<tr>
<td>LPVOID</td>
<td>PTR</td>
</tr>
<tr>
<td>LP<em>xyz</em></td>
<td><em>xyz</em>*</td>
</tr>
<tr>
<td>HINSTANCE</td>
<td>HANDLE</td>
</tr>
<tr>
<td>HRESULT</td>
<td>LONG</td>
</tr>
<tr>
<td>LONGLONG/LARGE_INTEGER</td>
<td>INT64</td>
</tr>
<tr>
<td>ULONGLONG/ULARGE_INTEGER</td>
<td>UINT64</td>
</tr>
<tr>
<td>SIZE_T</td>
<td>ULONG_PTR</td>
</tr>
</table>To use nested structures inside a structure you must re-define the nested structure. For example, a structure containing 2 POINT structures ("long;long") would be declared as "long;long;long;long". The first two long values correspond to the first POINT structure and the second two values correspond to the second POINT structure.<br />
<br />
For more Windows API types see <a href="http://msdn.microsoft.com/en-us/library/aa383751.aspx">MSDN</a>.<br />
<br />


<h2>Return Value</h2>
<table class="noborder">
<tr>
<td style="width:10%" class="valign-top">Success:</td>
<td style="width:90%">an array. See remarks.</td>
</tr>
<tr>
<td class="valign-top">Failure:</td>
<td>sets the @error flag to non-zero.</td>
</tr>
<tr>
<td class="valign-top">@error:</td>
<td>2 = unknown "return type",<br />
4&nbsp;= bad number of parameters,<br />
5&nbsp;= bad parameter</td>
</tr>
</table><br />


<h2>Remarks</h2>
<p>By default, AutoIt uses the 'stdcall' calling method. To use the 'cdecl' method place ':cdecl' after the return type.<br />
<br />
If the function call fails then the @error flag is set to non-zero.<br />
Otherwise an array is returned that contains the function return value and a copy of all the parameters (including parameters that the function may have modified when passed by reference).<br />
$return[0] = function return value<br />
$return[1] = param1<br />
$return[2] = param2<br />
...<br />
$return[n] = paramn<br />
<br />
<div class="specialnote">Special Note: This is an advanced function. Incorrect use of this function may cause AutoIt to crash. Before using this function make sure <a href="DllCall.htm">DllCall()</a> doesn't do what you need.</div><br />
</p>

<h2>Related</h2>
<p><a href="DllCall.htm">DllCall</a>, <a href="DllCallbackFree.htm">DllCallbackFree</a>, <a href="DllCallbackGetPtr.htm">DllCallbackGetPtr</a>, <a href="DllCallbackRegister.htm">DllCallbackRegister</a>, <a href="DllClose.htm">DllClose</a>, <a href="DllOpen.htm">DllOpen</a>, <a href="DllStructCreate.htm">DllStructCreate</a>, <a href="DllStructGetPtr.htm">DllStructGetPtr</a></p>

<h2 class="bottom">Example</h2>
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
function copyToClipboard(section) {
if (window.clipboardData && clipboardData.setData) {
clipboardData.setData("text", section + "\r\n");
alert("Copied to clipboard");
}
}
</script>
<div class="codeSnippetContainer">
	<div class="codeSnippetContainerTabs">
<script type="text/javascript">
if (document.URL.match(/^mk:@MSITStore:/i)) {
document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Open this Script"><param name="Item1" value=",Examples\\HelpFile\\DllCallAddress.au3,"></object>');
document.write('<\/div>');
}
</script>
</div>

<div class="codeSnippetContainerCodeContainer">
<div class="codeSnippetToolBar">
<div class="codeSnippetToolBarText">
<script type="text/javascript">
if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext1\').innerText)">Copy to clipboard<\/a>');
</script>
</div>
</div>
<div class="codeSnippetContainerCode" dir="ltr" id="copytext1">
<pre>
<span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;GUIConstantsEx.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;MsgBoxConstants.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;WinAPISysWin.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;WindowsConstants.au3&gt;</span>

<span class="S0">Example</span><span class="S8">()</span>

<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Func</span></a><span class="S0"> Example</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S1">; Enable GUI event mode.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/AutoItSetOption.htm"><span class="S4">Opt</span></a><span class="S8">(</span><span class="S7">"GUIOnEventMode"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">1</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S1">; Create a simple GUI.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$hWnd</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/GUICreate.htm"><span class="S4">GUICreate</span></a><span class="S8">(</span><span class="S7">"DllCallAddress Example"</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S1">; Register the close event handler.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/GUISetOnEvent.htm"><span class="S4">GUISetOnEvent</span></a><span class="S8">(</span><span class="S9">$GUI_EVENT_CLOSE</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"OnClose"</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S1">; Show the GUI.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/GUISetState.htm"><span class="S4">GUISetState</span></a><span class="S8">(</span><a class="codeSnippetLink" href="../macros.htm#@SW_SHOWNORMAL"><span class="S6">@SW_SHOWNORMAL</span></a><span class="S8">,</span><span class="S0"> </span><span class="S9">$hWnd</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S1">; Get a pointer to the window's WindowProc().</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$pWndProc</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../libfunctions/_WinAPI_GetWindowLong.htm"><span class="S15">_WinAPI_GetWindowLong</span></a><span class="S8">(</span><span class="S9">$hWnd</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$GWL_WNDPROC</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S1">; Tell the user what is about to happen.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"DllCallAddress Example Msg"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"When you press OK the test window will close."</span><span class="S8">)</span>

<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S1">; Explicitly generate a WM_CLOSE event and pass it directly to the WindowProc().</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S1">; This should never be done in a real application (Use _SendMessage() instead) but</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="S1">; it demonstrates how to use the function.</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/DllCallAddress.htm"><span class="S4">DllCallAddress</span></a><span class="S8">(</span><span class="S7">"LRESULT"</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$pWndProc</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"HWND"</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$hWnd</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"UINT"</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$WM_CLOSE</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"WPARAM"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">0</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"LPARAM"</span><span class="S8">,</span><span class="S0"> </span><span class="S3">0</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">EndFunc</span></a><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;Example</span>

<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Func</span></a><span class="S0"> OnClose</span><span class="S8">()</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/GUIDelete.htm"><span class="S4">GUIDelete</span></a><span class="S8">(</span><a class="codeSnippetLink" href="../macros.htm#@GUI_WinHandle"><span class="S6">@GUI_WinHandle</span></a><span class="S8">)</span>
<span class="S0">&nbsp; &nbsp; &nbsp; &nbsp; </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"DllCallAddress Example Msg"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"Close event received, the test window should now be closed."</span><span class="S8">)</span>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">EndFunc</span></a><span class="S0"> &nbsp;&nbsp;</span><span class="S1">;==&gt;OnClose</span>
<span class="S0"></span></span>
</pre>
</div>
</div>
</div>
</body>
</html>
