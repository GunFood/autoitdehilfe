<!DOCTYPE html>
<html>
<head>
<title>Keyword $tagNMTREEVIEW</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>

<body>
<h1 class="small">Keyword Reference</h1>
<hr style="height:0px">
<div class="top"><h1>$tagNMTREEVIEW</h1><div>
<div id="flagtext">Show description in</div>
<div id="flaglink"> <a href="../libfunctions/$tagNMTREEVIEW.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"><img src="../images/Flagge_de.png" height="29" width="36" border=0 hspace=10/></a></div>
<div ><input id="toggleButton" type="image" onclick="Themes.toggleTheme()" src="../images/dark.png" height ="36" width="36" alt="Toggle Theme"></div><br />
<br style="clear: both;">
<p style="margin:2px 0 0 0;" class="funcdesc">Contains information about a tree-view notification message<br /></p>
<p class="codeheader">
Global Const $tagNMTREEVIEW = $tagNMHDR & ";uint Action;" & _<br />
	"struct; uint OldMask;handle OldhItem;uint OldState;uint OldStateMask;" & _<br />
	"ptr OldText;int OldTextMax;int OldImage;int OldSelectedImage;int OldChildren;lparam OldParam; endstruct;" & _<br />
	"struct; uint NewMask;handle NewhItem;uint NewState;uint NewStateMask;" & _<br />
	"ptr NewText;int NewTextMax;int NewImage;int NewSelectedImage;int NewChildren;lparam NewParam; endstruct;" & _<br />
	"struct; long PointX;long PointY; endstruct"<br />
</p>

<h2>Parameters</h2>
<table>
<tr>
<td style="width:15%">$tagNMHDR</td>
<td style="width:85%">Contains information about a notification message</td>
</tr>
<tr>
<td>Action</td>
<td>Notification-specific action flag</td>
</tr>
<tr>
<td>OldMask</td>
<td>Flags that indicate which of the other structure members contain valid data.</td>
</tr>
<tr>
<td>OldhItem</td>
<td>Item to which this structure refers</td>
</tr>
<tr>
<td>OldState</td>
<td>Set of bit flags and image list indexes that indicate the item's state</td>
</tr>
<tr>
<td>OldStateMask</td>
<td>Bits of the state member that are valid</td>
</tr>
<tr>
<td>OldText</td>
<td>Pointer to a null-terminated string that contains the item text.</td>
</tr>
<tr>
<td>OldTextMax</td>
<td>Size of the buffer pointed to by the Text member, in characters</td>
</tr>
<tr>
<td>OldImage</td>
<td>Index in the image list of the icon image to use when the item is in the nonselected state</td>
</tr>
<tr>
<td>OldSelectedImage</td>
<td>Index in the image list of the icon image to use when the item is in the selected state</td>
</tr>
<tr>
<td>OldChildren</td>
<td>Flag that indicates whether the item has associated child items</td>
</tr>
<tr>
<td>OldParam</td>
<td>A value to associate with the item</td>
</tr>
<tr>
<td>NewMask</td>
<td>Flags that indicate which of the other structure members contain valid data.</td>
</tr>
<tr>
<td>NewhItem</td>
<td>Item to which this structure refers</td>
</tr>
<tr>
<td>NewState</td>
<td>Set of bit flags and image list indexes that indicate the item's state</td>
</tr>
<tr>
<td>NewStateMask</td>
<td>Bits of the state member that are valid</td>
</tr>
<tr>
<td>NewText</td>
<td>Pointer to a null-terminated string that contains the item text.</td>
</tr>
<tr>
<td>NewTextMax</td>
<td>Size of the buffer pointed to by the Text member, in characters</td>
</tr>
<tr>
<td>NewImage</td>
<td>Index in the image list of the icon image to use when the item is in the nonselected state</td>
</tr>
<tr>
<td>NewSelectedImage</td>
<td>Index in the image list of the icon image to use when the item is in the selected state</td>
</tr>
<tr>
<td>NewChildren</td>
<td>Flag that indicates whether the item has associated child items</td>
</tr>
<tr>
<td>NewParam</td>
<td>A value to associate with the item</td>
</tr>
<tr>
<td>PointX</td>
<td>X position that of the mouse at the time the event occurred</td>
</tr>
<tr>
<td>PointY</td>
<td>Y position that of the mouse at the time the event occurred</td>
</tr>
</table>

</body>
</html>
