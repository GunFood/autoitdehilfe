<!DOCTYPE html>
<html>
<head>
  <title>Functions</title>
  <meta charset="utf-8">
  <link href="../css/default.css" rel="stylesheet">
</head>

<body>
<h1>Process functions Reference</h1>
<p>Below is a complete list of the functions available in AutoIt.
Click on a function name for a detailed description.</p>
<p>&nbsp;</p>

<table>
<tr>
  <th style="width:25%">Function</th>
  <th style="width:75%">Description</th>
</tr>
<tr>
<td><a href="DllCall.htm">DllCall</a></td>
<td>Dynamically calls a function in a DLL.<br /></td>
</tr>
<tr>
<td><a href="DllCallAddress.htm">DllCallAddress</a></td>
<td>Dynamically calls a function at a specific memory address.<br /></td>
</tr>
<tr>
<td><a href="DllCallbackFree.htm">DllCallbackFree</a></td>
<td>Frees a previously created handle created with DllCallbackRegister.<br /></td>
</tr>
<tr>
<td><a href="DllCallbackGetPtr.htm">DllCallbackGetPtr</a></td>
<td>Returns the pointer to a callback function that can be passed to the Win32 API.<br /></td>
</tr>
<tr>
<td><a href="DllCallbackRegister.htm">DllCallbackRegister</a></td>
<td>Creates a user-defined DLL Callback function.<br /></td>
</tr>
<tr>
<td><a href="DllClose.htm">DllClose</a></td>
<td>Closes a previously opened DLL.<br /></td>
</tr>
<tr>
<td><a href="DllOpen.htm">DllOpen</a></td>
<td>Opens a DLL file for use in DllCall.<br /></td>
</tr>
<tr>
<td><a href="DllStructCreate.htm">DllStructCreate</a></td>
<td>Creates a C/C++ style structure to be used in DllCall.<br /></td>
</tr>
<tr>
<td><a href="DllStructGetData.htm">DllStructGetData</a></td>
<td>Returns the data of an element of the struct.<br /></td>
</tr>
<tr>
<td><a href="DllStructGetPtr.htm">DllStructGetPtr</a></td>
<td>Returns the pointer to the struct or an element in the struct.<br /></td>
</tr>
<tr>
<td><a href="DllStructGetSize.htm">DllStructGetSize</a></td>
<td>Returns the size of the struct in bytes.<br /></td>
</tr>
<tr>
<td><a href="DllStructSetData.htm">DllStructSetData</a></td>
<td>Sets the data of an element in the struct.<br /></td>
</tr>
<tr>
<td><a href="ProcessClose.htm">ProcessClose</a></td>
<td>Terminates a named process.<br /></td>
</tr>
<tr>
<td><a href="ProcessExists.htm">ProcessExists</a></td>
<td>Checks to see if a specified process exists.<br /></td>
</tr>
<tr>
<td><a href="ProcessGetStats.htm">ProcessGetStats</a></td>
<td>Returns an array about Memory or IO infos of a running process.<br /></td>
</tr>
<tr>
<td><a href="ProcessList.htm">ProcessList</a></td>
<td>Returns an array listing the currently running processes (names and PIDs).<br /></td>
</tr>
<tr>
<td><a href="ProcessSetPriority.htm">ProcessSetPriority</a></td>
<td>Changes the priority of a process.<br /></td>
</tr>
<tr>
<td><a href="ProcessWait.htm">ProcessWait</a></td>
<td>Pauses script execution until a given process exists.<br /></td>
</tr>
<tr>
<td><a href="ProcessWaitClose.htm">ProcessWaitClose</a></td>
<td>Pauses script execution until a given process does not exist.<br /></td>
</tr>
<tr>
<td><a href="Run.htm">Run</a></td>
<td>Runs an external program.<br /></td>
</tr>
<tr>
<td><a href="RunAs.htm">RunAs</a></td>
<td>Runs an external program under the context of a different user.<br /></td>
</tr>
<tr>
<td><a href="RunAsWait.htm">RunAsWait</a></td>
<td>Runs an external program under the context of a different user and pauses script execution until the program finishes.<br /></td>
</tr>
<tr>
<td><a href="RunWait.htm">RunWait</a></td>
<td>Runs an external program and pauses script execution until the program finishes.<br /></td>
</tr>
<tr>
<td><a href="ShellExecute.htm">ShellExecute</a></td>
<td>Runs an external program using the ShellExecute API.<br /></td>
</tr>
<tr>
<td><a href="ShellExecuteWait.htm">ShellExecuteWait</a></td>
<td>Runs an external program using the ShellExecute API and pauses script execution until it finishes.<br /></td>
</tr>
<tr>
<td><a href="Shutdown.htm">Shutdown</a></td>
<td>Shuts down the system.<br /></td>
</tr>
<tr>
<td><a href="StderrRead.htm">StderrRead</a></td>
<td>Reads from the STDERR stream of a previously run child process.<br /></td>
</tr>
<tr>
<td><a href="StdinWrite.htm">StdinWrite</a></td>
<td>Writes a number of characters to the STDIN stream of a previously run child process.<br /></td>
</tr>
<tr>
<td><a href="StdioClose.htm">StdioClose</a></td>
<td>Closes all resources associated with a process previously run with STDIO redirection.<br /></td>
</tr>
<tr>
<td><a href="StdoutRead.htm">StdoutRead</a></td>
<td>Reads from the STDOUT stream of a previously run child process.<br /></td>
</tr>
</table>

</body>
