<!DOCTYPE html>
<html>
<head>
	<title>Sprachreferenz - Benutzer Funktionen</title>
	<meta charset="utf-8">
	<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter pr√ºfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>
<body>
	<h1>Sprachreferenz - Benutzer Funktionen</h1>
	<p>Eine Funktion ist eine Code-Sektion, die von einem Skript aufgerufen werden kann, und die eine bestimmte "Funktion" erf&uuml;llt. Es gibt in AutoIt zwei Sorten von Funktionen, <strong>eingebaute (Built-in) Funktionen</strong> und <strong>Benutzer Funktionen (User Funktionen)</strong>.</p>
	<p>Es ist zu beachten, dass alle Funktionen die Gro&szlig;- und Kleinschreibung ignorieren: msgbox() wird gelesen als MsgBox(). MyFunc() ist das gleiche wie MyfunC()</p>
	<h2>Eingebaute Funktionen</h2>
	<p>Die vollst&auml;ndige Liste der eingebauten Funktionen gibt es <a href="../functions.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">hier</a>, die Hinweise, wie sie zu nutzen sind, gibt es <a href="../function_notes.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">hier</a>.</p>
	<h2>Benutzer Funktionen</h2>
	<p>Benutzer Funktionen werden &uuml;ber die Anweisungen <a href="../keywords/Func.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false">Func...EndFunc</a> bekannt gemacht.</p>
	<p>Funktionen akzeptieren - je nach Forderung - Parameter und zur&uuml;ck gegebene Werte.</p>
	<p>Funktionsnamen m&uuml;ssen entweder mit einem Buchstaben oder einem Unterstrich beginnen, der Rest des Namens kann jede Kombination von Buchstaben, Zahlen und Unterstrichen enthalten. Einige g&uuml;ltige Funktionsnamen sind z.B.:</p>
	<p>&nbsp;&nbsp;&nbsp; MyFunc</p>
	<p>&nbsp;&nbsp;&nbsp; Func1</p>
	<p>&nbsp;&nbsp;&nbsp; _My_Func1</p>
	<p>Hier ist ein Beispiel f&uuml;r eine Funktion, die eine Zahl 10 mal verdoppelt:</p>
@@SyntaxHighlighting@@
#include <MsgBoxConstants.au3>

Local $iNumber = 10
Local $iDoubled = 0

For $i = 1 To 10
	$iDoubled = MyDouble($iNumber)
	MsgBox($MB_SYSTEMMODAL, "", $iNumber & " verdoppelt " & $iDoubled)
	$iNumber = $iDoubled
Next
Exit

Func MyDouble($iValue)
	$iValue = $iValue * 2
	Return $iValue
EndFunc   ;==>MyDouble
@@End@@  
  
</body>
</html>
