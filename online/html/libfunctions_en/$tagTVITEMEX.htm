<!DOCTYPE html>
<html>
<head>
<title>Keyword $tagTVITEMEX</title>
<meta charset="utf-8">
<link href="../css/default.css" rel="stylesheet" type="text/css" id="theme" />
	<script type="text/javascript">
		var aThemes = new Array('default.css','dark.css');
		var aImages = new Array('dark.png','default.png');
			
		class Themes {
			static theme = document.getElementById('theme').getAttribute('href').split('/')[1];
			static index = 0;
			static getTheme() {
				return this.theme;
			}
			static setTheme(name) {
				this.index = (name == 'default') ? 1 : 0;
				this.toggleTheme();
			}
			static storeTheme(idx) {
				this.theme = aThemes[idx];				
				document.getElementById('theme').setAttribute('href', '../css/' + this.theme);
				document.getElementById('toggleButton').src = '../images/' + aImages[idx];
			}
			static toggleTheme() {
				this.index = Math.abs(this.index -1);
				if (this.theme != aThemes[this.index]) {
					this.storeTheme(this.index);
				}
				// *** NUR hier im Test zur Anzeige geladenes Theme ***
				// *** document.getElementById('nameTheme').innerText = aThemes[this.index];
			}
		}		

		function getURLParameter(name) {
			var value = decodeURIComponent((RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, ""])[1]);
			return (value !== 'null') ? value : false;
		}
		
		// -- Wenn Seite geladen: auf Theme-Parameter prüfen. Wenn anderes Theme: Wechseln. --
		window.addEventListener('load', function(){
			var themeCurrent = Themes.getTheme();
			var param = getURLParameter('Theme'); 
			if (param && themeCurrent != param) {
				Themes.setTheme(param);
			}
			// *** NUR hier im Test zur Anzeige Parameter ***
			// *** document.getElementById('info').innerText = param;
		})	
	</script>	
</head>

<body>
<h1 class="small">Keyword Reference</h1>
<hr style="height:0px">
<div class="top"><h1>$tagTVITEMEX</h1><div>
<div id="flagtext">Show description in</div>
<div id="flaglink"> <a href="../libfunctions/$tagTVITEMEX.htm" onclick="location.href = this.href + '?Theme=' + Themes.getTheme();return false"><img src="../images/Flagge_de.png" height="29" width="36" border=0 hspace=10/></a></div>
<div ><input id="toggleButton" type="image" onclick="Themes.toggleTheme()" src="../images/dark.png" height ="36" width="36" alt="Toggle Theme"></div><br />
<br style="clear: both;">
<p style="margin:2px 0 0 0;" class="funcdesc">Specifies or receives attributes of a tree-view item<br /></p>
<p class="codeheader">
Global Const $tagTVITEMEX = "struct; uint Mask;struct; handle hItem;uint State;uint StateMask;ptr Text;int TextMax;int Image;int SelectedImage;int Children;lparam Param; endstruct;" & _<br />
	"int Integral;uint uStateEx;hwnd hwnd;int iExpandedImage;int iReserved; endstruct"<br />
</p>

<h2>Parameters</h2>
<table>
<tr>
<td style="width:15%">Mask</td>
<td style="width:85%">Flags that indicate which of the other structure members contain valid data:<br />
&nbsp;&nbsp;&nbsp; $TVIF_CHILDREN - The Children member is valid<br />
&nbsp;&nbsp;&nbsp; $TVIF_DI_SETITEM - The will retain the supplied information and will not request it again<br />
&nbsp;&nbsp;&nbsp; $TVIF_EXPANDEDIMAGE - The iExpandedImage member is valid (IE Version 6.00 and Windows Vista)<br />
&nbsp;&nbsp;&nbsp; $TVIF_HANDLE - The hItem member is valid<br />
&nbsp;&nbsp;&nbsp; $TVIF_IMAGE - The Image member is valid<br />
&nbsp;&nbsp;&nbsp; $TVIF_INTEGRAL - The Integral member is valid<br />
&nbsp;&nbsp;&nbsp; $TVIF_PARAM - The Param member is valid<br />
&nbsp;&nbsp;&nbsp; $TVIF_SELECTEDIMAGE - The SelectedImage member is valid<br />
&nbsp;&nbsp;&nbsp; $TVIF_STATE - The State and StateMask members are valid<br />
&nbsp;&nbsp;&nbsp; $TVIF_STATEEX - The uStateEx member is valid (IE Version 6.00 and Windows Vista)<br />
&nbsp;&nbsp;&nbsp; $TVIF_TEXT - The Text and TextMax members are valid</td>
</tr>
<tr>
<td>hItem</td>
<td>Item to which this structure refers</td>
</tr>
<tr>
<td>State</td>
<td>Set of bit flags and image list indexes that indicate the item's state. When setting the state of an item.<br />
The StateMask member indicates the bits of this member that are valid. When retrieving the state of an item, this member returns the current state for the bits indicated in the StateMask member.<br />
Bits 0 through 7 of this member contain the item state flags.<br />
Bits 8 through 11 of this member specify the 1-based overlay image index.</td>
</tr>
<tr>
<td>StateMask</td>
<td>Bits of the state member that are valid. If you are retrieving an item's state, set the bits of the stateMask member to indicate the bits to be returned in the state member.<br />
If you are setting an item's state, set the bits of the stateMask member to indicate the bits of the state member that you want to set.</td>
</tr>
<tr>
<td>Text</td>
<td>Pointer to a null-terminated string that contains the item text.</td>
</tr>
<tr>
<td>TextMax</td>
<td>Size of the buffer pointed to by the Text member, in characters</td>
</tr>
<tr>
<td>Image</td>
<td>Index in the image list of the icon image to use when the item is in the nonselected state</td>
</tr>
<tr>
<td>SelectedImage</td>
<td>Index in the image list of the icon image to use when the item is in the selected state</td>
</tr>
<tr>
<td>Children</td>
<td>Flag that indicates whether the item has associated child items. This member can be one of the following values:<br />
&nbsp;&nbsp;&nbsp; 0 - The item has no child items<br />
&nbsp;&nbsp;&nbsp; 1 - The item has one or more child items</td>
</tr>
<tr>
<td>Param</td>
<td>A value to associate with the item</td>
</tr>
<tr>
<td>Integral</td>
<td>Height of the item</td>
</tr>
<tr>
<td>uStateEx</td>
<td>One or more (as a bitwise combination) of the following extended states.<br />
Value Meaning:<br />
&nbsp;&nbsp;&nbsp; TVIS_EX_DISABLED <strong>Windows Vista or later</strong>. Creates a control that is drawn in grey, that the user cannot interact with.<br />
&nbsp;&nbsp;&nbsp; TVIS_EX_FLAT Creates a flat item—the item is virtual and is not visible in the tree; instead, its children take its place in the tree hierarchy.<br />
&nbsp;&nbsp;&nbsp; TVIS_EX_HWND Creates a separate HWND for the item.</td>
</tr>
<tr>
<td>hwnd</td>
<td>Not used; must be NULL.</td>
</tr>
<tr>
<td>iExpandedImage</td>
<td>Index of the image in the control's image list to display when the item is in the expanded state.</td>
</tr>
<tr>
<td>iReserved</td>
<td>Reserved member. Do not use.</td>
</tr>
</table>

</body>
</html>
